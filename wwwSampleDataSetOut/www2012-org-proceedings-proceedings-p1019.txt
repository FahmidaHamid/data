Vertex Collocation Proﬁles: Subgraph Counting for Link

Analysis and Prediction

Ryan N. Lichtenwalter
University of Notre Dame
Notre Dame, Indiana, USA

rlichten@nd.edu

Nitesh V. Chawla

University of Notre Dame
Notre Dame, Indiana, USA

nchawla@nd.edu

ABSTRACT
We introduce the concept of a vertex collocation proﬁle
(VCP) for the purpose of topological link analysis and pre-
diction. VCPs provide nearly complete information about
the surrounding local structure of embedded vertex pairs.
The VCP approach oﬀers a new tool for domain experts
to understand the underlying growth mechanisms in their
networks and to analyze link formation mechanisms in the
appropriate sociological, biological, physical, or other con-
text. The same resolution that gives VCP its analytical
power also enables it to perform well when used in super-
vised models to discriminate potential new links. We ﬁrst
develop the theory, mathematics, and algorithms underly-
ing VCPs. Then we demonstrate VCP methods performing
link prediction competitively with unsupervised and super-
vised methods across several diﬀerent network families. We
conclude with timing results that introduce the comparative
performance of several existing algorithms and the practica-
bility of VCP computations on large networks.

Categories and Subject Descriptors
H.2.8 [Database Management]: Database Applications—
Data mining

Keywords
graph theory, link analysis, link prediction, network analysis

1.

INTRODUCTION

Link prediction is the task of inferring links in a graph
Gt+1 based on the observation of a graph Gt.
It may be
that t + 1 follows t in time, or it may be that t + 1 represents
some other evolution or manipulation of the graph such as
including additional links from experiments that are diﬃ-
cult or expensive to conduct. Link prediction stated in this
manner is a binary classiﬁcation problem in which links that
form construct the positive class and links that do not form
construct the negative class. Link analysis, more loosely de-
ﬁned, is the problem of identifying evolutionary processes
or growth mechanisms in a network that are responsible for
the formation of new relationships between nodes.

We formally deﬁne a new technique for performing both
link prediction and link analysis based on a restrictive rep-
resentation of the local topological embedding of the source

Copyright is held by the International World Wide Web Conference Com-
mittee (IW3C2). Distribution of these papers is limited to classroom use,
and personal use by others.
WWW 2012, April 16–20, 2012, Lyon, France.
ACM 978-1-4503-1229-5/12/04.

and target vertices. This idea is a generalization and exten-
sion of the triangle counting approach for multi-relational
prediction in [6]. It also draws on concepts from literature
on graphlets as introduced in [19] and to a lesser degree from
motif analysis as discussed in [17].

Many existing link prediction models compress a selection
of simple information in theoretically or empirically guided
ways. By contrast the VCP approach preserves as much
topological information as possible about the embedding of
the source and target vertices. It also extends naturally to
multi-relational networks and can thereby encode a variety
of additional information such as edge directionality. It can
encode continuous quantities such as edge weights by bin-
ning into relational categories, such as high activity and low
activity.
Information about the nature of relationships is
maintained as structures are identiﬁed within the network.
We proceed with a formal exploration of VCP, discuss its re-
lationship to isomorphism classes, provide algorithms that
formally describe VCP computations, and demonstrate the
potential of VCP in link prediction and analysis as well as
feasibility in terms of computational time. Fast forms of the
algorithms listed within this paper are all implemented in
C++ and integrated into the LPmade [14] link prediction
software and are thus freely available on MLOSS.

2. VERTEX COLLOCATION PROFILES

Formally, a vertex collocation proﬁle (VCP), written as
VCPn,r
i,j , is a vector describing the relationship between two
vertices, vi and vj, in terms of their common membership in
all possible subgraphs of n vertices over r relations. A VCP
element, VCPn,r
i,j (x) is deﬁned as a distinct embedding of vi
and vj within a particular isomorphism class of n vertices
and is represented by a uniquely addressable cell in the VCP
vector. Figure 1 illustrates the ﬁrst 16 elements of VCP3,2
s,t ,
where the two relations correspond to edge directionality.

In general, we can encode the connectivity in any multi-
relational network of r relations with 2r diﬀerent types of
connections. We use 2r instead of 2r−1 because structural
holes are often as important as links [5], and we consider
the lack of relation as itself a type of connection. Undi-
rected single-relational networks exhibit two types of connec-
tions: existent and nonexistent. Directed single-relational
networks are similar to undirected bi-relational networks
and have four types of connections: nonexistent, outward,
inward, and bidirectional.

The cardinality of VCPn,r depends upon the number of
vertices n and the number of types of relationship r in the set
of relations R. The space grows exponentially in the number

WWW 2012 – Session: Social NetworksApril 16–20, 2012, Lyon, France10190

4

8

s

s

s

s

t

t

t

t

1

5

9

s

s

s

s

t

t

t

t

2

6

10

s

s

s

s

t

t

t

t

3

7

11

s

s

s

s

t

t

t

t

12

13

14

15

Figure 1: Elements of VCP3,2
identical except with the presence of et,s.

s,t . 16 through 31 are

r

H

HH

H

H

n
3
4
5
6

1

4
32
512

16384

2

32

3

256

2048

524288
5.4 × 108

131072
5.4 × 108
1.8 × 1013

4

2048

8.4 × 106
5.5 × 1011
5.8 × 1018

Table 1: Number of enumerated subgraphs compos-
ing VCP for values of n and r.

of vertices with the base as the cardinality of the power
set of relations. The formula for the number of subgraphs
is written in intuitive form in Equation 1. The multiplier
accounts for the number of possible collocation structures
disregarding any links between the source and the target.
The multiplicand is the number of diﬀerent ways two vertices
with the same embedding can appear based on the diﬀerent
link possibilities between them.

(2r)(cid:16) n(n−1)

2 −1(cid:17) × 2r−1

(1)

We can manipulate these to achieve the simpler formula

below.

n(n−1)r

2

−1

2

(2)

Table 1 illustrates the number of subgraphs respecting
vertex identity that compose the VCP given diﬀerent values
of n and r.

The number of subgraphs grows at such a rate as to make
the sheer size of output unmanageable for large values of n
and r. The rate of growth of VCPs is much slower due to
superlinear increases in the isomorphisms with increasing n,
but nonetheless VCP cardinality also grows quickly. Fortu-
nately, the most important information is typically located
close to the source and target vertices, and many networks
have few types of relationships. When the number of rela-
tionship types is high, relationships can be compressed or
discarded in various ways albeit with a loss of information.

2.1 Isomorphisms

Isomorphic subgraphs are closely related to VCP elements.
In Figure 2, it is impossible to distinguish subgraph 1 from

0

8

16

s

s

s

s

t

t

t

t

1

9

17

s

s

s

s

t

t

t

t

2

10

18

s

s

s

s

t

t

t

t

3

11

19

s

s

s

s

t

t

t

t

4

12

20

s

s

s

s

t

t

t

t

5

13

21

s

s

s

s

t

t

t

t

6

14

22

s

s

s

s

t

t

t

t

7

15

23

s

s

s

s

t

t

t

t

24

25

26

27

28

29

30

31

0: {0}
1: {1,2}
2: {3}
3: {4,8}
4: {5,10}

5: {6,9}
6: {7,11}
7: {12}
8: {13,14}
9: {15}

10: {16}
11: {17,18}
12: {19}
13: {20,24}
14: {21,26}

15: {22,25}
16: {23,27}
17: {28}
18: {29,30}
19: {31}

Figure 2: Subgraphs that form VCP4,1
ping of isomorphic subgraphs to VCP elements.

s,t and the map-

subgraph 2, and the prevalence of the frequency of each dur-
ing counting will depend upon implementation details of the
counting algorithm that determine the order in which the
vertices are selected. These subgraphs map to the same
VCP element, VCP4,1
s,t (1), and the count of that element is
the sum of the counts of the isomorphic subgraphs.

Isomorphisms that require a mapping between vs and vt,
for instance subgraph 1 and subgraph 8 in Figure 2, do not
share the same VCP element even though they reside within
the same isomorphism class. VCP elements ignore isomor-
phisms that require mapping vs to vt because VCP describes
the local embedding of these two explicitly identiﬁed ver-
tices. In undirected graphs, elements such as VCP4,1
s,t (1) and
VCP4,1
s,t (3) together supply information regarding symmetry
or asymmetry in the density of the embedding of vs and vt.
The distinction in directed networks is more obvious and
relates to the potential signiﬁcance of the diﬀerence in the
local topologies of the source of a new link and its target.
Figure 2 shows all the subgraphs pertinent to VCP4,1 and
their corresponding mappings to elements.

Counting the number of elements in VCPn,r is related to
the complex problem of counting the number of isomorphism
classes in graphs of n vertices. In VCP3,r, each enumerated
subgraph maps uniquely to a VCP element. vs and vt are
ﬁxed, and there is only one permutation of the remaining
vertex. In VCP4,r, there are two mappable vertices and the
number of VCP4,r elements is described as:

26r−2 + 24r−2

(3)
The derivation of a general formula for |VCPn,r| for all
n and r is extremely combinatorially involved and its dis-
cussion is beyond the scope of this paper. We have in-
stead provided software that computes VCP cardinalities
and subgraph-to-element mappings for 3 < n < 8 and 1 <
r < 8. For practical purposes, Table 2 shows the cardinality
of all VCPs with fewer than a million elements.

2.2 Addressing

We deﬁne a VCP addressing scheme similar to the isomor-
phism certiﬁcate addressing scheme in [12]. The subgraphs
from which the elements are derived are indexed by assign-

WWW 2012 – Session: Social NetworksApril 16–20, 2012, Lyon, France1020Table 2: Number of elements in VCPn,r
i,j .

r

H

HH

H

H

n
3
4
5
6
7

1

4
20
120
996

12208

2

32

1088
91520

-
-

3

4

5

256

66560

-
-
-

2048

16384

-
-
-
-

-
-
-
-

ing powers of 2r to edges in the adjacency matrix in increas-
ing lexicographical order starting with e1,3 and ending with
en−1,n. vs and vt are deﬁned as v1 and v2 respectively, and
e1,2 is the edge of highest value. The value of each edge
is multiplied by the index of the lexicographically ordered
power set, P(R), corresponding to the ordered set of R rela-
tions on the edge. Figures 1 and 2 demonstrate the indexing
scheme for two diﬀerent values of n and r. For any selec-
tion of vertices vs, vt, v3, ..., vn, this addressing scheme will
map the resulting multi-relational subgraph to an index that
exists within a set of indices of isomorphic structures.

We deﬁne the unique address of a VCP element as the
subgraph representative with the lowest index within the
corresponding isomorphism class. This addressing scheme
provides a unique address for all elements in all VCPs. The
addresses for elements in VCP4,1 are provided in Figure
2. Because manual identiﬁcation of isomorphism classes is
error-prone and diﬃcult especially as the number of sub-
graphs increases, we have provided a program that outputs
the mapping from all subgraph indices to their correspond-
ing element addresses for all VCPs.

2.3 Directionality

Directed networks with r relations can be treated simi-
larly to undirected networks with 2r relations with one ma-
jor caveat. The subgraph-to-element mapping diﬀers with
directed networks. Taking ex
i,j momentarily as notation for
an edge of relation x and 2x as relation x in the opposite
i,j ≡ ex
direction, ex
j,i in undirected multi-relational networks,
i,j ≡ e2x
but ex
j,i in directed networks. In the context of larger
subgraphs, this causes more isomorphic equivalences and de-
creases the cardinality of the VCP by comparison to its
undirected pseudo-equivalent, a fact demonstrated in Fig-
ure 3. For instance, VCP4,2 contains 1088 elements whereas
the directed variant of VCP4,1 contains only 1056 elements.

s

s

341

t

t

≡

≡

597

s

s

t

t

341

597

Figure 3: Subgraphs from undirected VCP4,2 and di-
rected VCP4,1. The directed subgraphs both map to
directed VCP4,1(221), but the undirected subgraphs
map to two diﬀerent VCP4,2 elements.

Algorithm 1 VCP3,r
Input: network G = (V, E),

relations R,
i : vi ∈ V ,
j : vj ∈ V

i,j

i,j

[λ] ← V CP 3,|R|

i,j

σi,k ← Φ(P(R), ei,k)
σj,k ← Φ(P(R), ej,k)
λ ← 22|R|σi,j + 2|R|σj,k + σi,k
V CP 3,|R|
[λ] + 1

Output: V CP 3,|R|
1: σi,j ← Φ(P(R), ei,j)
2: for k : ei,k ∈ Ei ∧ ej,k ∈ Ej do
3:
4:
5:
6:
7: end for
8: for k : ei,k ∈ Ei ∧ ej,k /∈ Ej do
9:
σi,k ← Φ(P(R), ei,k)
λ ← 22|R|σi,j + 2|R|σj,k + σi,k
10:
V CP 3,|R|
11:
[λ] + 1
12: end for
13: for k : ei,k /∈ Ei ∧ ej,k ∈ Ej do
14:
σj,k ← Φ(P(R), ej,k)
λ ← 22|R|σi,j + 2|R|σj,k + σi,k
15:
V CP 3,|R|
16:
[λ] + 1
17: end for
18: λ ← 22|R|σi,j
19: for k : ei,k /∈ Ei ∧ ej,k /∈ Ej do
V CP 3,|R|
20:
21: end for
22: return V CP 3,|R|

[λ] ← V CP 3,|R|

[λ] ← V CP 3,|R|

[λ] ← V CP 3,|R|

i,j

[λ] + 1

i,j

i,j

i,j

i,j

i,j

i,j

Therefore, the algorithms in Section 3 and the procedures
described by all provided code work with only minor ad-
justments, which are essentially related to the subgraph-
to-element mapping. We include software to construct the
mapping for VCP4,1 where there are actually two relations
corresponding to directionality.

3. ALGORITHMS

In fact,

Algorithms 1 and 2 serve as reference algorithms and not
as optimized or even asymptotically optimal approaches for
VCP element counting.
implementations of the
na¨ıve VCP4,1 algorithm fail to return within a reasonable
time for networks with even thousands of nodes. Fortu-
nately, it is possible to design much faster approaches, and
we implemented these approaches and provide them as a set
of C++ ﬁles. We also present a more innovative algorithm,
Algorithm 3 for counting VCP4,1 that corresponds to the
approach in the code for that VCP.

3.1 3-Vertex VCP

Algorithm 1 demonstrates how to calculate VCP3,r for the
set of r relations in R. Φ(P(R), ex,y) refers to a procedure
to determine the index of the multi-relational edge ex,y in
P(R), the lexicographically ordered power set of relations.
This procedure can derive power set indices eﬃciently by
setting individual bits in the index according to the presence
of the relation corresponding to that bit and indexing the
bits by the natural order of the relations themselves.

This na¨ıve algorithm ﬁrst determines the contribution of
any edge types between vi and vj, the ﬁxed source and tar-

WWW 2012 – Session: Social NetworksApril 16–20, 2012, Lyon, France1021Algorithm 2 VCP4,1 (Simple)
Input: network G = (V, E),

i : vi ∈ V ,
j : vj ∈ V ,
subgraph-element mapping M

for l : vl 6= vi ∧ vl 6= vj ∧ l > k do

λ ← λ + 2

λ ← λ + 1

Output: V CP 4,1
i,j
1: for k : vk 6= vi ∧ vk 6= vj do
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21: end for
22: return V CP 4,1
i,j

λ ← 0
if ei,k ∈ E then
end if
if ei,l ∈ E then
end if
if ej,k ∈ E then
end if
if ej,l ∈ E then
end if
if ek,l ∈ E then
end if
V CP 4,1

λ ← λ + 16

λ ← λ + 4

λ ← λ + 8

get vertices for the link. Then it counts subgraphs with a
third vertex connected to both vi and vj, subgraphs only
connected to vi, subgraphs only connected to vj, and both.
σ represents the identity of an edge within P(R) and λ rep-
resents the index of the subgraph. Because no isomorphisms
exist with only one mappable vertex, the algorithm directly
increments the VCP elements corresponding to the under-
lying subgraph index as contrasted to Algorithm 2 wherein
the subgraph index must be mapped to an element address.
A na¨ıve implementation iterates through each vertex in
the network and determines the corresponding subgraph in-
dex by summing the edge contributions. For one free vertex,
this approach has complexity O (cid:16)|V | log (cid:16) |E|
|V |(cid:17)(cid:17) per edge
|V |(cid:17)(cid:17) neighbor search time for
output assuming O (cid:16)log (cid:16) |E|
the average case. This complexity is probably feasible for
small networks, but may require an unacceptably long time
for large networks.
It is simple to improve upon this ap-
proach by considering only the vertices that are neighbors,
denoted by Γ(vx) of vi, vj, both, or neither and perform-
ing set operations. VCP3,1
i,j (0) is populated by subtracting
|Γ(vi) ∪ Γ(vj)| from |V | − 2. VCP3,1
i,j (2) are
populated by computing set diﬀerences |Γ(vi) − Γ(vj)| and
|Γ(vj)−Γ(vi)| respectively. VCPi,j is computed as the inter-
section |Γ(vi) ∩ Γ(vj)|. These operations can be performed
quickly especially in graphs in which adjacencies are repre-
sented as ordered lists of neighbors. This implementation
has average-case complexity O (cid:16) |E|

|V |(cid:17) per edge output.

i,j (1) and VCP3,1

i,j (M (λ)) ← V CP 4,1

i,j (M (λ)) + 1

end for

3.2 4-Vertex VCP

yielding a complexity of O (cid:16)|V |2 log (cid:16) |E|

Algorithm 2 iterates through every pair of free vertices,
|V |(cid:17)(cid:17) from (cid:0)|V |−2
2 (cid:1)
pairs of free vertices. This requires trillions of operations
even for small networks. It is possible to reduce this time
greatly by restricting consideration to known neighbors as
described in the discussion of Algorithm 1, but na¨ıve im-
plementations of this optimization involve many expensive
operations in hashes or balanced search trees.

Algorithm 3 instead uses a minimal number of set op-
erations implemented as merge operations on ordered lists.
Figure 4 provides an illustration of the sets mentioned in
the following explanation. First, the number of connected
pairs and unconnected pairs is computed once for the en-
tire network, and these values are represented as χG and ǫG
respectively. We must also track the connected pairs and
unconnected pairs internal to the vertices in our consider-
ation for the prediction output to diﬀerentiate VCP4,1(0)
from VCP4,1(10). We start by constructing a set of po-
tential “third position” vertices, Γ3, as Γ(vi) ∩ Γ(vj). For
each member of Γ3, we construct two disjoint sets of “fourth
position” vertices, Γ4 containing vertices reachable by our
current member of Γ3 but not contained within Γ3, and Γ4a
constructed from Γ3 excluding the current member of Γ3.
In Γ4, we count new connections and gaps in the conﬁgu-
ration, and we increment the counter for the corresponding
subgraph. For Γ4a, we do not count connections and gaps
since conﬁgurations using those set members are counted
when they serve as members of Γ3, or “third position” ver-
tices. Likewise, we only count subgraphs with two mem-
bers from Γ3 when the member from Γ4a compares lower.
This avoids multi-counting. After considering the conﬁg-
urations from all members of Γ4 and Γ4a, we account for

structures with isolates by contributing |V | − 2 − |Γ3| − |Γ4|
to V CP 4,1
i,j (M (λ1)). We also account for multi-counting of
VCP4,1(0) due to duplicate consideration of gaps by sub-
tracting the same quantity from V CP 4,1
i,j (M (0)). Finally,
we compute VCP4,1(0) and VCP4,1(10) using our computa-
tions of vertices and gaps in the vertices we have encountered
in the single Γ3 and multiple Γ4 sets and subtract their con-
tributions from the contributions from the entire network.
It is possible to perform the entire procedure using a few
relatively inexpensive merge operations in ordered vectors
or lists and entirely avoiding hashes or balanced trees. This
exposition mostly describes the procedure to quickly com-
pute VCP4,1 albeit omitting minor implementation details.
We refer more interested readers to the code itself.

3.3 Extension to Complex Networks

It is trivial to extend VCP algorithms to networks more
complex than those on which we obtained our results. This
includes any form of edge feature such as directionality,
weight, temporality, diﬀerent relation types, or any infor-
mation describing edges or vertex pairs that either exists
categorically or can be quantized. One amenable network
representation associates an ordered set of bits with each
edge. Each bit corresponds to the presence of a particular
relation or some Boolean descriptor for a pair of vertices.
The determination of the existence of an edge for single-
relational data instead becomes an evaluation of the edge
as the binary-coded integral value of the ordered set of bits.
This is one conceivable implementation for Φ(P(R), ex,y) in
Algorithm 1, which replaces the constant values for all λ
updates in Algorithms 2 and 3. For most values of r, this

WWW 2012 – Session: Social NetworksApril 16–20, 2012, Lyon, France1022Algorithm 3 VCP4,1 (Fast)
Input: network G = (V, E),

i : vi ∈ V ,
j : vj ∈ V ,
subgraph-element mapping M
count of connected pairs χG,
count of unconnected pairs ǫG

Output: V CP 4,1
i,j

λ1 ← 0
if ei,k ∈ E ∨ ek,i ∈ E then

λ2 ← λ1
if ei,l ∈ E ∨ el,i ∈ E then

end if
if ej,l ∈ E ∨ el,j ∈ E then

end if
if ek,l ∈ E ∨ el,k ∈ E then

else

ǫ ← ǫ + 1

else

ǫ ← ǫ + 1

else

ǫ ← ǫ + 1

λ2 ← λ2 + 8
χ ← χ + 1

λ2 ← λ2 + 2
χ ← χ + 1

λ1 ← λ1 + 1
χ ← χ + 1

λ2 ← λ2 + 16
χ ← χ + 1

end if
Γ4 ← Γ(vk) − Γ3
υ ← υ + |Γ4|
for l : vl ∈ Γ4 do

1: υ ← 2
2: χ ← 0
3: ǫ ← 0
4: Γ3 ← Γ(vi) ∩ Γ(vj )
5: for k : vk ∈ Γ3 do
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
32:
33:
34:
35:
36:
37:
38:
39:
40:
41:
42:
43:
44:
45:
46:
47:
48:
49:
50:
51:
52:
53:
54:
55:
56: end for
57: ρ ← ei,j ∈ E ∨ ej,i ∈ E
58: V CP 4,1
59: V CP 4,1
60: return V CP 4,1
i,j

end for
ζ ← |Γ3| + |Γ4|
V CP 4,1
V CP 4,1

λ2 ← λ2 + 16
χ ← χ + 1

else

ǫ ← ǫ + 1

end if
V CP 4,1

λ2 ← λ2 + 2

else

ǫ ← ǫ + 1

end if
V CP 4,1

i,j (M (λ2)) ← V CP 4,1

i,j (M (λ2)) + 1

end for
for l : vl ∈ Γ3 ∧ l > k do

λ2 ← λ1
if ei,l ∈ E ∨ el,i ∈ E then

end if
if ej,l ∈ E ∨ el,j ∈ E then

λ2 ← λ2 + 8

end if
if ek,l ∈ E ∨ el,k ∈ E then

i,j (M (λ2)) ← V CP 4,1

i,j (M (λ2)) + 1

i,j (M (λ1)) ← V CP 4,1
i,j (M (0)) ← V CP 4,1

i,j (M (λ1)) + |V | − 2 − ζ
i,j (M (0)) + |V | − 2 − ζ

i,j (M (16)) ← V CP 4,1
i,j (M (0)) ← V CP 4,1

i,j (M (16)) + χG − (χ + ρ)
i,j (M (0))+ǫG−(ǫ+¬(ρ))−(2|V |−υ)

Г4

Г4

Г4

Г3

s

t

Figure 4: A depiction of the sets considered within
Algorithm 3.

can be implemented as a constant-time operation equivalent
to retrieving the value of a variable, so the asymptotic cost
of populating the VCP vector is unaﬀected. Excepting the
additional costs of writing output and of allocating and deal-
locating the storage necessary to hold the additional multi-
relational structural elements, which is inexpensively pro-
portional to 2r, the computational complexity of the multi-
relational extension is no greater than for single-relational
networks.

4. RESULTS

First, we illustrate how VCP can serve as a powerful link
analysis and modeling tool. Then we perform a standard
comparison of the link prediction eﬃcacy of VCP and a se-
lection of other methods. Timing results are rarely provided
in link prediction work despite vast diﬀerences in the run-
ning time and feasibility of methods. For this reason and
because we believe many might suspect that a completely
theoretically aligned implementation of VCP is computa-
tionally unachievable, we also provide comparative timing
results.

4.1 Data

We present results for several diﬀerent data sets to demon-
strate the performance of the techniques under compari-
son for diﬀerent families of networks. Though all of these
data sets contain information with which to generate edge
weights, we are interested in providing purely structural
comparison here, so all quantitative results are presented
based on networks constructed without edge weights.

calls is a stream of 262 million cellular phone calls from a
major cellular phone service provider. We construct directed
networks from the calls by creating a node vi for each caller
and a directed link ei,j from vi to vj if and only if vi calls vj.
sms is a stream of 84 million text messages from the same
source as calls and constructed in the same manner. These
two data sets are not publicly available.

condmat-collab is a stream of 19,464 multi-agent events
representing condensed matter physics collaborations from
1995 to 2000. We construct undirected networks from the
collaborations by creating a node for each author in the
event and an undirected link connecting each pair of au-
thors. For all experiments involving condmat, we use the
years 1995 to 1999 for constructing training data and the
year 2000 for testing.

dblp-cite is a citation network based on the DBLP com-
puter science bibliography. Each researcher is a node vi and
directed networks are formed by viewing a citation by re-
searcher vi of work by researcher vj as a directed link ei,j.
The dblp-collab network uses the same raw data, but links
are based on co-authorship collaborations. An undirected

WWW 2012 – Session: Social NetworksApril 16–20, 2012, Lyon, France1023Table 3: Some basic properties of the data sets. These ﬁgures are reported for networks constructed using
all available longitudinal data. C represents average clustering coeﬃcient and ra represents assortativity
coeﬃcient.

Name
calls
condmat-collab
dblp-cite
dblp-collab
disease-g
disease-p
hepth-cite
hepth-collab
huddle
patents-collab
sms

Directed Vertices
7,786,471

X

X

X

X

17,216
15,963
367,725

399
437
8,249
8,381
4,243

1,162,227
5,016,746

Edges
33,292,508
110,544
344,373
2,088,710
15,634
81,158
335,028
40,736
997,008
5,448,168
11,598,843

C
0.127
0.642
0.128
0.617
0.665
0.818
0.352
0.466
0.591
0.531
0.048

ra

0.212
0.177
-0.046
0.254
-0.310
-0.406
0.097
0.237
-0.211
0.141
0.042

link exists between vi and vj if both are an author on the
same paper.

disease-g is a network in which nodes represent diseases
and the links between diseases represent the co-occurrence
of particular genotypic characteristics. Links are undirected.
This network is not longitudinal, but ﬁnding unobserved
links is an important task, so we have no choice but to esti-
mate performance by randomly removing links to construct
test sets. disease-p is from the same source as disease-g.
The diﬀerence is that the links in disease-p represent the
co-occurrence of phenotypic characteristics. Predictions of
common expressions between diseases are uninteresting since
expressions are either observed between diseases or they are
not, so practically speaking the value of phenotypic pre-
dictions is negligible. Nonetheless, holding out phenotypic
links and subsequently predicting their presence is equally
instructive for the purposes of predictor evaluation.

hepth-cite and hepth-collab are formed in exactly the
same way as dblp-cite and dblp-collab respectively. The
raw data for these networks is a set of publications in the-
oretical high-energy physics. In particular, we used a data
set post-processed by the Knowledge Discovery Lab at the
University of Massachusetts for use in [16] rather than the
original 2003 KDD Cup competition data set. This form
of the data set oﬀers advantages in data quality and entity
consolidation and disambiguation.

The huddle data set from [20] is transaction data gath-
ered at a convenience store on the University of Notre Dame
campus. The data was collected from June 2004 to Febru-
ary 2007. Products are represented by nodes, and products
purchased together in the same transaction are represented
by undirected links.

The patents-collab data set is constructed from the data
at the National Bureau of Economic Research. Nodes rep-
resent authors of patents and undirected links are formed
between authors who work together on the same patent.

4.2 Experimental Setup

To run our experiments, we integrated VCP with the LP-
made link prediction software [14]. LPmade uses a GNU
make architecture to automate the steps necessary to per-
form supervised link prediction. This integration will allow
those interested in VCP for link prediction and other pur-
poses to test it on their networks easily.

We compare link prediction output against representatives
from diﬀerent predictor families established as strong by pre-

vailing literature [13]. The unsupervised selections include
the Adamic/Adar common neighbors predictor [1], the Katz
path-based predictor [11], and the preferential attachment
model [2, 18]. We also compare against the HPLP super-
vised link prediction framework contributed by [15] includ-
ing the PropFlow feature. HPLP combines simple topologi-
cal information such as node degree and common link predic-
tors into a bagged random forests classiﬁcation framework
with undersampling, a framework that the authors showed
works well.

When performing classiﬁcation using VCPs, we opted for
the bagged [3] random subspaces [9] implementation from
WEKA 3.5 [22]. This classiﬁcation scheme oﬀers signiﬁ-
cantly lower peak memory requirements than random forests
while simultaneously providing the potential to handle fea-
ture redundancy [9]. We considered presenting results with
HPLP also using random subspaces, but we determined that
random subspaces produced decreased or comparable per-
formance to the original reference implementation, so we
present HPLP results unmodiﬁed using random forests [4].
We used the default values from HPLP of 10 bags of 10
random forest trees, 10 bags of 10 random subspaces for
VCP classiﬁers, and training set undersampling to 25% pos-
itive class prevalence in training. We did not change the size
or distribution of the testing data. For undirected networks,
we resolve f (vs, vt) 6= f (vt, vs), by computing the arith-
metic mean to serve as the ﬁnal prediction output. By de-
fault, LPmade includes features that consider edge weights
such as the sum of incoming and outgoing link weights, and
PropFlow inherently considers edge weights. We are inter-
ested in the comparative prediction performance of the link
structure alone, so we ran all predictors on the networks dis-
regarding edge weights. There are many diﬀerent ways to
assign edge weights to all the networks here, and the par-
ticular choice of edge weight and the precise decision about
how to incorporate it into the VCPs would distract from the
study.

Computing and evaluating predictions for all possible links
on large, sparse networks with any prediction method is in-
feasible for multiple computational reasons including time
and storage capacity. Link prediction within a two-hop
geodesic distance provides much greater baseline precision
in many networks [15, 21], so eﬀectively predicting links
within this set oﬀers a strong indicator of reasonable deploy-
ment performance. For all compared prediction methods, we

WWW 2012 – Session: Social NetworksApril 16–20, 2012, Lyon, France1024Table 4: The distributional divergence of highly ver-
sus lowly ranked links as output from Adamic/Adar
on the sms network.

Address Element Distance

0

1

2

3

4

5

6

7

s

s

s

s

s

s

s

s

t

t

t

t

t

t

t

t

0.006

0.091

0.052

0.063

0.006

0.116

0.051

0.106

restricted the prediction task by distance and only consid-
ered performance comparisons for potential links spanning
two hops within the training data due to their higher prior
probability of formation and computational feasibility.

Reciprocity is an important consideration for link forma-
tion in directed networks, so when performing undirected
VCP computations on directed networks, we deviate slightly
from the deﬁnitions above to consider existing reciprocal
links as a diﬀerent relation type and accordingly double the
width of the VCP feature space to include elements with
and without the reciprocal link.

4.3 Link Analysis

VCPs can assist with a variety of functions regarding link
analysis, and post hoc analysis of link prediction output is an
interesting example. We start with the performance of the
Adamic/Adar predictor in the sms network. As we show
in Table 5, it achieves AUROC performance of 0.642 and
AUPR performance of 0.009410.
It may be helpful to us
as modelers to understand better why Adamic/Adar fails.
We can do this by looking at other simple characteristics of
the graph such as degree, centrality measures, or clustering
coeﬃcient, but VCPs oﬀer a ﬁne-grained and informative
view of links as they are embedded in the broader topology.
We select the Adamic/Adar predictor and ﬁrst extract
the positives from the top 10 million predictions and place
them in one set. We place all remaining positives in a sec-
ond set. For the positives in each of these sets, we can
very quickly compute the VCPs of our choice. For sim-
plicity in the demonstration, we choose undirected VCP3,1.
Since sms is a directed network, we extend VCP3,1 to in-
clude reciprocal edges between vi and vj if they exist. This
procedure provides two multi-column distributions of corre-
sponding columns. One logical ﬁrst step is to compute the
distributional divergences of these columns. The distribu-
tions are highly skewed, so we use Hellinger distance [10],
a non-parametric measure of divergence ranging from 0 to
√2. The distances are shown in Table 4.

We select the most divergent element, the ﬁfth, and ex-
amine the distribution of highly ranked and lowly ranked

s
k
n
L

i

 
f

o
 
r
e
b
m
u
N

 100000

 10000

 1000

 100

 10

 1

 1

High-ranked Predictions
Low-ranked Predictions

 10

 100

 1000

 10000

Structure Membership

Figure 5: Distributional comparison of extended
VCP3,1(5) membership for highly ranked and lowly
ranked Adamic/Adar prediction outputs.

Adamic/Adar outputs more closely in Figure 5. The ﬁfth
element is one in which a reciprocal link precedes the target
link in the prediction. The distributions indicate that highly
ranked predictions in Adamic/Adar tend to have more con-
nected source vertices than lowly ranked predictions. Since
having many neighbors in common tends to follow from sim-
ply having many neighbors, this is not surprising, but the
greater dissimilarities of elements 1, 5, and 7 and lesser dis-
similarities of 6 and 2 suggest that the connectedness of the
link initiator may be more signiﬁcant than that of the re-
ceiver. Adamic/Adar as a model fails to suﬃciently separate
links containing low-degree source vertices in this network.
In this particular case, we could have obtained the same
information by examining the degree distributions of the two
sets, but 4-vertex VCPs oﬀer much more distinctive struc-
tural information with their greater complexity. This is only
one of many ways to perform post hoc link prediction anal-
ysis that focuses on the causes of type 2 error in prediction
output. Similar analysis could be applied to analyze type 1
error in an attempt to increase precision. Many more pow-
erful and imaginative variations on these techniques apply
to link analysis and clustering in general.

4.4 Prediction Performance

The area under the receiver operating characteristic curve
(AUROC) can be deceptive in scenarios with extreme imbal-
ance [8] and area under the precision-recall curve (AUPR)
exhibits higher sensitivity in the same scenarios [7]. We will
provide results for those interested in traditional AUROC,
but we will also present AUPR results and will mainly re-
strict our analysis to those results. Table 5 shows the com-
parative AUROC and AUPR performance of Adamic/Adar,
Katz, preferential attachment, HPLP, and VCPs in link pre-
diction for potential links spanning a geodesic distance of
two hops.

In general, we expect the information content of VCPs to
increase in the left-to-right order presented in the table. De-
pending on the signiﬁcance of directedness in the network,
the expectation of performance from VCP 3D and VCP 4U
may change. We point the reader to calls, dblp-cite,
dblp-collab, disease-g, disease-p, hepth-cite, huddle,
patents-collab, and sms as conformant examples. We sus-

WWW 2012 – Session: Social NetworksApril 16–20, 2012, Lyon, France1025calls
condmat
dblp-cite
dblp-collab
disease-g
disease-p
hepth-cite
hepth-collab
huddle
patents-collab
sms

AA
0.698
0.663
0.794
0.697
0.930
0.898
0.826
0.606
0.879
0.793
0.642

Katz
0.641
0.630
0.791
0.623
0.907
0.920
0.794
0.619
0.875
0.671
0.581

PA
0.424
0.585
0.773
0.523
0.820
0.932
0.766
0.547
0.875
0.532
0.472

-

-

0.814

0.847

0.849

HPLP VCP 3U VCP 3D VCP 4U VCP 4D
0.782
0.588
0.841
0.691
0.970
0.922
0.838
0.592
0.877
0.800
0.714

0.834
0.582
0.843
0.695
0.964
0.951
0.845
0.622
0.888
0.816
0.791

0.802
0.637
0.830
0.640
0.923
0.939
0.836
0.598
0.881
0.680
0.735

0.868

0.851

0.802

0.846

0.730

-
-
-

-
-
-

-
-
-

-
-
-

calls
condmat
dblp-cite
dblp-collab
disease-g
disease-p
hepth-cite
hepth-collab
huddle
patents-collab
sms

AA

0.000505
0.000195
0.000314
0.008777
0.221299
0.629516
0.003967
0.008563
0.000790
0.006962
0.009410

Katz

0.011465
0.000183
0.000246
0.006723
0.193863
0.676419
0.003784
0.009328
0.000746
0.005678
0.009164

(a) AUROC

PA

0.000092
0.000177
0.000234
0.003251
0.061694
0.673601
0.003225
0.005060
0.000745
0.001684
0.002986

HPLP

0.018005
0.007763
0.016030
0.007772
0.466716
0.390074
0.054846
0.006123
0.039914
0.006735
0.011594

(b) AUPR

VCP 3U
0.031655
0.011917
0.009207
0.007152
0.155165
0.552765
0.046140
0.007197
0.039394
0.005564
0.025206

-

-
-
-

0.015265

VCP 3D VCP 4U
0.033091
0.033533
0.008589
0.011427
0.009410
0.444153
0.633316
0.056244
0.007156
0.046803
0.007709
0.027073

0.059245

0.026063

-
-
-

VCP 4D
0.035127

-

0.018137

-
-
-

0.063387

-
-
-

0.028201

Table 5: Comparative performance for Adamic/Adar (AA), Katz, preferential attachment (PA), HPLP, and
VCP. For VCP, U indicates that directionality is ignored and D indicates that it is considered.

t

 

e
a
R
e
v
i
t
i
s
o
P
e
u
r
T

 

i

i

n
o
s
c
e
r
P

 1

 0.8

 0.6

 0.4

 0.2

 0

 0

 1

 0.1

 0.01

 0.001

Adamic/Adar
HPLP
VCP4Undirected

 0.2

 0.4

 0.6

 0.8

 1

False Positive Rate

Adamic/Adar
HPLP
VCP4Undirected

t

 

e
a
R
e
v
i
t
i
s
o
P
e
u
r
T

 

i

i

n
o
s
c
e
r
P

 1

 0.8

 0.6

 0.4

 0.2

 0

 0

 1

 0.1

 0.01

 0.001

t

 

e
a
R
e
v
i
t
i
s
o
P
e
u
r
T

 

 1

 0.8

 0.6

 0.4

 0.2

 0

 0

Adamic/Adar
HPLP
VCP4Undirected

 0.2

 0.4

 0.6

 0.8

 1

False Positive Rate

(a) AUROC

Adamic/Adar
HPLP
VCP4Undirected

i

i

n
o
s
c
e
r
P

 1

 0.1

 0.01

 0.001

t

 

e
a
R
e
v
i
t
i
s
o
P
e
u
r
T

 

Adamic/Adar
HPLP
VCP4Undirected

 0.2

 0.4

 0.6

 0.8

 1

False Positive Rate

Adamic/Adar
HPLP
VCP4Undirected

i

i

n
o
s
c
e
r
P

 1

 0.8

 0.6

 0.4

 0.2

 0

 0

 1

 0.1

 0.01

 0.001

Adamic/Adar
HPLP
VCP4Undirected

 0.2

 0.4

 0.6

 0.8

 1

False Positive Rate

Adamic/Adar
HPLP
VCP4Undirected

 0

 0.2

 0.4

 0.6

 0.8

 1

 0

 0.2

 0.4

 0.6

 0.8

 1

 0

 0.2

 0.4

 0.6

 0.8

 1

 0

 0.2

 0.4

 0.6

 0.8

 1

Recall

(i) calls

Recall

(ii) hepth-cite

Recall

(iii) huddle

Recall

(iv) sms

(b) AUPR

Figure 6: ROC and precision-recall curves for selected networks.

WWW 2012 – Session: Social NetworksApril 16–20, 2012, Lyon, France1026)
s
d
n
o
c
e
s
(
 

e
m
T

i

Features
Training
Predicting

 16000

 14000

 12000

 10000

 8000

 6000

 4000

 2000

 0

)
s
d
n
o
c
e
s
(
 

e
m
T

i

Features
Training
Predicting

 600

 500

 400

 300

 200

 100

 0

)
s
d
n
o
c
e
s
(
 

e
m
T

i

Features
Training
Predicting

 1.8e+06

 1.6e+06

 1.4e+06

 1.2e+06

 1e+06

 800000

 600000

 400000

 200000

 0

A
A

K
a
t
z

P
A

H
P
L
P

V
C
P
3
U

 

V
C
P
4
U

 

Task

(a) dblp-collab

A
A

K
a
t
z

P
A

H
P
L
P

V
C
P
3
U

 

V
C
P
4
U

 

Task

(b) disease-g

A
A

K
a
t
z

P
A

H
P
L
P

V
C
P
3
U

 

V
C
P
3
D

 

V
C
P
4
U

 

V
C
P
4
D

 

Task

(c) sms

Figure 7: Timing analysis for three diﬀerent networks. Network size information is available in Table 3.

pect that the exceptions indicate cases in which the classi-
ﬁcation algorithm was either overﬁtting the training set or
failed to create a suﬃciently optimized model in the high-
dimensional space.

In 7 of the 11 networks, VCP classiﬁcation oﬀers supe-
rior AUPR performance. In a slightly diﬀerent selection of
7 networks, it oﬀers superior AUROC performance. In some
of the cases in which VCP oﬀers the best performance, the
diﬀerences are quite wide. In the sms network it oﬀers an
AUPR that is 2.3 times as high as the best competitor. In
the condmat network, it oﬀers AUPR 1.53 times the nearest
competitor. In two of the networks in which VCP classiﬁ-
cation does not provide the best performance, HPLP does.
As an interesting side note, when weights are removed as
they were to obtain these results, HPLP does not always
outperform the unsupervised predictors.

Figure 6 shows a closer look at the performance diﬀer-
ences. The black dashed line represents the baseline perfor-
mance of a random predictor. Across all the selected net-
works, VCP maintains high precision longer at increasing
values of recall. This is especially important in link predic-
tion where high precisions are so diﬃcult to achieve.

Despite the strong and competitive performance that the
VCP method of supervised prediction exhibits, it is not our
intent to present the most eﬀective possible classiﬁcation
scheme. Our experiences with random forests, random sub-
spaces, and other classiﬁcation techniques suggest that the
potential for improvement through feature selection and al-
ternative classiﬁcation algorithms is high. Another option
for potential improvement is to concatenate VCP3,r and
VCP4,r into a single feature vector. VCPs contain much
information, and the task is simply to determine how best
to leverage it to achieve whatever goals are desired.

4.5 Timing

We used two diﬀerent types of machines for timing. All
feature computation and VCP generation was performed se-
rially on a quad-core Opteron 2218 running at 2.6 GHz with
1 MB cache and 4 GB of main memory. Some classiﬁcation
runs required more than 4 GB of memory with the speci-
ﬁed training set undersampling and algorithm parameters,
so all WEKA classiﬁcation was performed on a dual quad-

core Xeon E5620 running at 2.4 GHz with 12 MB cache and
32 GB of main memory. To some degree, timings are imple-
mentation dependent, and though the implementations of
predictors, feature computations, and VCPs are not na¨ıve,
we cannot claim that they are fully optimized. Figure 7
shows the results.

Adamic/Adar, O (cid:16) |E|

|V |(cid:17) per prediction, and preferential
attachment, O(1) per prediction, perform very few opera-
tions to generate their output. They are so inexpensive to
compute that they are invisible within the same scale as
Katz and the supervised prediction methods for all three
networks in Figure 7. We note that for all three networks
the total time to perform supervised link prediction with
VCPs is often less than that necessary for HPLP. Most of
this is due to the expense of the Katz feature, which involves
ﬁnding paths up to length 5 with the aid of memoization in
our implementation. Based on these results, Adamic/Adar
is clearly an eﬀective and inexpensive option for a wide va-
riety of networks, but VCP oﬀers signiﬁcant potential for
performance enhancement.

Perhaps the most interesting conclusion lies in the incon-
sistency of the results in terms of the breakdown of time
requirements for diﬀerent components. Timing is related to
the interplay between the speciﬁc algorithms involved, the
local densities or global density of the graph, and the raw size
of the graph in terms of the number of vertices and edges.
Whether the bulk of time is consumed in feature generation,
VCP computation, training, or testing varies greatly across
networks as does the total time for any particular method.
The VCP implementations provided are slightly limited
in eﬃciency because of the graph implementation to which
they are tied in LPmade. With a more amenable support-
ing graph implementation and slight changes to the selection
of data structures, we expect that it would be possible to
decrease the running time of the VCP vector computation
itself by a factor of at least 2. Nonetheless, the computa-
tion of even VCP4,2 is competitive in terms of running time
with much simpler and less eﬀective path-based prediction
methods.

The results in Figure 7 show that VCP is more eﬃcient
from a cost-performance standpoint than classiﬁcation based
on computing and combining simpler unsupervised predic-

WWW 2012 – Session: Social NetworksApril 16–20, 2012, Lyon, France1027tors. Further, VCP computations are naturally parallel, and
the extended times for the sms network include computing
VCPs for tens of millions of vertex pairs. The extended fea-
ture vector of VCP4,2 greatly increases training time, but
feature selection or the application of diﬀerent training algo-
rithms or parameters could reduce this greatly, and training
is parallelizable across bags.

5. CONCLUSIONS

VCP is a new method of link analysis with solid theoretical
roots. We presented evidence of its utility in some applica-
tions here, but there are many possible applications. It is
useful for post hoc analysis of classiﬁcation output, compar-
ative analysis of network link structure, and it competes ef-
fectively with an existing recently published method, HPLP,
often outperforming it by wide margins. In well-established
networks with past observational data, VCP can serve as a
sensitive change detection mechanism for tracking the evolv-
ing link formation process. In addition to link prediction and
link analysis for the purpose of network growth modeling,
VCP can be used for link or vertex pair clustering. Its abil-
ity to handle multiple relations naturally extends its utility
into many domains and oﬀers an alternative to the practice
of combining or discarding edge types or edge directionality.
The VCP computations for the directed and undirected
variants of both VCP3,1 and VCP4,1 are integrated into the
LPmade link prediction framework. The LPmade branch
containing the software is available at http://mloss.org/
software/view/307/. Most of the data sets are publicly
available elsewhere, but we have also published all pub-
lic data sets to http://nd.edu/~rlichten/vcp so that our
experiments can be repeated with the same longitudinal
thresholds and thus the same network saturation. We have
provided code to perform VCP subgraph-to-element map-
pings at the same location.

6. ACKNOWLEDGMENTS

Research was sponsored in part by the Army Research
Laboratory and was accomplished under Cooperative Agree-
ment Number W911NF-09-2-0053 and in part by the Na-
tional Science Foundation (NSF) under Grant BCS-0826958.
The views and conclusions contained in this document are
those of the authors and should not be interpreted as rep-
resenting the oﬃcial policies, either expressed or implied,
of the Army Research Laboratory or the U.S. Government.
The U.S. Government is authorized to reproduce and dis-
tribute reprints for Government purposes notwithstanding
any copyright notation hereon.

7. REFERENCES
[1] L. Adamic and E. Adar. Friends and neighbors on the

web. Social Networks, 25:211–230, 2001.

[2] A.-L. Barab´asi, H. Jeong, Z. N´eda, E. Ravasz,

A. Schubert, and T. Vicsek. Evolution of the social
network of scientiﬁc collaboration. Physica A,
311(3-4):590–614, 2002.

[3] L. Breiman. Bagging predictors. Machine Learning,

24(2):123–140, 1996.

[4] L. Breiman. Random forests. Machine Learning,

45(1):5–32, 2001.

[5] R. S. Burt. Structural holes: The social structure of

competition. Harvard University Press, 1995.

[6] D. Davis, R. N. Lichtenwalter, and N. V. Chawla.

Multi-relational link prediction in heterogeneous
information networks. In Proc. of the Intl. Conf. on
Adv. in Social Networks Analysis and Mining, 2011.
[7] J. Davis and M. Goadrich. The relationship between
precision-recall and ROC curves. In Proc. of the 23rd
Intl. Conf. on Machine Learning, pages 233–240. 2006.
[8] D. Hand. Measuring classiﬁer performance: a coherent
alternative to the area under the ROC curve. Machine
Learning, 77(1):103–123, 2009.

[9] T. K. Ho. The random subspace method for

constructing decision forests. IEEE Trans. on Pattern
Analysis and Machine Intelligence, 20(8):832–844,
1998.

[10] T. Kailath. The divergence and Bhattacharyya

distance measures in signal selection. IEEE Trans. on
Communications Technology, 15(1):52–60, 1967.

[11] L. Katz. A new status index derived from sociometric

analysis. Psychometrika, 18(1):39–43, 1953.

[12] D. L. Kreher and D. R. Stinson. Combinatorial

Algorithms: Generation, Enumeration, and Search,
chapter 7, pages 253–264. CRC Press, 1 edition, 1999.
[13] D. Liben-Nowell and J. Kleinberg. The link-prediction
problem for social networks. Journal of the American
Society for Information Science and Technology,
58(7):1019–1031, 2007.

[14] R. N. Lichtenwalter and N. V. Chawla. Lpmade: Link

prediction made easy. Journal of Machine Learning
Research, 12:2489–2492, 2011.

[15] R. N. Lichtenwalter, J. T. Lussier, and N. V. Chawla.

New perspectives and methods in link prediction. In
Proc. of the 16th ACM SIGKDD Intl. Conf. on
Knowledge Discovery and Data Mining, pages
243–252, New York, NY, USA, 2010.

[16] A. McGovern, L. Friedland, M. Hay, B. Gallagher,

A. Fast, J. Neville, and D. Jensen. Exploiting
relational structure to understand publication patterns
in high-energy physics. ACM SIGKDD Explorations
Newsletter, 5(2):165–172, 2003.

[17] R. Milo, S. Shen-Orr, S. Itzkovitz, N. Kashtan,

D. Chklovskii, and U. Alon. Network motifs: simple
building blocks of complex networks. Science,
298(5594):824, 2002.

[18] M. E. J. Newman. Clustering and preferential

attachment in growing networks. Physical Review
Letters E, 64, 2001.

[19] N. Prˇzulj. Biological network comparison using

graphlet degree distribution. Bioinformatics,
23(2):177–183, 2007.

[20] T. Raeder, O. Lizardo, D. Hachen, and N. V. Chawla.

Predictors of short-term decay of cell phone contacts
in a large-scale communication network. Social
Networks, 33(4):245–257, 2011.

[21] S. Scellato, A. Noulas, and C. Mascolo. Exploiting
place features in link prediction on location-based
social networks. In Proc. of the ACM SIGKDD Intl.
Conf. on Knowledge Discovery and Data Mining, 2011.

[22] I. H. Witten and E. Frank. Data Mining: Practical

Machine Learning Tools and Techniques. Morgan
Kaufmann, San Francisco, California, USA, second
edition, 2005.

WWW 2012 – Session: Social NetworksApril 16–20, 2012, Lyon, France1028