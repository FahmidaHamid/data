Real-Time Recommendation of Diverse Related Articles

Soﬁane Abbar
QCRI, Doha, Qatar
sabbar@qf.org.qa

Piotr Indyk

MIT, Cambridge, USA
indyk@csail.mit.edu

Sihem Amer-Yahia
CNRS, LIG, France

Sihem.Amer-
Yahia@imag.fr

Sepideh Mahabadi
MIT, Cambridge, USA
mahabadi@mit.edu

ABSTRACT
News articles typically drive a lot of traﬃc in the form
of comments posted by users on a news site. Such user-
generated content tends to carry additional information such
as entities and sentiment. In general, when articles are rec-
ommended to users, only popularity (e.g., most shared and
most commented), recency, and sometimes (manual) editors’
picks (based on daily hot topics), are considered. We formal-
ize a novel recommendation problem where the goal is to ﬁnd
the closest most diverse articles to the one the user is cur-
rently browsing. Our diversity measure incorporates entities
and sentiment extracted from comments. Given the real-
time nature of our recommendations, we explore the appli-
cability of nearest neighbor algorithms to solve the problem.
Our user study on real opinion articles from aljazeera.net
and reuters.com validates the use of entities and sentiment
extracted from articles and their comments to achieve news
diversity when compared to content-based diversity. Finally,
our performance experiments show the real-time feasibility
of our solution.

Categories and Subject Descriptors
H.3.3 [Information Search and Retrieval]: Selection
process

General Terms
Algorithms, Design, Experimentation

Keywords
Diversity, Recommender System, Social Media

1.

INTRODUCTION

People are more inclined than ever to express their opinion
online and news articles are typical pieces that drive traﬃc
in the form of comments posted by users on news sites. Such
comments contain rich information such as entities (e.g.,
Person, Organization), and often express an agreeing or dis-
agreeing opinion on the content of the article. Yet, the most
common dimensions used to recommend articles to users

Copyright is held by the International World Wide Web Conference
Committee (IW3C2). IW3C2 reserves the right to provide a hyperlink
to the author’s site if the Material is used in electronic media.
WWW 2013, May 13–17, 2013, Rio de Janeiro, Brazil.
ACM 978-1-4503-2035-1/13/05.

are popularity (e.g., most shared and most commented), re-
cency, and (manual) editors’ picks (based on daily hot top-
ics). We propose to account for users’ comments in choos-
ing articles to recommend. While recommended restaurants
or products are ones that received mostly positive reviews,
news articles that drive most traﬃc may be ones that are
most diverse in the sentiment or entities expressed in their
comments. We propose to explore the eﬀect of sentiment
and entities mentioned in comments on news diversity.

We are interested in a common scenario in which a user
is reading a news article and related articles are recom-
mended on-the-ﬂy. Such recommendations are typically cho-
sen based on overlap in content with the current article, re-
cency, user activity (such as emailing and commenting) and
on that day’s editor’s picks. Figures 1, 2 and 3 show screen-
shots of related articles on popular news sites, Al Jazeera
English, CNN, and the BBC, respectively. As it can be seen
on the examples, a variety of tabs that reﬂect diﬀerent se-
mantics such as “Most Viewed” and “Most Watched” enable
the exploration of articles related to the one currently being
browsed. Our discussions with Al Jazeera editors and jour-
nalists led to the conclusion that none of the existing news
sites uses the content of users’ comments to select the set of
related articles to recommend. We conjecture that the use
of sentiment and entities expressed in comments will enable
a good diversiﬁcation of recommended articles. We use that
as a basis to deﬁne a novel news recommendation problem
that relies on achieving a balance between relevance and di-
versity. Relevance is computed with respect to an article
currently browsed by the user. Diversity is based on a pair-
wise distance between articles according to user-generated
content in the form of entities and sentiment contained in
comments. To the best of our knowledge, our work is the
ﬁrst formalization of the problem of real-time recommenda-
tion of diverse news articles that accounts for relevance to
an input article and for users’ comments to achieve diversity
between recommended articles.
Given a set of articles Ra that are relevant to an input
article a, we would like to identify a subset Sa ⊆ Ra of
size k such that the audience’s comments for the collection
of articles Sa are most attractive among all possible subsets
of Ra of size k. We capture diﬀerent ways of expressing
news attractiveness by incorporating entities and sentiment
in a pairwise distance between articles. Our problem then
becomes ﬁnding candidate articles that are within a rele-
vance distance r from a given article a and among those,

1Figure 1: What’s Hot on Al
Jazeera English

Figure 2: Editor’s Picks on CNN

Figure 3: News Popularity on
the BBC

identifying the k most diverse articles according to a diver-
sity measure that captures coverage of diﬀerent entities or
user sentiment in comments associated to recommended ar-
ticles. Section 2 contains our formalism, the diﬀerent diver-
sity functions that we propose to explore, a deﬁnition of our
problem and a study of its complexity.

Given the real-time nature of our recommendations and
the high complexity of our problem [1], we propose to adapt
Locality Sensitive Hashing (LSH) techniques [11] to ﬁnd can-
didate nearest neighbors of an input article a. LSH pre-
computes buckets of similar articles based on pre-deﬁned
hash functions. Diversity is achieved in a second stage by
looking for a subset of k articles among related ones that
maximizes a diversity distance. This problem refers to the
dispersion problem under MAX-MIN criterion known to be
NP-hard [13]. Hence, we adopt Ravi et al. algorithm [13]
similar to Ganzalez’s algorithm [10] that achieves a perfor-
mance guarantee of 2, i.e., returns a set of k articles that 2-
approximately maximize overall diversity. Obtaining a per-
formance guarantee less than 2 is proven to be NP-hard [10,
13]. We refer to the resulting algorithm as dLSH.

∗

∗

∗

In applications with a large number of similar articles,
the size of precomputed buckets will be large and will aﬀect
the performance of ﬁnding candidate articles in dLSH. To
overcome this problem, we develop dLSH
, an algorithm
that pushes diversity into building buckets. The intuition
behind dLSH
is to reduce the size of candidate articles
by precomputing only potentially interesting articles. For
each bucket, it precomputes and stores at most k articles
that (d-approximately) maximize the diversity of the bucket.
retrieves at most L× k articles where L is the num-
dLSH
ber of buckets thereby reducing the complexity of dLSH.
Section 3 contains a detailed description of our algorithms.
Our user study on real opinion articles on Al Jazeera En-
glish and on articles from Reuters compared the use of en-
tities and sentiment contained in users’ comments for di-
versifying recommended articles to diversiﬁcation based on
articles’ content and showed the superiority of users’ com-
ments. Our performance experiments show the superior-
ity of our algorithms when compared to naive ones without
compromising precision. In particular, in many cases, push-
ing diversity into LSH buckets (dLSH
) results in better
diversity and execution time improvement with a small rel-
evance loss. Section 4 provides a detailed summary of our

∗

experiments. Finally, related work is given in Section 5, and
conclusion and future work in Section 6.

2. DATA MODEL AND PROBLEM
We deﬁne a set A of articles and a set U of users. Each
article a ∈ A has a unique identiﬁer aid and a set of users
aU ⊆ U who posted comments on a. A comment is of
the form [aid, uid, text] where uid is a unique user identi-
ﬁer. Without loss of generality, we assume a user posts at
most one comment per article. The set of all comments on
an article a form a discussion denoted by discuss(a).

A news article a could also be characterized by a set of
attributes such as topic, date, authors, length, and nature
(e.g., opinion article, survey). Similarly, a user u could carry
demographics information such as geographic location, gen-
der, age and occupation.
2.1 Pairwise Relevance and Diversity

We are interested in two kinds of distances between ar-
ticles. Relevance distance determines dissimilarity between
two articles, an input article a and an article in A, and is
used to ﬁnd a set of articles related to a. Diversity distance,
on the other hand, determines how ”diﬀerent” two articles
are. In this section, we start with a deﬁnition of pairwise
relevance, then we deﬁne ﬁve diﬀerent distances to measure
diversity between two articles. The four former diversities
rely on user comments on articles. The latter is deﬁned on
articles’ content and will serve as a basis for comparison to
assess the eﬀectiveness of using comments to achieve diver-
sity between retrieved articles (see Section 4.5).

2.1.1 Pairwise Relevance
Given an article a and a threshold radius r, the set of ar-
ticles relevant to a is deﬁned as the set of all articles ai ∈ A
i.e., drel(ai, a) ≤ r.
within relevance distance r from a,
For example, the distance between two articles (represented
by their sets of features x and y) could be deﬁned as
drel(ai, a) = 1− Jaccard(x, y). Jaccard coeﬃcient measures
the similarity between two sets as the size of the intersection
divided by the size of the union of the sets. In this paper,
features are extracted by running Open Calais(OC) 1 on an
article and extracting entities mentioned in them. There-

1 http://www.opencalais.com

2fore,
drel(ai, a) = 1 − Jaccard(OC(ai), OC(a)).

2.1.2 Pairwise Comment-based Diversity

We deﬁne diversity between two articles ai and aj as a
function of discussions engaged by users through their com-
ments on those articles.

features:

Using Entities: For each article a, we characterize
its discussion, discuss(a), with a set of
top-
ics (e.g., Politics, Sport, etc.) and named entities (Per-
sons, Countries, Cities) to which it refers. Recall that
discuss(a) is a unique document containing the set of
all comments posted on a. Features are extracted by
running Open Calais(OC) on discuss(a).
The pair-
wise diversity distance between two articles is deﬁned
as the Jaccard ratio between feature sets extracted from
i.e., ddiv(ai, aj ) = 1 −
their corresponding discussions,
Jaccard(OC(discuss(ai)), OC(discuss(aj ))).

The intuition behind this distance is that news readers
are more likely to reveal and amplify subtle diﬀerences (e.g.,
journalist’s leaning toward a given topic) between two sim-
ilar articles (e.g. same topic, same persons, etc.) than any
content-based diversiﬁcation technique will do.

Using Sentiment: Diversity between two articles ai and
aj is a function of sentiment extracted from their comments.
Given an article a, each comment ci ∈ discuss(a) is as-
signed a sentiment value si ∈ [−1, 1] which states whether
the comment expresses a negative (si < 0), positive (si > 0),
or neutral (si = 0) opinion. A typical method for extract-
ing sentiment from text is to use a dictionary of positive
and negative words and count the number of occurrences of
those words in the text. Such dictionaries (e.g., UPitt 2,
SentiStrengh 3) and sentiment extraction implementations
based on them [4], are widely available. Each article a is as-
signed a unique sentiment score obtained by averaging the
scores si of all comments ci ∈ discuss(a). Diversity between
two articles is given by: ddiv(ai, aj) = |sai − saj|.
Another option to use sentiment for diversity would be to
−
compute two sentiment scores (s+
a ) for each article a.
−
s+
a (resp. s
a ) is the percentage of positive (resp. negative)
comments posted on a. Here, diversity between ai and aj
could be deﬁned as the Euclidean distance over their senti-
(cid:2)
ment coordinates
ddiv(ai, aj ) =

ai − s+
(s+

aj )2 + (s

a , s

ai − s
−

−
aj )2.

The intuition is that two articles are diverse if they drive
diﬀerent users’ sentiments. In other words, the more polar-
ized two articles are, the more diverse they are considered.
Using user IDs: Each article a is assigned a set of user
identiﬁers user IDs(a) who posted at least one comment on
a. Every user is considered only once even if she posted more
than one comment. Diversity between two articles ai and aj
is a function of the overlap in users commenting on them, i.e.
ddiv(ai, aj ) = 1 − Jaccard(user IDs(ai), users IDs(aj)).
The intuition here is that similar users tend to read sim-
ilar articles. Indeed, the similarity of two articles read by
exactly the same group of users is likely to be higher than
the similarty of articles that interest diﬀerent users.

Using user locations: Each article a is assigned a
set of Countries user countries(a) extracted from the pro-
ﬁles of users in user IDs(a). Every country is considered

2http://mpqa.cs.pitt.edu/#subj lexicon
3http://sentistrength.wlv.ac.uk/

only once even if many users from that country posted
a comment on a. Diversity between two articles ai and
aj is a function of the overlap in countries from where
comments are issued on both of them, i.e. ddiv(ai, aj) =
1 − Jaccard(user countries(ai), users countries(aj)).
The intuition here is that articles that interest users from
the same region of the world are more likely to be similar
than articles that interest users from diﬀerent regions.

2.1.3 Pairwise Content-based Diversity

Here, we deﬁne the diversity between two articles ai and
aj as a function of entities extracted from their content. This
deﬁnition will serve as a basis in our experiments to assess
the eﬀectiveness of comment-based diversity in ﬁnding at-
tractive articles. In particular, each article a is assigned a set
of features (topics, persons, and locations) extracted from its
content using Open Calais. Diversity between two articles ai
and aj is a function of the overlap in features cited in both
of them, i.e. ddiv(ai, aj) = 1 − Jaccard(OC(ai), OC(aj )).
Thus, two news articles on US election may be similar be-
cause they refer to the same topic (Politics) and location
(USA), but still diﬀerent (diverse) if one is about Mitt Rom-
ney and the other on Barack Obama.
2.2 Set-based Relevance and Diversity

The relevance Rel(R) of a set of articles R with respect

to an input article a is deﬁned as

Avgai∈R(1 − drel(ai, a))

Set diversity answers the following question: given a set R, if
we were to pick a set S ⊆ R containing the k ”most distinct”
(as measured by the diversity distance) articles, how distinct
those articles would be?

The pairwise k-diversity divk(R) of a set R is deﬁned as

max

S⊂R,|S|=k

min
ai,aj∈S

ddiv(ai, aj )

In above formulation, diversity is deﬁned as the maximum
over any set of size k, of the minimum pairwise distance
between articles. Here, ai plays the role of the ”aggregate”
or ”centroid”, and diversity measures the minimum distance
to the centroid.
2.3 Problem and Complexity

Our goal is to return a set Sa of k most diverse articles
among a set Ra formed by articles whose relevance distance
to an input article a is at most r. That is, for a distance r and
given a point a, we would like to ﬁnd a set of k points within
distance r from a (according to the relevance distance) that
maximizes their pairwise k-diversity (according to the diver-
sity distance). Given the complexity of this problem [1], we
deﬁne an approximate version where the goal is to ﬁnd a set
of k points that d-approximates their pairwise k-diversity
(i.e., the k-diversity is at least 1/d times the best possible).
Finally, we can deﬁne the bi-criterion approximate version
of the problem, where for approximation factors c and d, our
goal is to ﬁnd a set of k points S within distance cr from a
such that divk(S) ≥ 1/d · divk(Ra), where Ra is the set of
points within distance r from a.

A simple way of solving this problem (for c = 1 and d = 2)
would be to (i) ﬁnd the set Ra of all points within relevance
distance r from a, and (ii) 2−approximate divk(Ra). The
former task can be done using LSH algorithm in O(ne) time

3for some exponent e ≺ 1[11], while the latter task can be
done using e.g., the 2-approximate GMM algorithm [10] in
O(|Ra|k) time. A nice feature of the latter algorithm is
that it works for any diversity distance function satisfying
metric properties (i.e., symmetry and triangle inequality).
Our ﬁrst solution is to implement and combine such above
algorithms into a single algorithm we call dLSH and that
runs in O(ne + |Ra|k) time. As, the O(ne + |Ra|k) time
can be too large in some applications. we present another
algorithm (dLSH∗) to improve the time to O(L2), where L
is the number of locality-sensitive hash functions needed to
return all points within distance (approximately) r from a.
Typically, we have L << n.

3. ALGORITHMS

Our approach has two steps:

i. identify the set Ra of
candidate articles which are within a relevance distance r
from an input article a, and ii. ﬁnd among Ra the subset
Sa of articles that maximizes diversity. We propose two al-
gorithms dLSH and dLSH
. dLSH is a direct application
of Locality-Sensitive Hashing (LSH) [11] on top of which
we implemented a greedy algorithm to solve the maximiza-
∗
tion of minimum pairwise distances problem.
,
we pushed diversity into LSH by precomputing the k most
diverse elements of each LSH bucket. This makes the algo-
rithm faster than dLSH. Furthermore, we show in [1] that
dLSH
3.1 dLSH: Diversity-aware LSH Algorithm

achieves a 6-approximation of dLSH.

∗

∗

In dLSH

We start with an overview of the LSH algorithm [11].
Essentially, the algorithm attempts to ﬁnd all candidate ar-
ticles composing Ra. This is done as follows: during an
oﬄine process, LSH creates l hash functions g1 . . . gl, and
their corresponding hash tables A1 . . . Al. Each function gi is
a combination of k hash functions hj (i.e., gi = h1. . . . hk.)
Then each article a is stored in bucket gi(a) of Ai for all
i = 1 . . . L (lines 1-4, Algorithm 1). The hash functions
have the property that, for any article a, we have

Ra ⊂ A1(g1(a)) ∪ . . . ∪ Al(g1(a))

It should be noted that functions with the above property
(for low values of k and l) are known to exist only for speciﬁc
relevance distance functions, such as the Euclidean distance
and dot product (see [5] for more details).
At runtime, for any input article a, LSH simply recovers
all points in A1(g1(a)) ∪ . . . Al(gl(a)) (lines 1-3, Algorithm
3), and retains those that belong to Ra (lines 4-7).

Algorithm 1 dLSH: oﬄine process
Input: G = {g1, . . . , gL}: set of L hashing functions, D:
s: size of precomputed diverse

collection of articles.
buckets.
Output: A = {A1, . . . , AL}: set of L hash arrays.
1: Ra ← ∅
2: for all a ∈ D do
3:
4:
5: return A

Ai[gi(a)] ← Ai[gi(a)] ∪ {a}

for all gi ∈ G do

As pointed in Section 2, relevance distance between two
articles ai and aj both characterized by a set of features

is deﬁned as: drel(ai, aj) = 1 − Jaccard(OC(ai), OC(aj )).
An eﬃcient way to estimate the Jaccard coeﬃcient is to
use min-hash functions based on min-wise independent per-
mutations. A min-hash function hπ ∈ H could be de-
ﬁned as follows: Let OC(ai) be the set of features (top-
ics, persons, and locations) extracted from article ai, E =
OC(a1)∪ . . . OC(an) the union of sets of features of all arti-
cles, SE the set of all permutations of E, and π a permutation
uniformly chosen at random over SE .

hπ(a) = M in{π(xi),∀xi ∈ OC(a)}

Where π(xi) is the index of the entity xi within permutation
π. Such min-hash functions guarantee the following property
[7]:

P r(hπ(ai) = hπ(aj)) = Jaccard(N E(ai), N E(aj))

Based on H , we deﬁne each hash function gj as a com-

position of K min-hash functions hπi,

gj(a) = [hπ1(a) × hπ2(a) ··· × hπk(a)] %Φ

where Φ is a predeﬁned prime.

Enabling Diversity: Greedy Max-Min Algorithm.

To enable diversity we need an algorithm that identiﬁes a
subset of k most diverse articles among a set of n articles.
According to our deﬁnition in Section 2.2, given a set S of
n articles, and a diversity distance ddiv, the most diverse
subset of k articles is the one that maximizes the minimum
pairwise (diversity) distance. This problem refers to the
dispersion problem under MAX-MIN criterion known to be
NP-hard [13]. To solve this problem, we adopted the greedy
algorithm proposed by Ravi et al. [13] similar to Ganzalez’s
algorithm [10] that achieves a performance guarantee of 2
in the case of distances satisfying the triangular inequality.
Note that obtaining a performance guarantee less than 2 is
proven to be NP-hard [10, 13].

Algorithm 2 GMM: Greedy MaxMin algorithm
Input: D: set of articles, ddiv: distance function, k: num-

ber of requested articles

ddiv(c, d)

mizes the min pairwise distance

Output: C: set of k articles which x-approximately maxi-
1: C ← ∅
2: ﬁnd {a, b}|(a, b) ∈ D2 ∧ ∀(c, d) (cid:14)= (a, b), ddiv(a, b) ≥
3: C ← C ∪ {a, b}
4: repeat
5:

ﬁnd e|e ∈ D − C ∧ ∀f ∈ D − C, minx∈C{d(e, x)} ≥
miny∈C{d(f, y)}
C ← C ∪ {e}
6:
7: until |C| = k
8: return C

Algorithm 2 optimizes for the maximal minimum pairwise
distance. It starts by adding to the result set the two articles
with the maximum pairwise distance (lines 2-3, Algorithm
2). Then, it adds at each iteration the article which maxi-
mizes the minimum pairwise distance with articles already
selected (lines 4-6). The algorithm stops when the number
of articles in the result set is k (line 7).

4Online recommendation.

Algorithm 3 describes the way diverse recommendations
of related articles are processed. Given an input article a,
a distance radius r, and hash tables {A1, . . . AL} created in
the oﬄine step; the algorithm does the following: First, it
retrieves all candidate articles that are hashed into the same
buckets as a (lines 1-3). Second, it ﬁlters those articles that
are out of the ball B(a, r) (lines 4-6). Finally, the algorithm
runs GMM to pick the d-approximately k most diverse arti-
cles (lines 7-8).

Algorithm 3 dLSH: online process
Input: G = {g1, . . . , gL}: set of L hashing functions, A =
{A1, . . . , AL}: set of L hash arrays, D: collection of
articles, a:
input article, r: radius distance, k:number
of requested articles.

within a distance r from a.

Output: Sa: set of d-approximately k most diverse articles
1: Ra ← ∅
2: for all gi ∈ G do
3: Ra ← Ra ∪ Ai(gi(a)) {retrieve all candidate answers}
4: for all pj ∈ Ra do
5:
6:
7: Sa ← GM M (Ra, k)
8: return Sa

Ra ← Ra − {pj} {Remove irrelevant answers from
result set}

if disdiv(a, pj) (cid:15) r then

∗

∗

∗: Pushing diversity into LSH buckets
3.2 dLSH
As pointed earlier, the main drawback of dLSH is that
in several cases the O(n + |Ra| k) time complexity is too
high, especially in applications where the data distribution
results in many dense buckets. To overcome this problem,
we present dLSH
, an algorithm that considers diversity
earlier in the recommendation process. The intuition be-
hind dLSH
is to reduce the size of Ra by storing only po-
tentially interesting articles in hash tables A1, . . . AL. Sup-
pose that we request k articles that d-approximately max-
imize the diversity of Ra. For each bucket Ai[j], we pre-
(cid:5)
compute and store the set A
i[j] of at most k articles that
(d-approximately) maximize the diversity of Ai[j]. This is
done by using GMM algorithm during the oﬄine process
of dLSH
(lines 5-7, algorithm 4). The online process of
is similar to the one of dLSH (see Algorithm 3)
dLSH
retrieves at most L × k articles stored
except that dLSH
(cid:5)
in buckets A
i(gi(a)), i = 1 . . . L. Here again, GMM is used
to ﬁnd the d-approximately k most diverse articles among
those L × k article. By doing so, the complexity in time
drops to O(Lk), where L is the number of locality-sensitive
hash functions and k is the number of desired articles.

∗

∗

∗

4. EVALUATIONS

We conducted diﬀerent experiments to assess the eﬃ-

ciency and eﬀectiveness of our proposals.

Implementation setup Our algorithms are imple-
mented in JDK 6 with 2GB virtual memory. All experiments
were conducted on an Intel dual core workstation with 4GB
Memory, running Windows 7 OS (64-bit). Obtained results
are the average of three separate runs.

∗

Algorithm 4 dLSH
Input: G = {g1, . . . , gL}: set of L hashing functions, D:
s: size of precomputed diverse

: oﬄine process

collection of articles.
buckets.
Output: A = {A1, . . . , AL}: set of L hash arrays.
1: Ra ← ∅
2: for all a ∈ D do
for all gi ∈ G do
3:
4:
5: for all Ai ∈ A do
6:
7:
8: return A

Ai[gi(a)] ← Ai[gi(a)] ∪ {a}

Ai[j] ← GM M (Ai[j], s)

for j = 0; j < size(Ai); j + + do

Datasets We conducted our experiments on two diﬀerent
datasets: a collection of AlJazeera English (AJE) opinion
articles and a collection of Reuters news articles.

• AJE opinion articles4 This dataset contains 2040 ar-
ticles published between April 24th, 2010 and February
07th, 2012. Each article comes with a set of comments
(389k in total) posted by 35k diﬀerent users from 179
diﬀerent countries. We characterized each article by its
features (topics, persons, and locations) extracted us-
ing Open Calais. On average, each article had around
7.5 diﬀerent features distributed as follows: 1.42 top-
ics, 2.58 cited persons, and 3.5 cited locations.

• Reuters news articles5 We crawled 13K news arti-
cles published by Reuters between December 4th, 2010
and December 20th, 2011. We ran Open Calais 6 to
identify article features. For each article, we identi-
ﬁed an average of 5.19 features with 1.6 topics, 1.85
cited persons, and 1.74 cited locations. Note that user
comments are not available for Reuters articles.

4.1 Our Baselines

We introduce in this section three algorithms that we im-
plemented and used in the experiments to evaluate diﬀerent
aspects of our diversiﬁcation proposals.

Exact Near Neighbors Algorithm Referred to as
r N N is an algorithm that given an input article a and
a distance radius r, scans the whole data collection and
retrieves all those articles within a distance r from a.

Approximate k Nearest Neighbor Algorithm
Referred to as k N N is an algorithm that given an input
article a and a list of candidate relevant articles Ra (gen-
erated by LSH), ranks articles in Ra according to their
relevance to a and picks the top k among them. This
algorithm is approximate because in relies of Ra rather
than the whole data collection.

MMR Algorithm M M R is an iterative algorithm that
strives to reduce redundancy while maintaining relevance
of retrieved articles[8]. M M R is based on the concept of
Marginal Relevance (MR) that is a linear combination of
the relevance of an articles wrt an input one and its novelty
wrt already selected ones. The MR score of article ai w.r.t.

4http://www.aljazeera.com/indepth/opinion/
5http://www.reuters.com
6 http://www.opencalais.com

5an input article a and a set of articles already selected S is
given by:
M R(ai) = λ × sim(ai, a) − (1 − λ) × maxaj∈Ssim(ai, aj)
Then, at each iteration, the algorithm picks the article not
yet selected whose MR score is maximal.
4.2 Results Summary

Our ﬁrst experiment (Section 4.3) showed that dLSH ex-
hibits a strong performance in terms of execution time com-
pared to a brute force r N N. dLSH is 22 times faster in
nearest neighbor retrieval and 30.38 times faster in recom-
mending diverse related articles compared to MMR. This
result makes our approach suitable for a real-time recom-
mendation scenario. Second, exploiting user-generated data,
comments in our case, to diversify articles leads to a good
balance between relevance and diversity (Section 4.4). The
comparison result of dLSH and MMR strengthens this ob-
servation as it shows clearly that dLSH preserves relevance
while providing an acceptable diversiﬁcation compared to
MMR. Moreover, we found that the diversity gain induced
by dLSH when compared to k N N, is much more impor-
tant than relevance loss especially in the case of low values of
r. For instance, dLSH@r = 0.5 under sentiment-based di-
versiﬁcation increases recommendation diversity by 37.46%
while average relevance drops down by only 5% compared to
the TopK lists. Finally, the user study (Section 4.5) revealed
that users prefer sentiment-based diversity.
4.3 Nearest Neighbors Retrieval

We ran both LSH and an exact brute-force algorithm,
r N N, to request the set of nearest neighbor articles, Ra,
that are within a relevance distance r of an input article
a where a is instantiated to every article in the AJE and
In each run, the relevance distance r
Reuters collections.
took each of these values: {0, 0.2, 0.4, 0.6, 0.8}.

For each input article a, r N N accesses all articles in the
corresponding collection and retrieves those within distance
r from a. For LSH, the parameters are set as follows: L = 1,
K = 2, and Φ = 307 (i.e. g(p) = hπ1(p) · hπ2(p)%307). So,
for each article a, the algorithm ﬁrst retrieves all articles
stored in the bucket (A [g(a)]), then it ﬁlters articles out of
the ball (Ra).

Figure 4: exact r N N vs. LSH @r

In Figure 4, we show the evolution of the average execu-
tion time per 1000 input articles in both Reuters (left-hand
side) and AJE (right-hand side). Not surprisingly, LSH
is much faster than r N N. On average, LSH is 4.5 times
faster for Reuters, 22.5 times faster for AJE. This gain is
relatively stable for all values of r. The diﬀerence in gain
achieved in the two collections is due to the distribution of
articles in the distance space. By analyzing the two collec-
tions, we observed that AJE articles are scattered whereas

Reuters has many dense regions representing similar arti-
cles. The presence of dense regions in Reuters is reﬂected
by the generation of a small number of LSH buckets each of
which with a high ﬁlling rate. In contrast, in the sparse AJE
collection, LSH generates a large number of buckets with
a very low ﬁlling rate. From this observation, it becomes
obvious that Reuters requires more processing (to ﬁlter out
irrelevant articles) than AJE.

However, as expected, Table 1 shows that the gain in ex-
ecution time aﬀects recall.
In fact, by considering the set
of articles returned by r N N as our ground truth, we com-
puted recall@r for each collection as the ratio between the
number of articles returned by LSH and the number of ar-
ticles returned by r N N. For instance, Table 1 shows that
for r = 0, LSH returns the same results as r N N for both
collections. For this speciﬁc value of r, we observed an av-
erage of 0.28 nearest neighbor articles for each AJE article
and 38.3 nearest neighbors for each article in the Reuters
collection. We can also see that the recall curves are dras-
tically decreasing as r increases. This is due to the oﬄine
process in LSH during which only articles with relatively
highly similarity are hashed into the same bucket. For ex-
ample, when we request the set of nearest neighbors within
a distance r = 0.4, only 30% of them are returned by LSH
in both collections. To improve the recall score, one can
reduce K and increase L hence creating simpler hash func-
tions. However, for the data collection sizes we have, this
will result in a signiﬁcant increase in time necessary to ﬁlter
out irrelevant articles.

Table 1: LSH recall@r

Dataset/ r

AJE

Reuters

0.0
1.0
1.0

0.2
0.63
0.78

0.4
0.31
0.30

0.6
0.17
0.27

0.8
0.09
0.25

4.4 Diversiﬁcation Techniques

We evaluate the eﬃciency and eﬀectiveness of dLSH
algorithms. As we did not have access to user

and dLSH
comments on Reuters, we used AJE only.

∗

Evaluation Method

∗

For each input article a, we identify the set of candidate
related articles Ra using dLSH or dLSH
. The radius r
takes one of these values: 0.5, 0.6, 0.7, and 0.8. For each set
of candidate answers we compute two sets divK and topK.
The former is the set of k articles that d-approximately
maximizes diversity generated by dLSH whereas the latter
is the set of k most relevant articles within Ra generated
using an k N N algorithm (both deﬁned in section 2.2.)
Basically, the approximate k N N algorithm accesses all
articles in Ra, ranks them in terms of their relevance to a,
and returns the top K among them. Here also, we varied
k to take diﬀerent values ranging from 3 to 20 for both
divK and topK. For each set (divK and topK), we report
its diversity and average relevance scores obtained in both
dLSH and/or dLSH
. Thus, we can estimate the loss
of relevance implied by each diversiﬁcation technique as
∗
well as the impact of pre-computing divK of each dLSH
bucket. In what follows, we ﬁrst report the results of dLSH
in terms of relevance and diversity of recommendations
∗
compared to k N N. Then, we report the impact of dLSH
on results obtained by dLSH.

∗

6we argue that it is preferable to substitute users to their
locations (extracted from ip addresses) as the average num-
ber of locations per article is much smaller than the number
of users who commented on that article, hence improving
execution time. Finally, there is no obvious relationship be-
tween the radius r and the diversity gain achieved by the
diﬀerent techniques. For instance, one would expect that di-
versity scores increase as the value of r increases. That is not
the case here because the diversity of divK sets is optimized
using one of the diversiﬁcation techniques we proposed (us-
ing entities, sentiments, user ids, or locations) whereas diver-
sity scores reported in Table 2 reﬂects the content diversity
of divK sets.

Comparing dLSH to approximate k N N

An important issue of diversiﬁcation in general, is to con-
trol the loss in relevance implied by diversiﬁcation. We now
show that dLSH leads to a substantial increase in diver-
sity of divK sets while maintaining a reasonable relevance
compared to topK sets (Table 2). As diversity is measured
using diﬀerent distances in diﬀerent spaces (entities, senti-
ments, users, and locations), scores are not comparable. For
instance, the same set divK of k articles may get a high di-
versity score in the space of user’s locations and a low score
in the space of sentiments.

In order to enable the comparison of diﬀerent diversiﬁca-
tion techniques, we consider content-based diversity as the
ground truth. For every input article a, we retrieve its cor-
responding divK sets using entities, sentiments, users, and
locations for diversiﬁcation. Then, for every divK set, we
report its actual diversity score measured in terms of articles
content (as deﬁned in Section 2.1.3.) This allow us to check
if there is any correlation between the diversity of articles
obtained in diﬀerent comment spaces and the diversity of
articles in the content space. More speciﬁcally, we check
whether a set of articles diverse in terms of sentiments, en-
tities, users, or user’s locations is also diverse in term of
articles’ content (less redundancy and more novelty).

Table 2 reports the gain/loss

in diversity/relevance
achieved by dLSH compared to approximate k N N. For
every radius value r, we report the average of scores ob-
tained at diﬀerent values of k ∈ {3, 5, 10, 15, 20}.

Table 2: dLSH vs. r N N: Percentage of Gain/Loss in
Diversity/Relevance @r

  
Radius 
0.5 
0.6 
0.7 
0.8 

Entity-based 
rel. 
div. 
-6.37 
24.05 
-5.38 
6.63 
-8.8 
15.63 
19.64 
-20.79 

div. 
37.46 
13.04 
8.83 
18.29 

Sentiment-based  UserID-based 
rel. 
-3.84 
-4.42 
-7.88 
-19.44 

rel. 
-5.07 
-4.73 
-8.47 
-20.33 

div. 
31.08 
10.26 
11.95 
7.99 

geoLocation-based 

div. 
29.14 
9.92 
11.54 
7.99 

rel. 
-3.87 
-4.34 
-7.87 
-19.5 

Not surprisingly, we notice that all diversiﬁcation tech-
niques achieve a positive gain in diversity of divK sets com-
pared to topK sets returned by r N N algorithm. This
means that there is a clear correlation between comment
diversity as acquired through entities, sentiments, users, or
locations from one side and content diversity from another.
To conﬁrm this observation, we note that maximizing the
diversity with any of the techniques we proposed results in
dropping the average relevance of divK sets compared to
topK sets. Also, it seems that the best compromise between
diversity and relevance is achieved in the case of r = 0.5
where the gain in diversity is maximized in all cases (entities,
sentiments, users, and locations) while the loss in relevance
is minimized in almost all cases.

There are several observations to be made regarding the
pairwise comparison of the four diversiﬁcation techniques.
First, The sentiment-based approach outperforms other ap-
proaches as it implies 19.4% of diversity gain and -9.6% of
relevance loss in average. This conﬁrms the existance of
a strong correlation between content diversity and opinion
(sentiment) diversity, i.e., two diverse articles are more likely
to generate diﬀerent sentiment values than two similar ar-
ticles. Second, userID-based and geoLocation-based diver-
siﬁcation techniques achieve almost the same results. This
observation is conﬁrmed in Figure 5 where one can see that
these two techniques lead to almost the same curves. Thus,

Figure 5: Diversity of diﬀerent diversiﬁcation techniques

Figure 5 summarizes results presented in the last line
(r = 0.8) of Table 2 breakdown by value of k. Black (resp.
grey) curves correspond to divK (resp.
topK) while con-
tinuous (resp. dashed) line curves correspond to diversity
(resp. relevance). From this ﬁgure we observe the following.
First, in all diversiﬁcation techniques and for all values of
k, dLSH achieves a real content diversity compared to ap-
proximate k N N. The diversity achieved is more important
when using entities (A) and sentiments (B) than in the two
remaining cases (C and D). Second, the average relevance
of divK sets is not aﬀected by the number of requested ar-
ticles (k). This unexpected behavior is due to the oﬄine
step of dLSH algorithm where only relatively highly sim-
ilar articles are hashed into the same bucket. That is, for
a given bucket Ai[j] whose size is m, and any two diﬀer-
ent numbers K1, K2 such that K1 ≤ m, K2 ≤ m we have
relevance(divK1) ≈ relevance(divK2). Note that this ob-
servation holds for topK sets as well. This further corrobo-
rates our conclusion made in Nearest Neighbor retrieval ex-
periment (section 4.3) related to the recall scores achieved
by LSH
Comparing dLSH to MMR
In the previous experiments, we investigated the impact of
dLSH on the relevance and diversity of recommendation
compared to T opk approach. We have shown that in most
of cases, dLSH implies a signiﬁcant gain in diversity against
a relatively small loss in relevance. In order to have a com-

7plete picture on dLSH, we compared it to a well-known di-
versiﬁcation approach called Maximal Marginal Relevance
(MMR) [8] (see section 4.1).

The evaluation process may be summarized as follows. For
each input article, we requested diﬀerent lists of divK arti-
cles using dLSH and M M R. All parameters (K, r, and λ)
are varied to capture the diﬀerent trends of each algorithm.
In the case of dLSH, we reported the results of the four
diversity distances proposed. Figure 6 summarizes the re-
sults of comparing dLSH to MMR in terms of execution time
(ﬁgs.6(a), and (b)), relevance (ﬁgs.6(c),(c’),(e), and (g)), and
diversity (ﬁgs.6(d), (d’), (f), and (h)).

In ﬁgs.6 (c), (c’), (d) and (d’), we plotted relevance and
diversity scores achieved by dLSH under diﬀerent diversity
distances and MMR when the number of requested articles
was K = 10. The x-axis corresponds to the diﬀerent values
of dLSH radius r in ﬁgures (c) and (d) whereas it corre-
sponds to the MMR parameter λ in ﬁgurs (c’) and (d’).
Not surprisingly, ﬁgs. 6 (c) and (c’) show that dLSH rel-
evance curves decrease as the radius r increases while the
MMR curve slightly increases as λ increases. One should ex-
pect that the relevance of MMR @λ = 0.9 (≈ 0.347) should
be greater than the relevance achieved by dLSH @r = 0.5
(≈ 0.525). However, contrarily to MMR where scores are
obtained by averaging relevance of recommendation lists of
all articles in the dataset collection, dLSH scores are ob-
tained only from those articles having at least K + 1 nearest
neighbors within a radius r. This results in a higher rele-
vance in the case of dLSH that is always greater than or
equal to r. In the remaining ﬁgs, we decided to plot results
of dLSH under diﬀerent diversity distances and values of r
along with results of M M R@0.7. Setting MMR parameter
λ to 0.7 is a reasonable choice as it provides a good balance
between relevance and diversity.

Figs 6 (e) and (g) strengthen the previous remark and
show clearly that relevance@k (number of requested arti-
cles) obtained by dLSH (with r = 0.7) under all diversity
distances is substantially greater than relevance@k achieved
by MMR. In contrast to that, ﬁgs.
6 (f) and (h) show
that MMR achieves a better diversity compared to dLSH.
In fact, as reported before, AJE collection is so scattered
that there’re many articles that don’t have any relevant ar-
ticle (within a reasonable distance radius). However, unlike
dLSH which may return an empty list of recommendation
for this kind of articles, MMR will anyways recommend a
list of articles that minimize the intra-redundancy even if
none of these articles is relevant enough to the input article.
To summarize this experiment part, we can say that dLSH
is a good ﬁt in cases where a minimum relevance threshold
should absolutely be satisﬁed while RM M is better in cases
where we are more ﬂexible with the relevance.

Yet, another interesting result concerns the time perfor-
mance of dLSH. Figs 6 (a) and (b) present the execution
time (in milliseconds) necessary to the diﬀerent algorithms
in order to ﬁnd recommendation lists for 100 input articles.
In the former ﬁg, we ﬁxed r = 0.8 and λ = 0.7 and varied
the number of requested articles K whereas in the latter
ﬁg, we ﬁxed K = 10 and λ = 0.7 and varied the radius r
of dLSH. From ﬁg 6 (a) we can see that dLSH is much
more eﬃcient than MMR. For instance, when we requested
10 (= K) articles, the best gain of dLSH is achieved at
sentiment-based diversiﬁcation which was 30.38x times
faster than MMR while the worst gain is recorded by

userID-based dLSH which was only 7.48x times faster.
The slowness of userID-based diversiﬁcation is due to the
high number of unique users commenting on each article
making the distance calculation more expensive. However,
one can use location-based instead which is 24.68x faster
than MMR and achieves almost the same relevance and
diversity scores than userID-based diversiﬁcation. In cases
where we requested more articles (K = 15 and K = 20),
the gain achieved by dLSH was even bigger. This gain is
due to the nature of MMR which for a given input article,
scans the collection of articles K times, at each iteration it
updates the MR scores of the hole dataset and picks only
the T op1.

Comparing dLSH to dLSH*

This section reports results of comparing dLSH to dLSH
.
The comparison is conducted to measure the impact of pre-
computing diverse buckets on the diversity and relevance
of recommended related articles. As pointed before, LSH
algorithm reduces signiﬁcantly the execution time compared
to the exact r N N algorithm. However, when the size of
data collections is important LSH may become slow. In such
cases, one can use dLSH

to reduce the execution time.

∗

∗

Table 3: Execution time(dLSH

∗

vs. dLSH)

Tech Entities Sentiments Users Locations
Gain

27.49x

21.34x

22.82x

5.5x

∗

∗

∗

Table 3 summarizes the gain in execution time obtained
by dLSH
over dLSH. For instance, in the case of entity-
based diversiﬁcation, dLSH
is 27.49 times faster than
dLSH whereas in the case of sentiment-based diversiﬁca-
tion, dLSH
is only 5.5 times faster. The diﬀerence in gain
depends on the nature of diversity distance used. From a
computational point of view, it is clear that Euclidean dis-
tance used in sentiment-based diversiﬁcation is much faster
than Jaccard correlation used in the Entity (UserId and
location)-based diversiﬁcations. Thus, reducing buckets size
in dLSH
leads to a higher gain in the case of entity, users,
and location -based diversiﬁcation.
Table 4: dLSH

vs. dLSH: diversity/relevance gain

∗

∗

Tech

Entities Sentiments Users
+3.41%
-1.42%
Rel. gain
Div. gain +58.49%
-19.91%

-9.83%
+11.73%

Locations

+4.52%
-17.84%

∗

∗

∗

The main concern of dLSH

is the way it impacts rele-
vance and diversity compared to dLSH. For instance, one
would expect that diversity scores of dLSH
divK sets be
lower than diversity scores of dLSH divK sets (because
dLSH
relies on subsets of dLSH buckets). We will see that
this observation is not hold when the diversity is measured
on articles content. Table 4 presents the overall gain and/or
loss in relevance and diversity caused by dLSH
when com-
pared to dLSH. These overall scores are obtained by averag-
ing scores of each diversiﬁcation technique obtained at diﬀer-
ent values of k = {3, 5, 10, 15, 20} and r = {0.5, 0.6, 0.7, 0.8}.
It is worth to notice that diversity gains presented in the
ﬁgure are calculated over content-based diversity achieved
by dLSH and dLSH
did well in
the case of entity-based diversiﬁcation as the diversity of re-
turned sets increases by 58.50% while the relevance decreases

. As we can see, dLSH

∗

∗

∗

8 

0
0
1
 
r
e
p
 
)
s

m
(
e
m

i
t
 
e
g
a
r
e
v
a

 
s
e
i
r
e
u
q

3000

2500

2000

1500

1000

500

0

3000

2500

2000

 

0
0
1
 
r
e
p
 
)
s

m

(
 
e
m

i
t
 
e
g
a
r
e
v
a

 
s
e
i
r
e
u
q

1500

1000

500

0

0.55
0.5
0.45
0.4
0.35
0.3
0.25
0.2
0.15

3

5

10

15

20

(a) Execution time @k, r=0.8, (cid:644)=0.7  
0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

0.6

0.5
(c) Relevance@r , k=10 

0.7

0.8

0.9

0.55
0.5
0.45
0.4
0.35
0.3
0.25
0.2
0.15

0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0

0.6

0.9
0.5
(c(cid:859)) MMR Relevance@ (cid:644), k=10 

0.7

0.8

0.45

0.4

0.35

0.3

0.25

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

0.5

0.6

0.7

0.8

0.9

(b) Execution time @r, k=10, (cid:644)=0.7  

0.5

0.7

0.6
0.9
(d) Diversity@r, k=10 

0.8

0.6

0.5
0.9
(d(cid:859))MMR Diversity@ (cid:644), k=10 

0.8

0.7

3

Entity based

Sentiment based

User ID based

0.55

0.5

0.45

0.4

0.35

0.3

0.25

5

3
(e) Relevance@k, r=0.7, (cid:644)=0.7  

10

15

20

5

3

20
(g) Relevance@k, r=0.6, (cid:644)=0.7  

10

15

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

5

10

15

3
(h) Diversity@k, r=0.6, (cid:644)=0.7  
MMR

20

5

10

15

20

(f) Diversity@k, r=0.7, (cid:644)=0.7  
geoLocation based

Figure 6: Comparing dLSH to MMR in terms of execution time, relevance, and diversity

∗

∗

by only 1.42% compared to sets returned by dLSH. That
is, there’s a real beneﬁt to use dLSH
rather than dLSH for
this kind of diversiﬁcation. In the case of sentiment-based
diversiﬁcation, the results are encouraging although the ad-
vantage of using dLSH
is less noticeable as the resulting
11.7% gain in diversity is almost paid with a loss of 9.8%
in terms of relevance.
In contrast to that, we observe in
the two remaining diversiﬁcation techniques, namely user-
based and location-based, that dLSH
leads to a diversity
decrease and a relevance increase. Moreover, the derived
loss in diversity (user-based: -19.9%, location-based:-17.8%)
is much more important than the gain in relevance obtained
((user-based: 3.4%, location-based: 4.5%)).This unexpected
results lead to think that there is no obvious relationship be-
tween dLSH
and dLSH for two reasons: (i.) The diversity
is maximized for some comment-based distance its quality
is measured in terms of content. (ii.) The 6-approximation
doesn’t hold in the case of Jaccard-based distances which
doesn’t satisfy the triangular inequality.

∗

∗

4.5 User study

To evaluate the quality of our diversiﬁcation techniques,
we conducted a user study using Amazon Mechanical Turk
system (AMT). The goal of this survey is twofold: (i.) Com-
pare lists of related articles generated by dLSH and M M R.
(ii.) Compare diﬀerent diversity distances to each other. For
this purpose, we randomly picked two articles from two main
topics: Politics and Business-Finance. For each input article
we generated four related articles lists each of size 5. Three
lists are generated using dLSH with entity-, sentiment-, and
userId- diversity distance whereas the fourth list is gener-
ated using M M R.
location-based diversiﬁcation is inten-
tionally omitted because it usually generates the same lists
than userID-based diversiﬁcation.

Comparative experiment.

We design a survey including two questions of interest: In
question Q1, we ask workers to rate the overall diversity of
one list of articles (let say list A) wrt. another list (say list
B) using ﬁve comparative measures: articles in list A are

signiﬁcantly more diverse, somewhat more diverse, equally
diverse, somewhat less diverse, or signiﬁcantly less diverse
compared to articles in list B. In question Q2, we simply ask
them to say which list of articles they do prefer.

We build for each input article 6 diﬀerent groups of HITs
each of which composed of 11 identical HITs (the total num-
ber of HITs is 132). In the ﬁrst three groups we compare di-
versiﬁed list of articles (say, divK lists) generated by our di-
versiﬁcation techniques (entity-based, sentiment-based, and
userID-based) to the list generated by M M R (say, mmrK
lists.) The three remaining groups are devoted to compare
divK lists two by two. In order to make the user study re-
alistic, we omitted to provide any extra information about
related articles but their titles while the input article was
presented with its title, key features (topic, persons, loca-
tions), a small abstract, and a Read more link. As a conse-
quence, all workers answers will rely on the titles only.

Results To quantify the responses given by workers, we
use two metrics called Mean Response Volume (MRV) and
Mean Weighted Response (MWR) [9]. For a given question,
MRV measures the number of responses received per option
divided by the total number of responses whereas MWR
provides an aggregated quantitative measure about workers
responses. To aggregate workers responses, we number op-
tions from 1 (worst) to 4 or 5 (best) according to the number
of options provided.

Overall, the user study revealed that only 28.5% of work-
ers preferred (in Q2) the list of related articles they identi-
ﬁed as being more diverse than the other one (in Q1). This
leads to think that users are somehow reluctant to diversity
as they don’t understand the reason for which certain arti-
cles are recommended to them. An explanation eﬀort should
be undertaken here to overcome this problem (e.g., display
the related features under article titles).

Figure 7-(a) shows the overall MRV of each option in re-
sponse to Q1 in HITs comparing divK lists to mmrK lists.
In the case of economics input article, more than 65% of
workers found dLSH related articles (signiﬁcantly or some-
what) more diverse than M M R list while in the case of
politics input article only 30% of workers said that dLSH

9generated lists were more diverse than M M R list. These
contradictory results are mainly due to the fact that users
are restricted to article titles to judge the diversity of lists.
It turns that in the former case, all the ﬁve articles in the
M M R list contained the word China in their title while
the input article was about The asset crisis of emerging
economies. dLSH did better in this case, as the list of arti-
cles it generated contained more varied titles. In the latter
case, we think that the actual (content) diversity of articles
was better reﬂected in the titles in both M M R and dLSH
lists. Therefore, a majority of workers noticed that M M R
list is more diverse than dLSH lists.

Figure 7-(B) reports the MWR breakdown by diversiﬁ-
cation technique.
It shows that the three diversiﬁcation
techniques produce lists that are more diverse (score (cid:15) 3)
compared to mmrK lists in the case of economics input ar-
ticle. In the case of politics input article, userID and entity-
based diversiﬁcation got almost the same diversity scores
than M M R while sentiment-based lists were deﬁnitely less
diverse.

Figure 7: Diversity of dLSH vs. M M R

In terms of pairwise comparison of dLSH diversiﬁcation
techniques, results are as follows: In the case of economics
article sentiment-based diversiﬁcation was preferred to both
userId-based (55% vs. 45% of votes) and entity-based (73%
vs.27% of votes), and user-based diversiﬁcation was pre-
ferred to the entity-based (82% vs. 18% of votes). In the
case of politics article, entity-based diversiﬁcation did al-
most as well as sentiment-based diversiﬁcation, both ahead
userID-based technique. Overall, the most preferred diversi-
ﬁcation was sentiment-based distance which surprisingly got
a good results in both economics and politics input articles.
That is, people tend more than ever to express their senti-
ment on news articles of diﬀerent topics, in particular those
directly impacting their lives.

5. RELATED WORK

Search result diversiﬁcation has received extensive atten-
tion in both research and industry. Carbonell and Goldstein
introduced the concept of diversity in text retrieval and sum-
marization [8]. Authors used two similarities to deﬁne the
Maximal Marginal Relevance criterion. The ﬁrst similarity
is used to evaluate document relevance given a query and
the second to estimate document novelty. Since then, sev-
eral diversiﬁcation techniques have been proposed which fall
into two main approaches: content-based and intent-based.
In the former [8, 12, 6] the goal is to reduce the redundancy
of a set of results by selecting the most relevant document
and greedily adding documents which maximize relevance
and minimize redundancy. In the latter [3, 14] the goal is
to cover subtopics (intents) behind queries. This approach

is particularly eﬀective in the case of ambiguous queries. It
starts by identifying the set of all possible query subtopics
and uses probabilities with which the query belongs to each
subtopic to rank documents.

In recommender systems, diversiﬁcation was approached
through two paradigms:
local and aggregate. Local diver-
sity [18, 17, 15, 16] aims at increasing the intra-diversity
of a set of items within a recommendation list and is usu-
ally achieved using attributes [18, 17] or explanations [16].
Unlike local diversity, aggregate diversity aims at increasing
diversity [2] so that users do not see the same top k items.
Jain et al. address the problem of providing diversity in K-
nearest neighbor queries [12]. Authors present an algorithm
(MOTLEY) which relies on a user-tunable parameter to con-
trol the minimun diversity that any pair of results should
satisfy. The main idea consists in ﬁnding the set of candi-
date answers which satisﬁes the diversity constraint, then
access these candidates in a smart way (using an R-tree) to
pick the set of k nearest neighbors. Besides the fact that we
are using social data to recommend diverse news, there are
some major diﬀerences between our work and that of Jain
et al. i. In our solution, only those items which are within
a relevance distance are candidates, whereas [12] consider
items which satisfy a diversity constraint, i.e., MOTLEY
ii. Unlike MOTLEY
provides no guarantee on relevance.
that uses R-trees to retrieve the set of k-NN, we are using
LSH techniques [5] that are faster and more robust under
high dimensionality [11].

6. CONCLUSION AND FUTURE WORK

We addressed the problem of providing diverse news rec-
ommendations related to an input article. We leveraged
user-generated data to reﬁne lists of related articles. In par-
ticular, we explored diﬀerent diversity distances that rely on
the content of user comments on articles such as sentiments
and entities. Given the real-time nature of our recommenda-
tions, we applied locality-sensitive hashing techniques to ﬁnd
candidate articles that are within a relevance distance r from
an input article a. Then, we adapted a greedy algorithm to
identify the k articles that collectively 2-approximately max-
imize diversity. Our user study showed that user-generated
data achieves a good balance between relevance and diver-
sity compared to other diversiﬁcation techniques. We also
showed with an extensive set of experiments on Al Jazeera
English and Reuters collections, that using LSH makes our
proposals eﬀective in an real-time environment.

We would like to investigate the relationship between
LSH parameters L and K and the relevance of nearest
neighbor articles retrieved. The intuition we have is that
the diversity of two articles can be a function of the num-
ber of times (α = 1 . . . L) they fall into the same bucket (i.e.
number of hash functions that hash both articles to the same
bucket). The lower that number, the higher the diversity.

7. REFERENCES
[1] S. Abbar, S. Amer-Yahia, P. Indyk, S. Mahabadi, and
K. Varadajaran. K-diverse near neighbor problem, to
be submitted.

[2] G. Adomavicius and Y. Kwon. Improving aggregate

recommendation diversity using ranking-based
techniques. Knowledge and Data Engineering, IEEE
Transactions on, PP(99):1, 2011.

10[3] R. Agrawal, S. Gollapudi, A. Halverson, and S. Ieong.

[11] P. Indyk and R. Motwani. Approximate nearest

Diversifying search results. In Proceedings of the
Second ACM International Conference on Web Search
and Data Mining, WSDM ’09, pages 5–14, New York,
NY, USA, 2009. ACM.

[4] S. Amer-Yahia, S. Anjum, A. Ghenai, A. Siddique,

S. Abbar, S. Madden, A. Marcus, and M. El-Haddad.
Maqsa: a system for social analytics on news. In
SIGMOD Conference, pages 653–656, 2012.

[5] A. Andoni and P. Indyk. Near-optimal hashing

algorithms for approximate nearest neighbor in high
dimensions. Commun. ACM, 51(1):117–122, Jan. 2008.

[6] A. Angel and N. Koudas. Eﬃcient diversity-aware

search. In Proceedings of the 2011 international
conference on Management of data, SIGMOD ’11,
pages 781–792, New York, NY, USA, 2011. ACM.

neighbors: towards removing the curse of
dimensionality. In Proceedings of the thirtieth annual
ACM symposium on Theory of computing, STOC ’98,
pages 604–613, New York, NY, USA, 1998. ACM.

[12] A. Jain, P. Sarda, and J. R. Haritsa. Providing
diversity in k-nearest neighbor query results. In
PAKDD, pages 404–413, 2004.

[13] S. Ravi, D. Rosenkrantz, and G. Tayi. Facility

dispersion problems: Heuristics and special cases.
Algorithms and Data Structures, pages 355–366, 1991.

[14] M. J. Welch, J. Cho, and C. Olston. Search result

diversity for informational queries. In Proceedings of
the 20th international conference on World wide web,
WWW ’11, pages 237–246, New York, NY, USA,
2011. ACM.

[7] A. Z. Broder, M. Charikar, A. M. Frieze, and

[15] C. Yu, L. Lakshmanan, and S. Amer-Yahia. It takes

M. Mitzenmacher. Min-wise independent
permutations (extended abstract). In Proceedings of
the thirtieth annual ACM symposium on Theory of
computing, STOC ’98, pages 327–336, New York, NY,
USA, 1998. ACM.

variety to make a world: diversiﬁcation in
recommender systems. In Proceedings of the 12th
International Conference on Extending Database
Technology: Advances in Database Technology, EDBT
’09, pages 368–378, New York, NY, USA, 2009. ACM.

[8] J. Carbonell and J. Goldstein. The use of mmr,

[16] C. Yu, L. V. S. Lakshmanan, and S. Amer-Yahia.

diversity-based reranking for reordering documents
and producing summaries. In Proceedings of the 21st
annual international ACM SIGIR conference on
Research and development in information retrieval,
SIGIR ’98, pages 335–336, New York, NY, USA, 1998.
ACM.

[9] M. D. Choudhury, M. Feldman, S. Amer-Yahia,
N. Golbandi, R. Lempel, and C. Yu. Automatic
construction of travel itineraries using social
breadcrumbs. In HT, pages 35–44, 2010.

[10] T. F. Gonzalez. Clustering to minimize the maximum

intercluster distance. Theor. Comput. Sci.,
38:293–306, 1985.

Recommendation diversiﬁcation using explanations. In
ICDE, pages 1299–1302, 2009.

[17] M. Zhang and N. Hurley. Avoiding monotony:

improving the diversity of recommendation lists. In
Proceedings of the 2008 ACM conference on
Recommender systems, RecSys ’08, pages 123–130,
New York, NY, USA, 2008. ACM.

[18] C.-N. Ziegler, S. M. McNee, J. A. Konstan, and

G. Lausen. Improving recommendation lists through
topic diversiﬁcation. In Proceedings of the 14th
international conference on World Wide Web, WWW
’05, pages 22–32, New York, NY, USA, 2005. ACM.

11