EIOP - An E-Commerce Interoperability Platform

Kara Harp Okulu, Dekanlık, OBS S¸ ube

Yusuf Tambag

Ankara, Turkey

yusuf@kho.edu.tr

ABSTRACT
Interoperability has become one of the big problems of e-commerce
since it was born. A number of B2B standards like ebXML, UDDI,
RosettaNet, xCBL, etc. emerged recently to solve the interoper-
ability problem.

Currently, there exists many B2B standards each provide com-
peting and complementary solutions to B2B interoperability. So,
there is a need for serving implementation of these standards from
a single, central store to ease the use and management of the im-
plementations. This paper presents EIOP, an E-commerce Interop-
erability Platform. EIOP is designed to provide a central store for
implementations of e-commerce speciﬁcations to be able to use and
conﬁgure these implementations from a single, central point. It de-
ﬁnes the term EIOP Component which corresponds to plug&play
e-commerce applications that are stored in the EIOP.

Categories and Subject Descriptors: K.4.4 [Computers and So-
ciety]: Electronic Commerce
General Terms: Standardization
Keywords: E-commerce, interoperability, ebXML, UDDI, ebIOP

1.

INTRODUCTION

Currently, many speciﬁcations appeared that provide different
solutions for various e-commerce problems. As a result, compa-
nies tend to support more than one speciﬁcation. By supporting
more than one speciﬁcation, a company will be able to combine
complementary aspects of the speciﬁcations to provide better ser-
vices and the availability of the services supported by the company
will be increased (i.e., if implementation of a speciﬁcation is un-
available, the company may use the implementation provided by
another speciﬁcation that provide solution for the same problems).
So, there is a need for an engine that will store and serve implemen-
tations of these speciﬁcations from a single, central point. The en-
gine should also be easily customizable to enable addition/removal
of these implementations. EIOP aims to provide implementation of
such an engine.

EIOP is extension of ebIOP [1] which provides such an engine

for ebXML.

2. SYSTEM ARCHITECTURE

EIOP contains a server that listens to a port and a web based user
interface from which one can manage (add/remove/change/list) and
use the EIOP Components over the web. Figure 1 shows the sys-
tem architecture. EIOP contains one or more EIOP Components
Copyright is held by the author/owner(s).
WWW2004, May 17–22, 2004, New York, New York, USA.
ACM 1-58113-912-8/04/0005.

which are implementations of e-commerce problems or speciﬁca-
tions. EIOP receives messages with the help of its JAXM (Java
XML Messaging) compliant message handler over the HTTP or
TCP/IP. EIOP server (which resides most probably inside the com-
pany ﬁrewall) receives messages with the help of its TCP/IP com-
pliant message handler. The JAXM compliant message handler
routes the messages coming from the other EIOP servers (which
are outside the ﬁrewall) to the messaging handler that resides in
EIOP server using TCP/IP.

Company A

EIOP
Component1

EIOP
Component2

......

EIOP
Component n

Web
Interface

JAXM−HTTP

or JAXM−TCP/IP

EIOP Server

P
T
T
H
−
M
X
A
J

EIOP Server

Company B
Web
Interface

JAXM−HTTP

or JAXM−TCP/IP

EIOP
Component1

EIOP
Component2

......

EIOP
Component n

Figure 1: EIOP Architecture.

EIOP communicates with the web interface and EIOP’s of other
parties using a standard messaging service called EIOP MS (EIOP
Messaging Service). EIOP MS deﬁnes a set of SOAP Header and
body elements with in the SOAP Envelope. Figure 2 shows an ex-
ample request message. As shown in the ﬁgure, the header part
contains message identiﬁcation and processing data that explains
how the message should be processed at the receipent. The body
part contains the information about the attachments, and the ﬁrst
attachement of the message contains the EIOP request or response
message. The message shown in the ﬁgure requests the list of com-
ponents on the EIOP Server.

EIOP messages are processes by a messaging handler named

230<SOAP:Envelope xmlns:SOAP=

"http://schemas.xmlsoap.org/soap/envelope/">
<SOAP:Header>

<pmh:MessageData message.type=’platform.info’

processor.class=’metu.ceng.e102830.iop.
platform.components.pinfo.
PlatformInfoMessageProcessor’>
<pmh:MessageId>Msg001</pmh:MessageId>

</pmh:MessageData>

</SOAP:Header>
<SOAP:Body>

<pmb:Manifest>

<pmb:Reference id=’Attachment1’/>

</pmb:Manifest>

</SOAP:Body>

</SOAP:Envelope>
--boundaryValue
Content-ID: <Msg001@sender.com>
Content-Type: text/xml; charset=’UTF-8’

<PlatformRequest>

<PlatformServerRequest crq:request.type=’LIST’>
</PlatformServerRequest>

</PlatformRequest>

Figure 2: An example EIOP Message.

EIOP MSH. When a message is received by the EIOP MSH, the
header part of the message is processed to ﬁnd a suitable mes-
sage processor for the message type. Currently the EIOP has two
types of messages namely platform.info and platform.component.
The ﬁrst message type requests information or modiﬁcation from
the EIOP (e.g., list/add/edit/remove EIOP Components). The other
type of message is targeted to an EIOP Component and it is further
processed by the component itself.
2.1 EIOP Component

An EIOP component is an e-commerce application which is an
implementation of an e-commerce problem or speciﬁcation.
In
EIOP, the GUI that is used to manage the components in ebIOP
[1] is maintained as an option. Figure 3 shows this GUI. Speciﬁc
user interfaces of the components could be launched by using the
Components menu as shown in the ﬁgure.

Figure 3: EbIOP GUI.

One can also use EIOP Components over the web interface as
shown in Figure 4. As shown in the ﬁgure, a user may access more
than one EIOP Server from the same interface.

EIOP Components that resides in an EIOP Server is provided in
the conﬁguration ﬁle of the EIOP Server. Each EIOP Component
must implement two methods namely initialize() and processMes-
sage(PlatformMessage). The initialize() method is called by the
EIOP Server when after the server reads its conﬁguration ﬁle to ini-
tialize the component. This method should read the conﬁguration
ﬁle of the component and make necessary initialization speciﬁc to

Figure 4: Web Interface.

the component. The processMessage(PlatformMessage) method is
called by the EIOP MSH of the EIOP Server. When a message tar-
geted to a component is received by the MSH, the component is lo-
cated from the EIOP Server and processMessage(PlatformMessage)
method is called by the MSH. The message is further processed by
the component and result (if any) is returned to the MSH.

EIOP Server communicates with EIOP Servers of other parties
and with the web interface using a standard language called EIOP
ML. EIOP ML is an XML based language and contains two mes-
sage types namely PlatformRequest and PlatformResponse. User
requests are converted into a PlatformRequest message by the web
interface and sent as an attachment in a SOAP message to the EIOP
Server for processing.

After the message is processed, the result is returned as a Plat-
formResponse message to the web interface and the message is con-
verted into suitable format for requesting device (e.g., WML for
PDA’s, HTML for web browsers, etc.) by a suitable XSL docu-
ment. The conversion process is done by a suitable ResponsePro-
cessor at the web interface. According to the type of the response
message and the requesting device, suitable ResponseProcessor is
loaded and response document is converted to the desired format.

3. CONCLUSIONS

EIOP provides a common platform for e-commerce applications
to make businesses easily integrate and use e-commerce applica-
tions from a single central point. EIOP achieves this by provid-
ing a common base class namely EIOPComponent which is an e-
commerce application or implementation of an e-commerce speci-
ﬁcation.

The platform could easily be customized by making a small change
in the conﬁguration. The implementors could replace or add/remove
EIOP Components to/from the EIOP easily by using the web inter-
face or by modifying the conﬁguration. The software is currently
being developed using JDK 1.4.2 with generics and jakarta tomcat
5.0.18. After the EIOP core is completed, ebXML and UDDI spec-
iﬁcations will be integrated into the EIOP as EIOP Components to
compare the two standards.

4. REFERENCES

[1] Tambag, Y., Cosar, A., ”Managing business lifecycle using eb-
IOP”, Journal of Software Practice and Experience, Volume 33,
Issue 13 (p. 1217-1227).

231