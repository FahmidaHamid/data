CC-Buddy: An Adaptive Framework for Maintaining Cache

Coherency Using Peers

Song Gao

Dept. of Computer Science

Wee Siong Ng
Singapore-MIT Alliance

National University of Singapore

National University of Singapore

gaosong@comp.nus.edu.sg

smangws@nus.edu.sg
Aoying Zhou

Dept. of Computer Sci. & Eng.

Fudan University, China
ayzhou@fudan.edu.cn

Weining Qian

Dept. of Computer Sci. & Eng.

Fudan University, China
wnqian@fudan.edu.cn

ABSTRACT
In this paper, we propose a framework called CC-Buddy, for main-
taining dynamic data coherency in peer-to-peer environment. Work-
ing on the basis of peer heterogeneity in data coherency require-
ment, peers in CC-Buddy cooperate with each other to disseminate
the updates by pushing. Simulation results show that our solution
not only improves the ﬁdelity in data, but also reduces the workload
of servers, therefore achieves high-scalability.

Categories and Subject Descriptors
C.2.4 [Computer Networks]: Distributed Systems

General Terms
Management

Keywords
Peer-to-peer, Cache Coherency, Dynamic Data

1.

INTRODUCTION

The applications of online dynamic data processing have expo-
nentially grown in recent years. Dynamic data are the data which
vary rapidly and unpredictably, such as stock price or network mon-
itoring measurements. Most of these applications are built over
centralized systems due to easy-management and implementation.
However, they suffer from scale and single-point failure problems.
P2P technology has emerged as a popular way in terms of pro-
cessing and providing data, because of the many beneﬁts they of-
fer: self-organization, load-balancing, fault-tolerance, availability
through massive replication, etc. Unfortunately, existing P2P sys-
tems provide static data objects management predominantly, such
as music and video ﬁles. Maintenance of data coherency is an key
issue in that peer users always cache dynamic data items to increase
the efﬁciency of query processing. Current dynamic data coherency
techniques in P2P environment are inefﬁcient. In this paper, we fo-
cus on the problem of deploying P2P technology to online dynamic
data processing and management in an overlay network of cooper-
ative peers.
In summary, we have made the following contribu-
tions: 1. We have implemented the CC-Buddy framework layered
Copyright is held by the author/owner(s).
WWW2004, May 17–22, 2004, New York, NY USA.
ACM 1-58113-912-8/04/0005.

Figure 1: CC-Buddy System Architecture

on our P2P infrastructure, BESTPEER [3]. 2. We provide heuris-
tical approaches to optimize peer dynamic attributes and network
resources usage. 3. We evaluate the performance of CC-Buddy by
real trace, and the results show that our framework can not only
achieve more ﬁdelity of data than centralized approaches, but also
reduce workload of servers so as to scale to large population.

2. CC-BUDDY ARCHITECTURE

As shown in Figure 1, in CC-Buddy, each peer manages a pool
of cached data whose coherency are maintained by cooperation
among peers. The proposed framework consists of a collaboration
protocol and a set of topology maintenance mechanisms.
2.1 Collaboration Model

We assume that there are a number of server peers taking charge
of dynamic data updating and dissemination, and a large number
of client peers where dynamic data items are being monitored and
processed. Peer users specify coherency requirement, cr, for each
cached data item of interest. The value of cr denotes the maxi-
mum permissible deviation of the cached value from the value at
the server peer and thus constitutes the user-speciﬁed tolerance [1].
Each peer maintains his local cached data coherency by participat-
ing CC-Buddy overlay. For a particular dynamic data item, peers
with high stringent coherency requirement can feed the peers with
lower coherency requirement by pushing updates. Server peers are
regarded as the highest stringent peers for the data they dissemi-
nates. The previous are called parent peers, the latter are called

(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)(cid:7)(cid:10)(cid:11)(cid:12)(cid:13)(cid:2)(cid:14)(cid:7)(cid:10)(cid:10)(cid:2)(cid:13)(cid:15)(cid:2)(cid:9)(cid:13)(cid:14)(cid:7)(cid:16)(cid:17)(cid:11)(cid:17)(cid:18)(cid:19)(cid:5)(cid:20)(cid:5)(cid:21)(cid:22)(cid:23)(cid:24)(cid:18)(cid:25)(cid:5)(cid:20)(cid:5)(cid:21)(cid:22)(cid:26)(cid:24)(cid:13)(cid:7)(cid:8)(cid:9)(cid:7)(cid:10)(cid:11)(cid:10)(cid:5)(cid:27)(cid:13)(cid:2)(cid:28)(cid:5)(cid:14)(cid:29)(cid:3)(cid:7)(cid:4)(cid:11)(cid:5)(cid:30)(cid:7)(cid:7)(cid:13)(cid:13)(cid:7)(cid:31)(cid:3)(cid:13)(cid:7)(cid:14)(cid:11)(cid:13)(cid:7)(cid:8)(cid:9)(cid:7)(cid:10)(cid:11)(cid:10) (cid:17)(cid:14)!(cid:7)(cid:5)"(cid:17)(cid:4)(cid:17)#(cid:7)(cid:13)(cid:6)(cid:7)(cid:8)(cid:9)(cid:7)(cid:10)(cid:11)(cid:12)(cid:13)(cid:2)(cid:14)(cid:7)(cid:10)(cid:10)(cid:2)(cid:13)(cid:16)(cid:17)(cid:11)(cid:17) (cid:17)(cid:14)!(cid:7)(cid:10)(cid:16)(cid:7)(cid:30)(cid:7)(cid:4)(cid:31)(cid:17)(cid:4)(cid:11) !(cid:3)(cid:29)(cid:31)(cid:13)(cid:7)(cid:4)(cid:5)(cid:30)(cid:7)(cid:7)(cid:13)"(cid:17)(cid:4)(cid:17)#(cid:7)(cid:13)  $%(cid:9)(cid:31)(cid:31)&(cid:5)’()((cid:10)(cid:7)(cid:13)(cid:31)(cid:17)(cid:11)(cid:17)(cid:5)(cid:3)(cid:11)(cid:7)(cid:28)(cid:10)(cid:14)(cid:2)(cid:4)(cid:10)(cid:3)(cid:10)(cid:11)(cid:7)(cid:4)(cid:14)&(cid:13)(cid:7)(cid:8)(cid:9)(cid:3)(cid:13)(cid:7)(cid:28)(cid:7)(cid:4)(cid:11)(cid:10)(cid:8)(cid:9)(cid:7)(cid:13)&(cid:5)(cid:17)(cid:4)(cid:10)*(cid:7)(cid:13)(cid:10)(cid:5)(cid:27)(cid:13)(cid:2)(cid:28)(cid:14)(cid:17)(cid:14)!(cid:3)(cid:4)#(cid:5)(cid:31)(cid:17)(cid:11)(cid:17)(cid:30)(cid:9)(cid:10)!(cid:5)(cid:9)(cid:30)(cid:31)(cid:17)(cid:11)(cid:7)(cid:10)(cid:13)(cid:7)(cid:31)(cid:3)(cid:13)(cid:7)(cid:14)(cid:11)(cid:5)(cid:13)(cid:7)(cid:8)(cid:9)(cid:7)(cid:10)(cid:11)(cid:10)330children peers. Server peers only push data updates to their chil-
dren peers. Parent peer pushes updates to its children peers in turn.
Since each peer may cache numerous data items with variety of co-
herency requirements, the entire overlay consists of quite a few of
logical connected tree topologies rooted by the server peers.

2.2 Overlay Topology Maintenance

We investigate the overlay construction algorithms, recovery mech-

anisms of peer departure and self-adaptive procedures to show how
the overlay works by cooperating with numerous peers. Client peer
submits request to speciﬁc server peer in order to join a particular
data item dissemination tree. If server peer has available capacity,
it establishes a logical connection with the client peer as its child
peer; if server peer has no enough capacity, it redirects the request
to its immediate child peers. The procedure recurs until potential
parent peer is found. Client peer register the data item of interest
and the associated coherency requirement with its parent peer.

CC-Buddy provides two tree construction policies. One is ran-
domized for choosing redirect targets. Parent peer redirects the tar-
get peers at random. Randomized construction requires minimum
state storage and computation cost at parent peer. However, the
constructed overlay in its way is no optimal. The other is locality-
biased, parent peer redirects the request to children that has least
access latency with the client peers. The construction procedure
takes network locality into consideration. It provides CC-Buddy
near-optimal data updates delivery delay so that enhance the ﬁdelity
of cached data. The enhancement of performance is achieved at the
cost of distance estimation [2]. Collecting the potential parent peers
from the overlay, client peer chooses the optimal candidate as the
parent peer to join the tree measured in workload, proximity and
data availability of each candidate. Furthermore, client peer back-
ups the rest of the peers for future adjustment.

Peers join and leave unexpectedly. In order to adapt to P2P sce-
nario, CC-Buddy provides robust recovery mechanisms to peer fail-
ure or departure problem. In the case of a peer’s graceful leaving,
the peer ﬁnds target peers to hand over his children peers. There are
two methods: top-down and bottom-up. As a trivial solution, top-
down method lets all the peer’s children peers rejoin the overlay by
re-submitting request to server peers. In a more elegant approach,
bottom-up, the peer requests to his parent peer to hand over all the
disconnected child peers, the procedure recurs until all the children
peers are reconnected. Note that these two approaches remain all
the setting of the peer’s grandchildren without adjustments. In the
case of a peer’s ungraceful leaving or failure, the departing peer is
unable to notify its children. CC-Buddy provides soft maintenance
messages for children peers to detect the failure periodically. Dis-
connected peers recover by connecting to backup parent peers, or
just rejoin the overlay by requesting server peers. Transient peers,
such as mobile computing devices or PCs connected in with low-
bandwidth network links, are unstable. In the case of transient peers
with stringent coherency requirements, the whole overlay will suf-
fer from their churning. An efﬁcient method to reduce the impact
of transient peers is to push the transient peers to the bottom of the
topology, and let them act as the leaf nodes.

2.3 Heuristic Adaption Policies

CC-Buddy framework is integrated with heuristic algorithms to
improve the usability and self-adapt to dynamic attributes. The ini-
tial establishment of overlay can not be considered with the dy-
namic network attributes. Self-adaptive procedures are provided to
improve the overlay efﬁciency, reduce the workload of intermediate
peer’s heavy burden and adapt to dynamic capacity of peers. When
a new coming peer joins the overlay, he can share the workload of

Figure 2: Performance Evaluation

its ancestor peers. Furthermore, each child peer periodically com-
pute the measurements to characterize workload, network proxim-
ity and bandwidth capacity among his parent peer and each backup
parent peer, meanwhile, adjust the overlay by moving to the most
beneﬁcial position. Network resource usage has been identiﬁed
as factors inﬂuencing usability in large-scaled networks. Children
peers can only be connected with logical connections due to the
limitation of available network resources. However, data delivery
by logical connections needs to initialize physical connections and
release them after ﬁnishing disseminating. We provide network
reconﬁguration to adapt the network dynamics. The goal of our
optimization is to assign a set of neighbors to each peer, so that
there is a high probability for each client peer to obtain or deliver
the updates in short latency. Since the number of allowed network
connections is expected to be small, each connection is assigned
a beneﬁt value dynamically to reconﬁgure the topology. As ex-
pected, after periodically collecting the statistics, we can ﬁgure out
the most beneﬁcial connections, establish the physical connections
to reduce the dissemination latency.

3. PERFORMANCE EVALUATION

We evaluate our framework using real trace. The goal is to mini-
mize loss in ﬁdelity of data. We collected 50 ﬂuctuating stock price
traces from the http://ﬁnance.yahoo.com. We setup 50 server peers,
and varied the size of client peers from 700 nodes to 2500 nodes.
The server peers disseminate updates periodically. Meanwhile, we
set 60% of the cached data items have stringent coherency require-
ments at each peer, 40% have less stringent coherency require-
ments. We compare the performance of CC-Buddy taking central-
ized approach as baseline. As can be seen in Figure 2, CC-Buddy
can achieve more efﬁciency.

4. CONCLUSIONS

Based on application-level multicast techniques, we presented
an adaptive framework for maintaining dynamic data using peer-
to-peer technology. Experimental results veriﬁed that our frame-
work achieves better performance than centralized approach and
indicated the scalability of our approach.

5. REFERENCES
[1] P. Deolasee, A. Katkar, A. Panchbudhe, K. Ramamritham, and
P. J. Shenoy. Adaptive push-pull: disseminating dynamic web
data. In Proc. of WWW10, pages 265–274, 2001.

[2] J. Liu, X. Zhang, B. Li, Q. Zhang, and W. Zhu. Distributed

distance measurement for large-scale networks. Int’l Journal
of Computer and Telecommunications Networking, 41, 2003.

[3] W. S. Ng, B. C. Ooi, and K. L. Tan. Bestpeer: A Self-Con-

ﬁgurable Peer-to-Peer System. In Proc. of ICDE2002 (poster).

00.10.20.30.40.50.60.70.870090011001300150017001900210023002500Network Size (number of peers)Loss of fidelityRandomizedLocality-biasedCentralized331