Partitioning of Web Graphs by Community Topology

Hidehiko Ino

Graduate School of

Information Science and

Technology

Hokkaido University

Sapporo, 060-0814 Japan

Mineichi Kudo
Graduate School of

Information Science and

Technology

Hokkaido University

Sapporo, 060-0814 Japan

Atsuyoshi Nakamura

Graduate School of

Information Science and

Technology

Hokkaido University

Sapporo, 060-0814 Japan

hino@main.ist.hokudai.ac.jp

mine@main.ist.hokudai.ac.jp

atsu@main.ist.hokudai.ac.jp

ABSTRACT
We introduce a stricter Web community deﬁnition to over-
come boundary ambiguity of a Web community deﬁned by
Flake, Lawrence and Giles [2], and consider the problem of
ﬁnding communities that satisfy our deﬁnition. We discuss
how to ﬁnd such communities and hardness of this problem.
We also propose Web page partitioning by equivalence
relation deﬁned using the class of communities of our deﬁni-
tion. Though the problem of eﬃciently ﬁnding all communi-
ties of our deﬁnition is NP-complete, we propose an eﬃcient
method of ﬁnding a subclass of communities among the sets
partitioned by each of n − 1 cuts represented by a Gomory-
Hu tree [10], and partitioning a Web graph by equivalence
relation deﬁned using the subclass.

According to our preliminary experiments, partitioning by
our method divided the pages retrieved by keyword search
into several diﬀerent categories to some extent.

Categories and Subject Descriptors
H.2.8 [Database Management]: Database Applications—
data mining; H.3.3 [Information Systems]: Information
Storage and Retrieval—clustering,information ﬁltering; G.2.2
[Discrete Mathematics]: Graph Theory—network prob-
lems

General Terms
Algorithms, Experimentation

Keywords
Web community, graph partitioning, maximum ﬂow algo-
rithm

1.

INTRODUCTION

The World-Wide Web (WWW) is a huge network in which
pages are connected by links. Inside this Web link structure,
a lot of valuable information about the relationship between
Web pages exists because Web links are created by People
for the purpose of guidance to the related pages. Actually,
this information has been already used for many applica-
tion, for example, the ranking of pages retrieved by a search
engine [6, 1].
Copyright is held by the International World Wide Web Conference Com-
mittee (IW3C2). Distribution of these papers is limited to classroom use,
and personal use by others.
WWW 2005, May 10-14, 2005, Chiba, Japan.
ACM 1-59593-046-9/05/0005.

One of the interesting substructures of the WWW net-
work is a community structure, a structure of subgraphs with
dense connections. A set of pages having such structure, a
Web community, is conceivably created by people having
the same interests. Therefore, discovered communities can
be used in Web page search and recommendation.

There are mainly the following two detailed deﬁnitions
of communities deﬁned as dense subgraphs. One deﬁnition
proposed by Kumar et al. [7] is that a community is a dense
directed bipartite subgraph which contains a complete bipar-
tite subgraph of a certain size. However, this deﬁnition is
ambiguous because it still contains the word ‘dense’. The
deﬁnition would become clear if a community were deﬁned as
a complete bipartite subgraph itself, but then most commu-
nities would be too small and most pages would not belong
to any communities. The other deﬁnition proposed by Flake,
Lawrence, Giles [2] is that a community is a vertex subset in
which each member vertex has at least as many edges con-
necting to member vertices as it does to non-member ver-
tices. This deﬁnition is clear, and for every vertex subset,
it is possible to decide whether it is a community or not.
Besides, the possibility that large communities exist seems
to be high, and most pages seem to belong to some commu-
nities that are not a whole set of vertices.

In order to ﬁnd communities deﬁned by Flake et al., which
we call FLG-communities here, the following two methods
were proposed so far, and both methods are trying not
to ﬁnd densely-connected vertex subsets but to ﬁnd those
sparsely connected to their outside vertices. One is a method
based on edge betweenness proposed by Girvan and New-
man [4]. The edge betweenness of an edge is deﬁned as
the number of shortest paths between pairs of vertices that
run along it. Based on the idea that the edges connecting
the inside and the outside of a community are expected to
have high edge betweenness, Girvan and Newman proposed
a method of removing an edge with the highest edge be-
tweenness one by one. However, it is not guaranteed that
FLG-communities are found by their method1. The other
is a method using the maximum ﬂow algorithm proposed by
Flake et al. [2]. The maximum ﬂow algorithm [9, 10] is an
algorithm that calculates how much water must run through
each edge in order to maximize the total amount of water
running from a vertex (source) to another vertex (sink) on
condition that the amount of water through each edge must
be at most its given capacity. The method using the maxi-

1For example, in Figure 2, their method divides C3 and
V − C3, and does not ﬁnd the FLG-community C4.

mum ﬂow algorithm is based on the idea that sparse edges
between the inside and the outside of an FLG-community
become a bottleneck of the ﬂow from an inside vertex to
an outside vertex when the capacity of every edge is one.
A subset of saturated edges, the edges through which the
amount of water equal to its capacity is running, gives a
cut that divides the set of all vertices into two sets, a set
containing the source and a set containing the sink. Ford
and Fulkerson’s “max ﬂow-min cut” theorem [9, 10] guar-
antees that this cut contains the minimum number of edges
among all cuts dividing the source and the sink. Flake et al.
claimed that, in order to be identiﬁed by the maximum ﬂow
algorithm, an FLG-community C must satisfy the condition
that both s# and t# are larger than the number of edges in
the cut (C, V −C), where s# is the number of edges between
the source s and vertices in C, and t# is the number of edges
between the sink t and vertices in V − C.

There are two problems for the method proposed by Flake
et al. First, the boundary of an FLG-community is ambigu-
ous, that is, many slightly diﬀerent subsets could be FLG-
communities for one densely-connected part of a graph. Sec-
ond, a vertex set found by a maximum ﬂow algorithm might
not be an FLG-community even if an FLG-community C
satisfying the above condition exists.

To overcome the ﬁrst problem, this paper introduces a
stricter community deﬁnition than the FLG-community def-
inition. In the FLG-community deﬁnition, only inside ver-
tices of a community are conditioned.
In our community
deﬁnition, it must be also satisﬁed that each outside vertex
has at least as many edges connecting to outside vertices
as it does to inside vertices. (We call an FLG-community
satisfying this condition an IKN-weak-community.) In addi-
tion to this condition, inside vertices must satisfy a stricter
condition that each inside vertex has more edges connect-
ing to inside vertices than it does to outside vertices. (We
call an IKN-weak-community satisfying this condition an
IKN-community.) The deﬁnition of IKN-community reduces
boundary ambiguity of FLG-community to some extent be-
cause two distinct IKN-communities diﬀer in at least two
vertices.

A clariﬁcation of what can be found by an s-t maximum
ﬂow algorithm approaches the second problem. We prove
that what can be found by an s-t maximum ﬂow algorithm
is not an FLG-community but a s-t quasi-IKN-community in
which all vertices but the two vertices s and t satisfy the con-
ditions of IKN-community. In terms of FLG-communities,
this means that a maximum ﬂow algorithm always ﬁnds a
vertex set whose members but the source s satisfy the con-
dition of (strict2) FLG-community, which has been already
proved by Flake, Tarjan and Tsioutsiouliklis [3]. So, an
s-t maximum ﬂow algorithm might seem to approximately
ﬁnd an FLG-community. However, the fact that a source
might not satisfy the condition should not be neglected be-
cause a source is the most important vertex which must be
contained in the community. On the other hand, the fact
that all members but the source s (and the sink t) in a
found set satisﬁes the conditions of FLG-community (IKN-
community) ensures that only s (and t) should be checked
to satisfy the conditions to know whether it is an FLG-
community (IKN-community) or not.

An eﬃcient algorithm to ﬁnd not an s-t quasi-IKN-community

2See the deﬁnition in Sec. 2.1

but an s-t IKN-community (an IKN-community that in-
cludes s and excludes t) has not been known yet. As a
diﬀerence between the problem of ﬁnding an s-t IKN-weak-
community and the problem of ﬁnding an s-t quasi-IKN-
community, which can be solved eﬃciently by an s-t max-
imum ﬂow algorithm, we show the fact that each coordi-
nate of every extreme point solution is an integer for the
LP-relaxation of the integer programming in a formaliza-
tion of the latter problem, but might not be an integer
for that in a formalization of the former problem. This
seems to support the hardness of the problem of ﬁnding
an s-t IKN-community. Actually, very recently, the prob-
lem of deciding whether an s-t IKN-community (IKN-weak-
community) exists or not for given s and t has been proved
to be NP-complete even if weights are restricted to be 1
[8]. The problem of deciding whether an IKN-community
(IKN-weak-community) exists or not in a given graph has
been also proved to be NP-complete [3], which implies NP-
completeness of the above s-t IKN-community (IKN-weak-
community) problem without restriction on weights.

Partitioning Web pages into groups having similar prop-
erties is useful for information retrieval, and Web commu-
nities can be used for this purpose. We propose Web page
partitioning by the equivalence relation deﬁned using the
class of IKN-communities, where two pages are equivalent
if and only if the sets of IKN-communities including each
page coincide. This equivalence relation can be also de-
ﬁned by using FLG-communities, but a partition obtained
by the relation may not be useful for the boundary ambigu-
ity problem described above. We also propose hierarchical
partitioning by repeatedly applying this partitioning to the
contracted graph in which all original vertices in the same
partition are contracted into one vertex.

In order to partition a Web graph by the equivalence re-
lation deﬁned using IKN-communities, the existence of s-t
IKN-communities should be checked for arbitrary vertices s
and t, which is an NP-complete problem as described above.
In this paper, we propose a coarser partitioning by the equiv-
alence relation deﬁned using a subclass of IKN-communities
which are eﬃciently extracted by an s-t maximum ﬂow al-
gorithm. As mentioned above, sets found by an s-t maxi-
mum ﬂow algorithm are s-t quasi-IKN-communities, so only
a further check if s and t satisfy the requirements of be-
ing an IKN-community is needed. Our method ﬁnd IKN-
communities among all 2(n − 1) vertex subsets partitioned
by one of n−1 cuts represented by a Gomory-Hu tree [10]. A
Gomory-Hu tree of a connected graph G(V, E) is a tree with
a set of vertices V in which every cut (C, V −C) obtained by
removing one edge (s, t) is also a s-t minimum cut in G. It
is known that a Gomory-Hu tree can be created eﬃciently
by executing maximum ﬂow algorithms n − 1 times.

According to our preliminary experiments, partitioning by
our method divided the pages retrieved by keyword search
into several diﬀerent categories to some extent.

2. WEB COMMUNITIES

2.1 Deﬁnition

Let an undirected graph G(V, E) be a graph in which each
vertex represents a Web page and each edge represents a link
between two distinct pages. Assume that a weight wuv(=
wvu) ≥ 0 is given to each pair of vertices u and v, and
wuv = 0 if there is no edge between u and v. A weight

wuv for a pair of vertices u and v can be any value when an
edge exists between them, but we assume that it is 1 unless
explicitly stated otherwise.

Flake, Lawrence and Giles [2] deﬁned a web community,
which we call an FLG-community here, in terms of undi-
rected graphs as follows.

Definition 1

(Flake, Lawrence and Giles [2]). An
FLG-community is a vertex subset C ⊂ V that satisﬁes the
X
following Condition 1.

X

wuv ≥

wuv for all u ∈ C.

Condition 1.

v∈V −C

and only C3 is an IKN-community. Note that C1, C2 and
C3 are strict FLG-communities. The following proposition
ensures that if C is an IKN-community, C ∪ {v} for any
v (cid:8)∈ C and C −{v} for any v ∈ C is not an IKN-community,
which means that boundary ambiguity is reduced.

Proposition 1. For any two distinct IKN-communities
C1 and C2, their symmetric diﬀerence contains at least two
vertices.

Proof. Let u (cid:8)∈ C1 and C2 = C1∪{u}. Since C2 satisﬁes
wuv =
wuv, which contradicts the assumption that C1

P
v∈V −C2

P
v∈C2

P
v∈C1

(cid:2)
Condition 1

P
v∈V −C1

wuv =

wuv >

,

satisﬁes Condition 2.

v∈C

s

2.2 How to Find Web Communities

u

v

t

s

C1

C2

t

C4

C3
s

t

C3 C4 C5

C2

C1

Figure
1:
C1, C2, ..., C5.

Example

of

FLG-Communities

This deﬁnition has the problem of boundary ambiguity.
For example, in the graph of Figure 1, C1, C2, C3, C4 and
C5 are all FLG-communities, though they are essentially the
same densely connected part of the graph. This raises the
problem of boundary ambiguity when we want to extract
one community for one densely connected part. Therefore,
we propose a stricter deﬁnition as follows.

Definition 2. An IKN-weak-community is a vertex
subset C ⊂ V that satisﬁes Condition 1 and the following
Condition 2.

Condition 2.

wuv ≤

wuv for all u ∈ V − C.

Definition 3. An IKN-community is a vertex subset
and Condi-

C ⊂ V that satisﬁes the following Condition 1
(cid:2)
tion 2.

(cid:2).
Condition 1

wuv >

wuv for all u ∈ C.

X

v∈C

X

v∈C

X

v∈V −C

X

v∈V −C

Flake, Tarjan and Tsioutsiouliklis [3] consider a community
(cid:2)
only. Here, we call such com-
deﬁnition using Condition 1
munities strict FLG-communities.

Note that

{C : C is an IKN-community}

⊆ {C : C is an IKN-weak-community}
⊆ {C : C is an FLG-community}.

The whole set V and the empty set ∅ are trivial IKN-commu-
nities. Vertex subsets C3, C4 and C5 are IKN-weak-commun-
ities among 5 FLG-communities C1, C2, ..., C5 in Figure 1,

Figure 2: C2 and C4 are communities that are not
found by an s-t maximum ﬂow algorithm.

Flake, Lawrence and Giles proposed a method that uses
a maximum ﬂow algorithm to ﬁnd an FLG-community. As
shown by them, it is a clear fact that an s-t maximum ﬂow
algorithm fails to identify an FLG-community C which in-
cludes a vertex s and excludes a vertex t, when the number
of edges between C and V − C is larger than the number
of edges s# between s and C − {s}, or the number of edges
t# between t and V − C − {t}. Then, when the number of
edges between C and V − C is smaller than both s# and t#,
can C identiﬁed by an s-t maximum ﬂow algorithm? The
answer is no. In the case of the left graph in Figure 2, C1
and C2 satisfy the condition but the FLG-community found
by an s-t maximum ﬂow algorithm is C1 only. In the case
of the right graph in Figure 2, C4 satisﬁes the condition but
the found set is C3, which is not even an FLG-community.
These examples indicate the following two facts for com-
munities C that include s, exclude t, and have the number
of edges between C and V − C which is smaller than both
s# and t#.

• Not all such communities C can be found by an s-t

maximum ﬂow algorithm.

• Non-FLG-communities can be found by an s-t maxi-
mum ﬂow algorithm even if such communities C exist.

The second fact make us reluctant to use the algorithm for
ﬁnding FLG-communities.

= (V, E(cid:2)

maximum ﬂow algorithm.

In the followings, we make clear what can be found by a
Let G(cid:2)

) be a directed graph generated from G by
replacing each undirected edge (u, v) to two directed edges
(u, v) and (v, u). Given two vertices s and t, let fs,t denote a
maximum ﬂow [9] from s to t when the capacity of each edge
(u, v) is wuv. We deﬁne S(fs,t) as the subset of vertices that
are reachable from s in the residual graph [9] of G(cid:2)
for fs,t.
Note that a residual graph of G(cid:2)
) for f is deﬁned as

= (V, E(cid:2)

the graph that is composed of all vertices and the edges (u, v)
with positive residual capacity ruv = wuv − f (u, v) + f (v, u).
We call an IKN-community that includes s and excludes t
an s-t IKN-community. If a subset of vertices that includes s
(cid:2)
and excludes t satisﬁes Condition 1
and Condition 2 except
s and t, then we call the subset an s-t quasi-IKN-community.
Then, the following proposition holds.

v∈V

v∈V

wuv =

≤

=

≤

fs,t(v, u)

fs,t(v, u)

fs,t(u, v)

v∈V −S(fs,t)

X
X

Proposition 2. S(fs,t) is an s-t quasi-IKN-community.3
Proof. Let u ∈ S(fs,t) and u (cid:8)= s. Since there is no
edge from u to any vertices in V − S(fs,t) in the residual
graph for fs,t, fs,t(u, v) = wuv and fs,t(v, u) = 0 hold for all
v ∈ V − S(fs,t). Thus,X
X
v∈V −S(fs,t)
fs,t(u, v) =
X
X
v∈S(fs,t)
P
v∈S(fs,t)
v∈V −S(fs,t) wuv =

X
P
v∈S(fs,t)
v∈S(fs,t) wuv holds,
holds. If equality
fs,t(u, v) = 0 and fs,t(v, u) = wvu hold for all v ∈ S(fs,t),
which means that there is no edge from any vertices in
S(fs,t) to u in the residual graph. This contradict the fact
that u belongs to S(fs,t). Thus, all vertices in S(fs,t) − {s}
(cid:2)
satisﬁes Condition 1
Similarly, it can be proved that all vertices in V −S(fs,t)−
{t} satisﬁes Condition 2.

P
P
P
v∈V fs,t(s, v) =
P
P
|fs,t| and
v∈V fs,t(t, v) + |fs,t| =
v∈V fs,t(v, t) hold in-
v∈V fs,t(v, u), where |fs,t| is
v∈V fs,t(u, v) =
stead of
the value of ﬂow fs,t. Therefore, S(fs,t) might not be an s-t
IKN-community.

Remark 1. For u = s, t,

wvu =

wuv

.

P
v∈V fs,t(v, s)+

Remark 2. Cut (S(fs,t), V − S(fs,t)) is one of the s-t
minimum cuts [9], but sets C and V − C for an s-t min-
imum cut (C, V − C) might not be s-t and t-s quasi-IKN-
communities. For example, cut C4, V − C4 in Figure 1 is
an s-t minimum cut but neither of them is an s-t or t-s
quasi-IKN-community because u for C4 and v for V − C4
(cid:2)
. But for all s-t minimum cut
do not satisfy Condition 1
(C, V − C), both C and V − C are s-t quasi-IKN-weak-
communities, where an s-t quasi-IKN-weak-community is a
vertex subset that includes s, excludes t and satisﬁes Condi-
tion 1 and Condition 2.

Note that Proposition 2 indicates that we only have to
(cid:2)
and t satisﬁes Condition 2
check that s satisﬁes Condition 1
in order to know whether S(fs,t) is an IKN-community or
not.

As shown above, an s-t maximum ﬂow algorithm only
guarantees that a found set is an s-t quasi-IKN-community,
and an eﬃcient algorithm that ﬁnds s-t IKN-community has
not been known yet. Note that s-t quasi-IKN-communities
always exist but s-t IKN-communities might not exist.
3A part of this proposition, namely, a claim that all vertices
in S(fs,t)−{s} satisfy Condition 1
(cid:2)
, has been already proved
by Flake, Tarjan and Tsioutsiouliklis [3].

In the followings, we show one evidence that the prob-
lem of ﬁnding an s-t IKN-community looks computationally
hard. The problem can be formalized as the following in-
teger program that is obtained by adding conditions to an
integer program [10] in a formalization of the minimum cut
problem, of which LP-relaxation is the LP-dual program of
a linear program in a formalization of the maximum ﬂow
problem.

X

Problem 1. Minimize

subject to

wuvduv

(u,v)∈E(cid:1)

duv − pu + pv ≥ 0 for (u, v) ∈ E(cid:2)
X
X

ps − pt ≥ 1
wuvduv ≥ − 1
2
v:(u,v)∈E(cid:1)
wuvduv ≥ − 1
2
u:(u,v)∈E(cid:1)

−
v:(u,v)∈E(cid:1)
−
u:(u,v)∈E(cid:1)

X
X

wuv for u ∈ V

wuv for v ∈ V

duv ∈ {0, 1} for (u, v) ∈ E(cid:2)
pu ∈ {0, 1} for u ∈ V

(1)

(2)

(3)

(4)

(5)
(6)

The following proposition holds.
Proposition 3. Problem 1 has a feasible solution. ⇔ An

s-t IKN-weak-community exists.

Proof. (⇒) Let {p∗

u, d∗
let C = {u : p∗
optimal solution.
and t (cid:8)∈ C because p∗
s − p∗

that

u,v : u ∈ V, (u, v) ∈ E(cid:2)} be an
u = 1}. Note that s ∈ C
t ≥ 1. Then, the optimality leads

d∗
uv =

u = 1 and p∗

1 if p∗
0 otherwise.

v = 0

X

v∈V

wuv =

wuvd∗

uv ≤ 1
2

X

v∈V

wuv

For u ∈ C, X

v∈V −C

v ∈ V − C, X

holds by Inequality (3). Thus, C satisﬁes Condition 1. For

X

u∈V

wuv =

wuvd∗

uv ≤ 1
2

X

u∈V

wuv

u∈C

holds by Inequality (4). Thus, C satisﬁes Condition 2.
(⇐) For an s-t IKN-community C, set pu for u ∈ V and duv
for (u, v) ∈ E(cid:2)

as follows.




pu =

duv =

1 if u ∈ C
0 otherwise
1 if pu = 1 and pv = 0
0 otherwise.

Then, pu for u ∈ V and duv for (u, v) ∈ E(cid:2)
solution of Problem 1.

are a feasible

The following is the LP-relaxation of Problem 1.

Problem 2. Minimize

wuvduv

X

(u,v)∈E(cid:1)

subject to

duv − pu + pv ≥ 0 for (u, v) ∈ E(cid:2)
X
X

ps − pt ≥ 1
wuvduv ≥ − 1
2
v:(u,v)∈E(cid:1)
wuvduv ≥ − 1
2
u:(u,v)∈E(cid:1)

−
v:(u,v)∈E(cid:1)
−
u:(u,v)∈E(cid:1)

duv ≥ 0 for (u, v) ∈ E(cid:2)
pu ≥ 0 for u ∈ V

X
X

wuv for u ∈ V

wuv for v ∈ V

C1

C4

C3

C2

(7)
(8)

(9)

(10)

(11)
(12)

For the corresponding LP-relaxation of the minimum cut
problem, the conditions represented by Inequalities (9) and
(10) are not needed, and it has been proved that each coor-
dinate of every extreme point solution is 0 or 1 [10], which is
not true for the Problem 2. Actually, the optimal solutions
of Problem 1 do not coincide with those of Problem 2 as
shown in Figure 3.

As hardness results on ﬁnding an s-t IKN-community,
In [8],
stronger results have been proved very recently.
NP-completeness was proved for the problem of deciding
whether an s-t IKN-community (IKN-weak-community) ex-
ists or not for given s and t even if weights are restricted
to be 1. Flake, Tarjan and Tsioutsiouliklis [3] also proved
NP-completeness for the problem of deciding whether an
IKN-community (IKN-weak-community) exists or not in a
given graph, which implies NP-completeness of the above s-
t IKN-community (IKN-weak-community) problem without
restriction on weights.

The following proposition, which claims that an IKN-
community can be constructed from a set satisfying only
(cid:2)
or Condition 2, may help the task of Web com-
Condition 1
munity discovery. The constructed set might be a whole set
or an empty set.

Proposition 4. (1) For any subset C ⊆ V that satisﬁes
(cid:2)
, the minimum IKN-community including C can
Condition 1
be constructed.
(2) For any subset C ⊆ V that satisﬁes Condition 2, the
maximum IKN-community included in C can be constructed.
Proof. (1) Let Bout(C) denote the set of vertices in
V − C that does not satisfy Condition 2. Let C0 = C,
and deﬁne Ci+1 as Ci ∪ Bout(Ci). Then, Ci+1 also satisﬁes
(cid:2)
when Ci satisﬁes that condition. Since C0 sat-
Condition 1
isﬁes the condition, all Ci satisfy it. The sequence C0, C1, ...
is monotonically increasing and |V | < ∞, so there exists n0
such that Cn = Cn0 for all n ≥ n0. Then, Cn0 is an IKN-
community because Bout(Cn0 ) = ∅. Since the minimum
community including Ci trivially contain Bout(Ci), Cn0 is
the minimum IKN-community including C.
(2) This can be proved similarly.

(cid:2)
If both of two sets C1 and C2 satisfy Condition 1

, then
C1 ∪ C2 also satisﬁes that condition, thus we can also con-
struct the minimum IKN-community containing both of them.
Similarly, we can ﬁnd the maximum IKN-community con-
tained in both of two sets that satisfy Condition 2. There-
fore, diﬀerent IKN-communities can be found by using a set
of IKN-communities. (See Figure 4.)

Figure 4: C3 is the minimum IKN-community con-
taining C1 ∪ C2. C1 is the maximum IKN-community
contained in C3 ∩ C4.

3. GRAPH PARTITIONING BY
COMMUNITY TOPOLOGY

3.1 Deﬁnition
Let C be a class of subsets of V in a graph G = (V, E). For
each vertex u, deﬁne the class U(u) of neighborhoods of u as
the set of subsets in C that contain u, that is, U(u) = {C :
C ∈ C, u ∈ C}. Consider the following equivalence relation
R:

uRv def⇔ U(u) = U(v).

We call partitioning by this equivalence relation partitioning
by C. In this paper, we consider partitioning by the class of
IKN-communities.

By regarding each equivalence class as one vertex, we can
generate a contracted graph. We can obtain a higher level
partitioning by the class of IKN-communities in the con-
tracted graph. This procedure can be repeated until every
equivalence class becomes composed of only one vertex.

In this paper, we propose a hierarchical partitioning by
the class of IKN-communities through repeating partitioning
and contraction.

See Figure 5 for an example of partitioning by the class of
IKN-communities and a contracted graph for a partitioning.

G

G’

1

1

1

1

2

2

2

2

2

1

Figure 5: Left: Partitioning by the class of IKN-
communities (Every edge weight is one.), Right:
Contracted graph of the left graph.

1

0.5

0.5

s

0

0

0

0.5

0.5

0.5

0

0

0
0

0.5

0.5

0

0

0.5

0.5

0.5

0
0.5

0

0

0

0.5

0

0

0.5

0

0.5

t

s

1

1

0

0

0

0

1

1

1

0

0

0
0

1

0

1

1

1

0

0

0

0

0

0

0

0

0

0

0

0

0

t

Figure 3: Right: Optimal solution of Problem 2 (value of objective function:1), Left: Optimal solution of
Problem 1 (value of objective function:2). Bold numbers represent pu, and italic numbers represent duv. Note
that duv for each edge (u, v) directed to left, which is 0, is omitted.

3.2 Efﬁcient Algorithm for Partitioning

Considering NP-completeness for the problem of deciding
whether an s-t IKN-community exists or not for arbitrary
two vertices s and t, partitioning by the whole class of IKN-
communities is not practical. Here, we propose a method
that ﬁnds a subclass of IKN-communities eﬃciently and thus
generates a coarse partitioning by the subclass.

The maximum ﬂow algorithms are eﬃcient but IKN-com-
munities might not be found by them as commented in Re-
mark 1. However, the sets found by them are always s-t
quasi-IKN-communities C, so we only have to check that
(cid:2)
the source s satisﬁes Condition 1
and the sink t satisﬁes
Condition 2 to decide whether C is an IKN-community or
not. Here, we consider the problem of ﬁnding the subclass
of IKN-communities that can be found by an s-t maximum
ﬂow algorithm for all pairs of vertices s and t.
For an undirected graph G(V, E) with n vertices, existence
of a set D of n − 1 cuts that satisﬁes the following property
is known [10].
Property 1 For arbitrary two vertices s and t, there exists
Furthermore, there exists a set D that has Property 1 and is
represented by a tree T called a Gomory-Hu tree [10] which
is composed of vertices in V and n − 1 edges representing
n−1 cuts in D. A Gomory-Hu tree can be eﬃciently created
by repeatedly using a maximum ﬂow algorithm n− 1 times.
We propose a method that ﬁnds IKN-communities among
the sets partitioned by the n − 1 minimum cuts represented
by a Gomory-Hu tree.

an s-t minimum cut in D.

Note that there might be minimum cuts which are not
represented by one Gomory-Hu tree, and there might exist
other Gomory-Hu trees representing diﬀerent set of mini-
mum cuts for the same graph. Thus, our proposed method
does not check whether S(fs,t) is an IKN-community for all
s, t ∈ V .
In order to raise the possibility of ﬁnding IKN-
communities, we adopt the following heuristics.

Deﬁne T (fs,t) as the set of vertices from which t is reach-
able in the residual graph for a ﬂow fs,t. Then, T (fs,t) can
be also proved to be a t-s quasi-IKN-community. Note that
T (fs,t) can coincide with V − S(fs,t) but is diﬀerent gener-
ally. In the process of constructing a Gomory-Hu tree, we
check both sets S(fs,t) and T (fs,t) after every ﬁnding maxi-
mum ﬂow fs,t, and adopt the one that is an IKN-community
as a minimum cut, if either S(fs,t) or T (fs,t) is an IKN-
community.

For example, the leftmost graph in Figure 6 has Gomory-
Hu trees expressed by the bottom graphs in the ﬁgure that
represent diﬀerent sets of minimum cuts, which are also
drawn by broken lines in the corresponding top graphs of

0

1

2

3

5

4

0

1

0

1

3

2

5

3

2

3
3
3
5

2
2

4

4

0

1

0

1

2

3

5

3

2

2

2

3
3
3

5

4

4

Figure 6: Example of Gomory-Hu trees representing
diﬀerent set of minimum cuts.

the ﬁgure. Note that the middle Gomory-Hu tree does not
have the minimum cut {0, 1}, {2, 3, 4, 5}, but the rightmost
one does, where set {2, 3, 4, 5} is an IKN-community. Note
that, for this graph, the rightmost Gomory-Hu tree is con-
structed by the above heuristics.

4. PRELIMINARY EXPERIMENTS

Keyword
Level
#Vertex
#Edge
#(Isolated vertex)
#(Connected component)
#IKN-community
#(Equivalence class)

learning theory
1
366
147
258
4
12
12

0
2919
6015
240
22
117
126

jaguar

0
2834
19226
377
52
147
182

1
559
169
420
9
20
27

Table 1: The number of vertices, edges, isolated
vertices, and connected components (that are not
isolated vertices) in two graphs created by the pro-
cedure Subgraph, and the number of found IKN-
communities (that are not connected components
themselves), and equivalence classes (that are not
isolated vertices) partitioned by the class of the
found IKN-communities.

We conducted experiments on graph partitioning by a
subclass of IKN-communities, using subgraphs of the WWW
that are composed of the pages related to given keywords.
For given keywords, we construct a subgraph by using the
Subgraph procedure proposed by Kleinberg [6], which re-
trieves t pages by using a search engine and adds all pages
that are linked from or linking to at least one of them,
though the number of pages linking to is restricted within

(#pages:1590)

0 tip.psychology.org (Theory Into Practice (TIP))
2 www.usask.ca/education/coursework/802papers/mergel/brenda.htm (Learning Theories of Instructional Design)
4 www.funderstanding.com/about learning.cfm (Funderstanding - About Learning)
other 928 pages(45 pages)
1 tip.psychology.org/theories.html ( TIP: The Theories )
other 10 pages(0 pages)
3 www.ozline.com/learning/theory.html (ozline - Working the Web for Education)
other 58 pages(0 pages)
7 www.exploratorium.edu/IFI/resources/research/constructivistlearning.html (Constructivist Learning Theory)
other 2 pages(0 pages)
8 www.educationau.edu.au/archives/cp/04.htm (Learning Theories)
other 7 pages(0 pages)

other 53 partitions

(#pages:656)

10 www.learningtheory.org (COLT: Computational Learning Theory)
59 www.crm.es/Activities/Act2003-04/LearningTheory/LearningTheoryhome.htm (Mathematical Foundation of Learning Theory)
61 theory.lcs.mit.edu/COLT-98
other 462 pages(9 pages)
19 plato.stanford.edu/entries/learning-formal (Formal Learning Theory)
other 2 pages(0 pages)
43 www.cis.udel.edu/ case/colt.html ( John Case’s COLT Page)
other 19 pages(0 pages)
51 liinwww.ira.uka.de/bibliography/Ai/colt.html (Bibliography on Computational and Algorithmic Learv...)
other 8 pages(0 pages)
52 www.esat.kuleuven.ac.be/sista/natoasi/ltp2002.html (NATO-ASI LTP2002)
other 15 pages(0 pages)

other 15 partitions

(#pages:179)

35 w4.evectors.it/itEntDirectory/topic?topic=learning theory (w4)
106 www.unimelb.edu.au/HB/subjects/468-110.html (468-110 Advanced Learning Theory)
other 125 pages(0 pages)

other 6 partitions

(#pages:1)

40 psych.fullerton.edu/jmearns/book3.htm (Applications of a Social Learning Theory of Personv...)

(#pages:6)

42 www.acm.org/sigchi/chi96/proceedings/papers/Soloway/es txt.htm (Learning Theory in Practice: Case Studies of Learv...)
other 4 pages(0 pages)

other 1 partitions
other 265 partitions

Figure 7: Result for keywords “learning theory.”

d pages. In our experiment, we used search engine Google
(www.google.co.jp), and set t and d to 200 and 50, respec-
tively. Note that we removed all intrinsic links [6], namely,
links to pages of the same domain, as Kleinberg did. By the
procedure Subgraph, graphs with the number of vertices,
edges, isolated vertices and connected components shown in
Table 1 are obtained for two keywords “learning theory”
and “jaguar”.

We hierarchically partitioned the obtained graphs by us-
ing our proposed graph partitioning algorithm two times.
Namely, in the level-1 partitioning, we used a contracted
graph that is created by regarding each equivalence class
obtained in the level-0 partition as one vertex. As shown
in Table 1, 117 and 147 IKN-communities are found in the
level-0 partitioning, and 12 and 20 IKN-communities are
found in the level-1 partitioning.

The results of hierarchical partitioning for the two graphs

are shown in Figure 7 and Figure 8. We ranked each par-
tition by the highest Google rank of the pages included in
the partition.
In terms of this ranking, the ﬁgures show
the top 5 level-1 partitions and the top 5 level-0 partitions
for each of those level-1 partitions. The pages accompanied
with their URLs and titles are ones of which Google rank is
within 200 and is within the top 3 among the members of
each level-0 equivalence class. The number of pages whose
URLs and titles are not described is shown after the word
“other”, and the number of those pages whose Google rank
is within 200 is also shown in the following parentheses.

Figure 7 is the result for keywords “learning theory”.
There are mainly two learning theories, one is in the area
of education and psychology, the other is computational
learning theory. The second level-1 partition consists of
the pages related to computational learning theory, and the
other level-1 partitions consist of the pages related to edu-

(#pages:613)

0 www.jaguar.com/global/default.htm (Jaguar Cars)

120 jaguar.anort.com
152 chulkov.com/jaguar/jaguar.htm (&#160;JAGUAR X-Type Best in the world the automobiv...)
other 66 pages(0 pages)
2 www.jaguar-racing.com
other 34 pages(0 pages)
3 www.jaguar-racing.com/uk/ﬂash
other 6 pages(0 pages)
6 www.jaguarcars.com (Jaguar Cars)
other 44 pages(0 pages)
7 www.jaguarcars.com/jp
8 www.jag-lovers.org (Jag-lovers - here to provide everything for the Jav...)
9 www.jag-lovers.org/brochures (Jag-lovers unique original Brochures and Adverts cv...)
other 207 pages(30 pages)

other 33 partitions

(#pages:1)

1 www.jaguar.com/de/de/home.htm (home)

(#pages:984)

4 www.apple.com/macosx (Apple - Mac OS X)
5 www.apple.com/macosx/overview (Apple - Mac OS X - Overview)

44 www.macattorney.com/tutorial.html (OS X 10.2 Jaguar Troubleshooting)
other 522 pages(7 pages)
11 www.schrodinger.com (Schr&ouml;dinger)
other 12 pages(0 pages)
12 www.schrodinger.com/Products/jaguar.html (Schr&ouml;dinger: Jaguar Program)
other 10 pages(0 pages)
16 www.jaguarmodels.com (Jaguar Models - Main Page (resin model kits))
other 4 pages(0 pages)
35 www.oneworldjourneys.com/expeditions/jaguar (One World Journeys — Jaguar: Lord of the Mayan Junv...)
other 5 pages(0 pages)

other 25 partitions

(#pages:7)

19 dspace.dial.pipex.com/agarman/jaguar.htm (Jaguar)
other 1 pages(0 pages)
37 www.bluelion.org/jaguar.htm (Panthera onca)
other 2 pages(0 pages)

other 1 partitions

(#pages:1)

20 dspace.dial.pipex.com/agarman/bco/jaguar.htm (Jaguar)

other 443 partitions

Figure 8: Result for keyword “jaguar.”

cational learning theory, though those partitions are small
except the ﬁrst one. The number preceding each URL shows
its Google rank, and you can see that the top 10 pages
of Google search result is biased toward educational learn-
ing theory. Our result indicates that partitioning by IKN-
communities can be used to produce balanced search results.
Figure 8 is the result for keyword “jaguar”. The top 2
level-1 partitions are related to the automobile, the third
one is mainly composed of pages related to the computer and
the fourth and ﬁfth ones are related to the animal. In the
computer partition, the ﬁrst level-0 partition, whose mem-
bers are in majority, is related to the Mac OS, the second
and third level-0 partitions consist of the pages of a software
company producing a package called Jaguar, and the fourth
and ﬁfth level-0 small partitions are composed of pages not
related to the computer.

5. CONCLUDING REMARKS

The method ﬁnding IKN-communities on the way to con-
structing a Gomory-Hu tree is computationally eﬃcient. It
runs in O(mn2 log n) time4 by using a maximum ﬂow al-
gorithm developed by Sleator and Tarjan [9], where m is
the number of edges and n is the number of vertices. How-
ever, there might be many IKN-communities that cannot
be found by this method. As a result, partitions obtained
by the method are possibly too coarse. Therefore, the algo-
rithm that can eﬃciently ﬁnd more IKN-communities should
be developed. One candidate of such algorithms is a method
that solves Problem 1 using some optimization method.

The eﬃcient method based on edge betweenness devel-

4This computational time can be reduced by using a faster
algorithm [5], though its time bound is more complicated.

oped by Girvan and Newman [4] may be used to ﬁnd IKN-
communities. They conducted experiments for computer-
generated graphs, in which 128 vertices are partitioned into
4 groups with 32 vertices, and each vertex is connected to
16 other vertices by randomly-generated edges, k of them
are vertices in other groups and 16 − k of them in the same
group. According to the reported result, their algorithm
extracted 4 groups completely when k ≤ 6. Note that 4
groups in their graphs are IKN-communities when k ≤ 7.
Their method does not guarantee that any vertex satisﬁes
the conditions of IKN-communities for any vertex subset ob-
tained by the method, and the method can not ﬁnd overlap-
ping IKN-communities. But their method runs in O(mn2)
time and has possibility that larger IKN-communities can be
found, so we think that further study on using their method
to ﬁnd IKN-communities should be done.

6. ACKNOWLEDGEMENTS

We thank two doctor-course students in Tokyo Institute of
Technology, Mr. Shigezumi and Mr. Yamamoto, and their
supervisor Prof. Watanabe for having interest in our pro-
posed problems and proving hardness results on them. We
also thank anonymous reviewers for their helpful comments.

7. REFERENCES
[1] S. Brin and L. Page. The anatomy of a large-scale

hypertextual web search engine. Computer Networks,
30(1-7):107–117, 1998.

[2] G. Flake, S. Lawrence, and C. Giles. Eﬃcient

identiﬁcation of web communities. In Proceedings of
the 6th ACM SIGKDD International Conference on
Knowledge Discovery and Data Mining, pages
150–160, 2000.

[3] G. Flake, R. Tarjan, and K. Tsioutsiouliklis. Graph

clustering and mining cut trees. Internet Mathematics,
1(3):355–378, 2004.

[4] M. Girvan and M. Newman. Community structure in
social and biological networks. Proc. Natl. Acad. Sci.
USA, 99:7821–7826, 2002.

[5] V. King, S. Rao, and R. Tarjan. A faster deterministic

maximum ﬂow algorithm. Journal of Algorithms,
17:447–474, 1994.

[6] J. Kleinberg. Authoritative sources in a hyperlinked

environment. Journal of the ACM, 46(5):604–632,
1999.

[7] R. Kumar, P. Raghavan, S. Rajagopalan, and

A. Tomkins. Trawling the web for emerging
cyber-communities. Computer Networks,
31(11-16):1481–1493, 1999.

[8] A. Nakamura, T. Shigezumi, and M. Yamamoto. On

NK-community problem. In Proceedings of the Winter
LA Symposium 2005, pages 12.1–12.8, 2005.

[9] R. Tarjan. Data Structure and Network Algorithm.

Society for Industrial and Applied Mathematics, 1983.

[10] V. Vazirani. Approximation Algorithms.

Springer-Verlag, 2001.

