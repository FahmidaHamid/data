Facetedpedia: Dynamic Generation of Query-Dependent

Faceted Interfaces for Wikipedia

Chengkai Li, Ning Yan, Senjuti B. Roy, Lekhendro Lisham, Gautam Das

Department of Computer Science and Engineering

University of Texas at Arlington

Arlington, TX 76019

cli@uta.edu,{ning.yan,senjuti.basuroy,lisham.singh}@mavs.uta.edu,gdas@uta.edu

ABSTRACT

This paper proposes Facetedpedia, a faceted retrieval system for
information discovery and exploration in Wikipedia. Given the set
of Wikipedia articles resulting from a keyword query, Facetedpedia
generates a faceted interface for navigating the result articles. Com-
pared with other faceted retrieval systems, Facetedpedia is fully
automatic and dynamic in both facet generation and hierarchy con-
struction, and the facets are based on the rich semantic information
from Wikipedia. The essence of our approach is to build upon the
collaborative vocabulary in Wikipedia, more speciﬁcally the inten-
sive internal structures (hyperlinks) and folksonomy (category sys-
tem). Given the sheer size and complexity of this corpus, the space
of possible choices of faceted interfaces is prohibitively large. We
propose metrics for ranking individual facet hierarchies by user’s
navigational cost, and metrics for ranking interfaces (each with 
facets) by both their average pairwise similarities and average nav-
igational costs. We thus develop faceted interface discovery algo-
rithms that optimize the ranking metrics. Our experimental evalua-
tion and user study verify the effectiveness of the system.

Categories and Subject Descriptors

H.3.3 [Information Storage and Retrieval]: Information Search
and Retrieval

General Terms

Algorithms, Design, Experimentation, Performance

Keywords

faceted search, data exploration, Wikipedia

1.

INTRODUCTION

Wikipedia has become the largest encyclopedia ever created, with
close to 3 million English articles by far. The prevalent manner in
which the Web users access Wikipedia articles is keyword search.
Keyword search has been effective in ﬁnding speciﬁc Web pages
matching the keywords. Therefore it may well satisfy the users
when they are causally interested in a single topic and use Wikipedia
as a dictionary or encyclopedia for that topic. However, Wikipedia
has now become a primary knowledge source for many casual users
and even an integral component in the knowledge management sys-
tems of businesses for decision making. It is thus typical for a user

Copyright is held by the International World Wide Web Conference Com-
mittee (IW3C2). Distribution of these papers is limited to classroom use,
and personal use by others.
WWW 2010, April 26–30, 2010, Raleigh, North Carolina, USA.
ACM 978-1-60558-799-8/10/04.

to explore a set of relevant topics, instead of targeting a particular
topic, for more sophisticated information discovery and exploratory
tasks. With only keyword search, one would have to digest the
potentially long list of search result articles, follow hyperlinks to
connected articles, adjust the query and perform multiple searches,
and synthesize information manually. This procedure is often time-
consuming and error-prone.

One useful mechanism for information exploration is the faceted
interface, or the so-called hierarchical faceted categories (HFC) [9].
A faceted interface for a set of objects is a set of category hier-
archies, where each hierarchy corresponds to an individual facet
(dimension, attribute, property) of the objects. The user can navi-
gate an individual facet through its hierarchy of categories and ulti-
mately a speciﬁc “property” value if necessary, thus reaching those
objects associated with the categories and the value on that facet.
The user navigates multiple facets and the intersection of the cho-
sen objects on individual facets are brought to the user’s attention.
The procedure hence resembles repeated constructions of conjunc-
tive queries with selection conditions on multiple dimensions.

In this paper we propose Facetedpedia1, a faceted retrieval sys-
tem which is capable of dynamically generating query-dependent
facets for a set of Wikipedia articles. We use the following example
to further illustrate.

Example 1 (Motivating Example): Imagine that a user is explor-
ing information about action ﬁlms. The Facetedpedida system takes
a keyword query, say, “us action ﬁlm”, as the input and obtains a
ranked list of search result articles. It will create a faceted interface,
as shown in Figure 1. The system dynamically derives  facets (re-
gion (A)) for covering the top  result articles. For instance, for
“us action ﬁlm”, these dimensions (facets) can include Companies,
Actors, and so on. Each facet is associated with a hierarchy of
categories. Each article can be assigned to the nodes in these hier-
archies, with each assignment representing an attribute value of the
article. On each facet, the user can navigate through the category
path which is formed by parent-child relationships of Wikipedia cat-
egories. 2 The interface also shows the navigation paths (region
(B)) and article titles (region (C)). When the user clicks one article
title, the corresponding Wikipedia article would be shown. (This
part of the interface is omitted.)

Here in Figure 1 we only show three facets from the generated in-

terface in region (A): (1) Film_production_companies_of_the_United
_States; (2) American_ﬁlm_actors; (3) American_television_actors.
When the user selects any facet items for navigation in region (A),
a user navigational path is added in region (B). Here we show only

1http://idir.uta.edu/facetedpedia/
2A Wikipedia article may belong to one or more categories. These
categories are listed at the bottom of the article.

WWW 2010 • Full PaperApril 26-30 • Raleigh • NC • USA651Figure 1: The faceted retrieval interface of Facetedpedia.

one path: Films_by_subgenre>Action_ﬁlms_by_genre>Science_
ﬁction_action_ﬁlms, which means the user selected facet root Films_
by_subgenre, then its subcategory Action_ﬁlms_by_genre, and the
subcategory of subcategory, Science_ﬁction_action_ﬁlms. There
are thirteen articles satisfying the chosen navigational paths, and
they are shown in region (C). In this way, the user ﬁlters the large
number of result articles and ﬁnds those matching her interests.

1.1 Overview of Challenges and Solutions

We study the problem of dynamic discovery of query-dependent
faceted interfaces. Given the set of top- ranked Wikipedia articles
as the result of a keyword search query, Facetedpedia produces an
interface of multiple facets for exploring the result articles.

We focus on automatic and dynamic faceted interfaces. The
facets could not be pre-computed due to the query-dependent na-
ture of the system.
In applications where faceted interfaces are
deployed for relational tuples or schema-available objects, the tu-
ples/objects are captured by prescribed schemata with clearly de-
ﬁned dimensions (attributes), therefore a query-independent static
faceted interface (either manually or automatically generated) may
sufﬁce. By contrast, the articles in Wikipedia are lacking such pre-
determined dimensions that could ﬁt all possible dynamic query re-
sults. Therefore efforts on static facets would be futile. Even if the
facets can be pre-computed for some popular queries, say, based
on query logs, the computation must be automatic and dynamic.
Given the sheer size and complexity of Wikipedia and its rapid
growth, a manual approach would be prohibitively time-consuming
and cannot scale to stay up-to-date. The main challenges in realiz-
ing Facetedpedia are summarized as follows:
Challenge 1: The facets and their category hierarchies are not
readily available.

The concept of faceted interface is built upon two pillars: facets
(i.e., dimensions or attributes) and the category hierarchy associ-
ated with each facet. The deﬁnition of “facet” itself for Wikipedia
does not arise automatically, leaving alone the discovery of a faceted
interface. Therefore we must answer two questions: (1) facet iden-
tiﬁcation– What are the facets of a Wikipedia article?; and (2) hier-
archy construction– Where does the category hierarchy of a facet
come from?
Challenge 2: We need metrics for measuring the “goodness” of
facets both individually and collectively.

We need to ﬁnd facets useful for user navigation. A goodness
metric for ranking the facets is needed. The problem gets even more
complex because the utilities of multiple facets do not necessarily
build up linearly– Since the facets in an interface should ideally
describe diverse aspects of the result articles, a set of individually
“good” facets may not be “good” collectively.
Challenge 3: We must design efﬁcient faceted interface discov-
ery algorithms based on the ranking criteria.

It is infeasible to directly apply the ranking metric exhaustively
on all possible choices, due to the large search space. Furthermore,
the interactions between the facets in a faceted interface make the
computation of its exact cost intractable. Even computing the costs
of individual facets without considering the interactions is non-
trivial, given the size and the complexity of Wikipedia.

1.2 Summary of Contributions and Outline

∙ Concept: Faceted Wikipedia. We propose an automatic and dy-
namic faceted retrieval system for Wikipedia. To the best of our
knowledge, this is the ﬁrst system of its kind. The key philoso-
phy of our approach is to exploit collaborative vocabulary as the
backbone of faceted interfaces. (Section 3)

WWW 2010 • Full PaperApril 26-30 • Raleigh • NC • USA652s
s
e
e
i
i

h
h
c
c
r
r
a
a
r
r
e
e
i
i

h
h

 
 
 
 
f
f
o
o

 
 
 
 
s
s
c
c
i
i
t
t
n
n
a
a
m
m
e
e
s
s

h
c
i
r

w
o
l
l
a
h
s

Endeca
Mercado
[3,7,17]

Facetedpedia

[16]

[8]
[8]

[5,6]

[15]*

d
e
r
e
v
o
c
s
i
d

 
 

y
l
l
a
c
i
t
a
m
o
t
u
a

d
e
n
i
f
e
d
e
r
p

n
n
o
o
i
i
t
t
c
c
u
u
r
r
t
t
s
s
n
n
o
o
c
c
 
 
 
 

y
y
h
h
c
c
r
r
a
a
r
r
e
e
i
i

h
h

[5]

[6]

Facetedpedia

[16]

[8]
[8]

[3,17]
Endeca
Mercado

[7]
[15]*

structured
types  of  dimensions

text

predefined

automatically  discovered

facet  identification

(a)Facet types and semantics.

(b)Automation and dynamism.

* The work does not support hierarchy on facets.

Figure 2: Taxonomies of faceted retrieval systems.

∙ Metrics: Facet Ranking. Based on a user navigation model,
we propose metrics for measuring the “goodness” of facets, both
individually and collectively. (Section 4)

∙ Algorithms: Faceted Interface Discovery. We develop effec-
tive and efﬁcient algorithms for discovering faceted interfaces in
the large search space. (Section 5)

∙ System Evaluation: Facetedpedia. We conducted user study
to evaluate the effectiveness of the system and to compare with
alternative approaches. We also measured its quality and efﬁ-
ciency quantitatively. (Section 6)

2. FACETED RETRIEVAL SYSTEMS: A

COMPARATIVE STUDY

Faceted interface has become inﬂuential over the last few years
and we have seen an explosive growth of interests in its applica-
tion [11, 17, 9, 17, 9, 16, 6, 5, 14, 15, 8, 7, 3]. Commercial
faceted search systems have been adopted by vendors (such as En-
deca, IBM, and Mercado), as well as E-commerce Websites (e.g.,
eBay.com, Amazon.com). The utility of faceted interfaces was in-
vestigated in various studies [11, 9, 12, 17, 10, 12, 13, 9], where it
was shown that users engaged in exploratory tasks often prefer such
result grouping over simple ranked result list (commonly provided
by search engines), as well as over alternative ways of organizing
retrieval results, such as clustering [4, 18, 10].

In this section we present taxonomies to characterize the relevant
faceted retrieval systems and compare them with Facetedpedia. Ex-
isting research prototypes or commercial faceted retrieval systems
mostly cannot be applied to meet our goals, because they either are
based on manual or static facet construction, or are for structured
records or text collections with prescribed metadata. Very few have
investigated the problem of dynamic discovery of both facet dimen-
sions and their associated category hierarchies.

To the best of our knowledge, we are the ﬁrst to propose a query-

dependent faceted retrieval system for Wikipedia. CompleteSearch [2]
supports query completions and query reﬁnement in Wikipedia by
a special type of “facets” on three dimensions that are very differ-
ent from our notion of general facets: query completions matching
the query terms; category names matching the query terms; and
categories of result articles. Recently, a faceted Wikipedia search
interface came out of the DBPedia [1] project around the same time
as our work. The facets there appear to be query-independently
extracted from common Wikipedia infobox attributes, although the
underlying method remains to be proprietary at this moment.

Figure 2(a): Taxonomy by Facet Types and Semantics

Previous systems roughly belong to two groups on this aspect. In
some systems the facets are on relational data (e.g., Endeca, Mer-
cado, [15]) or structured attributes in schemata (e.g., [17, 7, 3]) and

the hierarchies on attribute values are predeﬁned based on domain-
speciﬁc taxonomies. The hierarchies could even be manually cre-
ated, thus could contain rich semantic information. In some other
systems a facet is a group of textual terms, over which the hier-
archy is built upon thesaurus-based IS-A relationships (e.g., [16])
or frequency-based subsumption relationships between general and
speciﬁc terms (e.g., [6, 5]). These systems cannot leverage as much
semantic information. The work [8] is in the middle of Figure 2(a)
since it has both structured dimensions and a subsumption-based
topic taxonomy.

In contrast, Facetedpedia enables semantic-rich facet hierarchies
(distilled from Wikipedia category system) over text attributes (hy-
perlinked Wikipedia article titles).
In the absence of predeﬁned
schemata, it builds facet hierarchies with abundant semantic in-
formation from the collaborative vocabulary, instead of relying on
IS-A or subsumption relationships.

Figure 2(b): Taxonomy by Degree of Automation and Dynamism
When building the two pillars in a faceted interface, namely the
facet and the hierarchy, Facetedpedia is both automatic and dy-
namic, as motivated in Section 1.1. On this aspect, none of the
existing systems could be effectively applied in place of Faceted-
pedia, because none is fully automatic in both facet identiﬁcation
and hierarchy construction.

In some systems (e.g., Endeca, Mercado,

[15, 3, 17, 7]) the
dimensions and hierarchies are predeﬁned, therefore they do not
discover the facets or construct the hierarchy. In [7, 15] a subset
of interesting/important facets are automatically selected from the
predeﬁned ones. In [6, 5] the set of facets are predeﬁned, but the
hierarchies are automatically created based on subsumption. In [8]
only one special facet (a topic taxonomy) is automatically gener-
ated and the rest are predeﬁned.

With respect to the automation of faceted interface discovery, the
closest work to ours is the Castanet algorithm [16]. The algorithm
is intended for short textual descriptions with limited vocabularies
in a speciﬁc domain. It automatically creates facets from a collec-
tion of items (e.g., recipes). The hierarchies for the multiple facets
are obtained by ﬁrst generating a single taxonomy of terms by IS-A
relationships and then removing the root from the taxonomy.

3. FACETED INTERFACE FOR WIKIPEDIA

BY COLLABORATIVE VOCABULARY

In discovering faceted interfaces for Wikipedia, the basis of our
approach is to exploit its user-generated collaborative vocabulary
such as the “grassroots” category system. Even internal Wikipedia
hyperlinks are an instance of collaborative vocabulary in a broader
sense, as they indicate the users’ collaborative endorsement of rela-
tionships between entities. The collaborative vocabulary represents
the collective intelligence of many users and rich semantic informa-
tion, and thus constitutes the promising basis for faceted interfaces.
With regard to the concept of facet dimension, the Wikipedia ar-
ticles hyperlinked from a search result article are exploited as its
attributes. The fact that the authors of an article collaboratively
made hyperlinks to other articles is an indication of the signiﬁ-
cance of the linked articles in describing the given article. This
view largely enriches the semantic information associated with the
result articles. With regard to the concept of category hierarchy,
the Wikipedia category system provides the category-subcategory
relationships between categories, allowing users to go from general
to speciﬁc when specifying conditions. We now formally deﬁne the
concepts in our framework and deliver the problem speciﬁcation.

Deﬁnition 1 (Target Article, Attribute Article): Given a keyword
query , the set of top- ranked Wikipedia articles,  ={1, ..., },

WWW 2010 • Full PaperApril 26-30 • Raleigh • NC • USA653F2

F’2

F1

F3

c1

c2

c3

c4

c6

c7

c8

c9

c1
0

F4

c5

c11

c14

c12

c13

p’1

p’2

p’3 p’4

p’5

p’6

p’7

p’8

p’9

p1

p2

p3

p4

p5

p6

p7

Figure 3: The concept of facet.

F5

supercategory

category of 
attribute article

attribute article
(hyperlinked from 
target article)

target article

are the target articles of . Given a target article , each Wikipedia
article ′ that is hyperlinked from  is an attribute article of . This
relationship is represented as ′ ← . Given  , the set of attribute
articles is ={′
 is an attribute article of
at least one target article ∈ .

}, where each ′

1, ..., ′

Deﬁnition 2 (Category Hierarchy): Wikipedia category hierarchy
is a connected, rooted directed acyclic graph ℋ(ℋ, ℋ, ℰℋ), where
the node set ℋ={} is the set of categories and the edge set ℰℋ=
{99K′} is the set of category()-subcategory(′ ) relationships. The
root category of ℋ, ℋ, is Category:Fundamental. 3

Deﬁnition 3 (Facet): A facet ℱ(, ℱ , ℰℱ ) is a rooted and con-
nected subgraph of the category hierarchy ℋ(ℋ, ℋ, ℰℋ), where
ℱ ⊆ℋ, ℰℱ ⊆ℰℋ, and ∈ℱ is the root of ℱ .

1, . . ., ′

Example 2 (Running Example): In Figure 3 there are 7 target ar-
ticles (1, . . ., 7) and 9 attribute articles (′
9). The category
hierarchy has 14 categories (1, . . ., 14). The ﬁgure highlights 6
facets (ℱ1, . . ., ℱ5, and ℱ ′
2). For instance, 2 is rooted at 2 and
consists of 3 categories (2, 7, 8) and 2 edges (299K7, 299K8).
There are many more facets since every rooted and connected sub-
graph of the hierarchy is a facet. Note that the ﬁgure may give the
impression that edges such as 11 99K14 and 7⇒′
1 are unneces-
sary since there is only one choice under 11 and 7, respectively.
The example is small due to space limitations. Such single outgo-
ing edge is very rare in the real Wikipedia category hierarchy. We
will use Figure 3 as the running example throughout the paper.

The categories in the facet can “reach” the target articles  through

attribute articles . That is, by following the category-subcategory
hierarchy of the facet, we could ﬁnd a category, then ﬁnd an at-
tribute article belonging to the category, and ﬁnally ﬁnd the tar-
get articles that have the attribute. These target articles are called
reachable target articles. A facet is a safe reaching facet if ∀∈ℱ ,
there exists a target article ∈ such that  reaches , i.e., there ex-
ists 99K...⇒′←, a navigational path of ℱ , starting from , that
reaches . In order to capture the notion of “reach”, we formally
deﬁne navigational path as follows.

Deﬁnition 4 (Navigational Path): With respect to the target arti-
cles  , the attribute articles , and a facet ℱ(, ℱ , ℰℱ ), a naviga-
tional path in ℱ is a sequence 1 99K...99K⇒′←, where,

∙ for 1≤≤, ∈ℱ , i.e.,  is a category in ℱ ;
∙ for 1≤≤−1,  99K+1∈ℰℱ , i.e., +1 is a subcategory of
 (in category hierarchy ℋ) and that category-subcategory rela-
tionship is kept in ℱ .
∙ ′∈, and  is a category of ′ (represented as  ⇒ ′);
∙ ∈ , and ′ is an attribute article of  (i.e., there is a hyperlink
 → ′).

3http://en.wikipedia.org/wiki/Category:Fundamental

Given a navigational path 1 99K...99K⇒′←, we say that the
corresponding category path 199K...99K reaches target article 
through attribute article ′, and we also say that category  (for
any 1≤≤) reaches  through ′.
Interchangeably we say  is
reachable from  (for any 1≤≤).

Deﬁnition 5 (Faceted Interface): Given a keyword query , a faceted
interface ={ℱ} is a set of safe reaching facets of the target arti-
cles  . That is, ∀ℱ∈, ℱ safely reaches  .

Example 3 (Navigational Path and Faceted Interface): Continue
the running example. In Figure 3, ={ℱ2, ℱ5} is a 2-facet inter-
face. Two examples of navigational paths are 2 99K8⇒′
3←5
and 5 99K13⇒′
2, ℱ5} is not a valid faceted
interface because ℱ ′
2 is not a safe reaching facet, as category 6
cannot reach any target articles.

9←5. However, {ℱ ′

Based on the formal deﬁnitions, the Faceted Interface Discov-
ery Problem is: Given the category hierarchy ℋ(ℋ, ℋ, ℰℋ), for
a keyword query  and its resulting target articles  and corre-
sponding attribute articles , ﬁnd the “best” faceted interface with
 facets. We shall develop the notion of “best” in Section 4.

4. FACET RANKING

The search space of the faceted interface discovery problem is
prohibitively large. Given the set of  target Wikipedia articles to
a keyword query,  , there are a large number of attribute articles
which in turn have many categories associated with complex hier-
archical relationships. To just give a sense of the scale, in Wikipedia
there are about 3 million English articles with hundreds of millions
of internal links. The category system ℋ contains close to half a
million categories and several million category-subcategory rela-
tionships. By deﬁnition, any rooted and connected subgraph of ℋ
that safely reaches  is a candidate facet, and any combination of
 facets would be a candidate faceted interface. Given the large
space, we need ranking metrics for measuring the “goodness” of
facets, both individually and collectively as interfaces.

Given that a faceted interface is for a user to navigate through
the associated category hierarchies and ultimately reaching the tar-
get articles, it is natural to rank the interfaces by the user’s naviga-
tional cost, i.e., the amount of effort undertaken by the user during
navigation. 4 The “best” -facet interface is the one with the small-
est cost. Therefore as the basis of such ranking metrics, we model
users’ navigational behaviors as follows.

User Navigation Model: A user navigates multiple facets in a -
facet interface. At the beginning, the navigation starts from the
roots of all the  facets. At each step, the user picks one facet and
examines the set of subcategories available at the current category
on that facet. She follows one subcategory to further go down the
category hierarchy. Alternatively the user may select one of the at-
tribute articles reachable from the current category. The selections
made on the  facets together form a conjunctive query. After the
selection at each step, the list of target articles that satisfy the con-
junctive query are brought to the user. The navigation terminates
when the user decides that she has seen desirable target articles.

Example 4 (Navigation in Faceted Interface): Continue the run-
ning example in Figure 3. Consider a faceted interface ={ℱ2, ℱ5}.
A sequence of navigational steps on this interface are in Figure 4.
At the beginning, the user has not selected any facet to explore,
therefore all 7 target articles are available (step 1). Once the user
decides to explore ℱ2 which starts from 2, 7 is ﬁltered out since
it is unreachable from ℱ2 (step 2). The user then selects 5, which

4 [15] also selects facets based on navigational costs, although their
system is of a different nature, as discussed in Section 2.

WWW 2010 • Full PaperApril 26-30 • Raleigh • NC • USA654Step 1

c2

c7

c8

c5

c11

c14

c12

c13

Step 2

c2

c7

c8

c5

c11

c14

c12

c13

Step 3

c2

c5

c11

c7

c8

c14

c12

c13

Step 4

c2

c8

c5

c12

c13

p’1

p’2

p’3

p’6

p’7

p’8

p’9

p’1

p’2

p’3

p’6

p’7

p’8

p’9

p’1

p’2

p’3

p’6

p’7

p’8

p’9

p’2

p’3

p’7

p’8

p’9

Step 5

c2

c5

c8

p’3

c13

p’9

p1

p2

p3

p4

p5

p6

p7

p1

p2

p3

p4

p5

p6

p1

p2

p4

p5

p6

p4

p5

p6

p5

Figure 4: The navigation on a 2-facet interface ℐ = {ℱ2, ℱ5}.

further removes 3 from consideration (step 3). After the user fur-
ther explores ℱ2 by choosing 8 (step 4), 11 is not a choice un-
der 5 anymore because no target articles could be reached by both
2 99K8 and 5 99K11. The user continues to explore ℱ5 by choos-
ing 13 (step 5), which removes ′
2 and also trims down the satis-
factory target articles to {5}. The user may decide she has seen
desirable articles and the navigation stops.

4.1 Single-Facet Ranking

In this section we focus on how to measure the costs of facets
individually. Based on the navigational model, we compute the
navigational cost of a facet as the average cost of its navigational
paths. Intuitively a low-cost path, i.e., a path that demands small
user effort, should have a small number of steps and at each step
only require the user to browse a small number of choices. There-
fore, we formally deﬁne the cost of a navigational path as the sum-
mation of the fan-outs (i.e., the number of choices) at every step, in
logarithmic form. 5

Deﬁnition 6 (Cost of Navigational Path): With respect to the tar-
get articles  , the corresponding attribute articles , and a facet
ℱ(, ℱ , ℰℱ ), the cost of a navigational path in ℱ is

() = 2( (′)) + ࢣ

2( ())

(1)

∈{1,...,}

where =1 99K...99K⇒′←.

In Formula 1,  (′) is the number of (directly) reachable

target articles through the attribute article ′,

 (′) = ∣′ ∣

′ = {∣ ∈  ∧  → ′(i.e., ∃ a hyperlink from  to ′)}

In Formula 1,  () is the fanout of category  in ℱ ,

 () = ∣∣ + ∣∣

where  is the set of attribute articles belonging to ,

 = {′∣′ ∈  ∧  ⇒ ′}

(2)

(3)

(4)

(5)

and  is the set of subcategories of  in ℱ ,

 = {′∣′ ∈ ℱ ∧  99K ′ ∈ ℰℱ }

(6)

Note that we made several assumptions for simplicity of the
model. The cost formula only captures the “browsing” cost. A
full-ﬂedged formula would need to incorporate other costs, such
as the “clicking” cost in selecting a choice and the cost of “back-
ward” navigation when the user decides to change a previous selec-
tion. Furthermore, we assume the user always completes the nav-
igational path till reaching the target articles. In reality, however,
the user may stop in the middle when she already ﬁnds desirable
articles reachable from the current selection of category. We leave
the investigation of more sophisticated models to future study.

5The intuition behind the logarithmic form is: When presented
with a number of choices,
the user does not necessarily scan
through the choices linearly but by a binary search.

Example 5 (Cost of Navigational Path): We continue the running
example. Given =599K12⇒′
8←6, a navigational path of ℱ5
in Figure 3, ()= (5)+ (12)+  (′
=2(3)+2(2)+2(3)=4.17.

8)

Albeit the basis of our facet ranking metrics, the deﬁnition of
navigational cost is not sufﬁcient in measuring the goodness of a
facet. It does not consider such a scenario that a facet cannot fully
reach all the target articles, which presents an unsatisfactory user
experience. In fact, low-cost and high-coverage could be two qual-
ities that compete with each other. On the one hand, a low-cost
facet could be one that reaches only a small portion of the target
articles. On the other hand, a comprehensive facet with high cover-
age may tend to be wider and deeper, thus more costly. Therefore
we must incorporate into the cost formula the notion of “coverage”,
i.e., the ability of a facet to reach as many target articles as possible.
To combine navigational cost with coverage, we penalize a facet by
associating a high-cost pseudo path with each unreachable article.
We then deﬁne the cost of a facet as the average cost in reaching
each target article.

Deﬁnition 7 (Cost of Facet): With respect to the target articles  ,
the cost of a safe reaching facet ℱ(, ℱ , ℰℱ ), (ℱ), is the
average cost in reaching each target article. The cost for a reachable
target article is the average cost of the navigational paths that start
from  and reach the target, and the cost for an unreachable target
is a pseudo cost .

(ℱ) =

1
∣ ∣

× ( ࢣ
∈

(ℱ, ) +  × ∣ − ∣)

(7)

where (ℱ, ) is the average cost of reaching  from ,

(ℱ, ) =

1
∣∣

× ࢣ
∈

()

(8)

where  is the set of navigational paths in ℱ that reach  from ,

 = {∣ =  99K ... ⇒ ′ ← }

(9)

In Formula 7,  is the cost of the aforementioned expen-
sive pseudo path that “reaches” the unreachable target articles, i.e.,
 −, for penalizing a facet for not reaching them. Its value is em-
pirically selected (Section 6) and is at least larger than the highest
cost of any path to a reachable target article.

Example 6 (Cost of Facet): We continue the running example. Fig-
ure 5 shows the costs of the 5 highlighted facets in Figure 3, to-
gether with their category hierarchies and reachable attribute and
It does not show ℱ1 which is Figure 3 itself ex-
target articles.
cluding 6. The costs of facets are obtained by Formula 7, with
=7. (ℱ2)= 1
7 ×(ࢣ∈{1,2,3 ,4,5,6}(ℱ2, )
+×∣ −ℱ2 ∣)= 1
7 ×(16+7×1)=3.286. ℱ2 and ℱ5 achieve
lower costs than other facets. Even though the paths in ℱ4 are
cheap, ℱ4 has higher cost due to the penalty for unreachable target
articles (6 and 7). ℱ1 is even more costly due to its wider and
deeper hierarchy, although it reaches all target articles.

WWW 2010 • Full PaperApril 26-30 • Raleigh • NC • USA655cannot capture the expected properties of reaching target articles
through different dimensions. As a concrete example, consider the
navigational steps of ℱ2 and ℱ3 in Figure 6(b). After the user se-
lects 2 from ℱ2 and then 3 from ℱ3, the available choices become
{7, 8, 9}, which all come from the “dimension”, ℱ3. The same
happens if the user selects 3 and then 2.

Based on the above observation, we propose to capture the over-
lap of the  facets by their average pair-wise similarity. The pair-
wise similarity of two facets is the degree of overlap of their cate-
gory hierarchies and associated attribute articles, deﬁned below.

Deﬁnition 8 (Average Similarity of -Facet Interface): The av-
erage pair-wise similarity of a -facet interface is

(ℐ = {ℱ1, ..., ℱ}) = ࢣ1≤<≤ (ℱ, ℱ )

( − 1)/2

,

(10)

where (ℱ, ℱ ) is deﬁned by the Jaccard coefﬁcient,

(ℱ, ℱ ) =

∣ℱ ࢵ ℱ ∣ + ∣ℱ ࢵ ℱ ∣
∣ℱ Þ ℱ ∣ + ∣ℱ Þ ℱ ∣

(11)

where ℱ is the set of categories in ℱ (Deﬁnition 3) and ℱ is
the set of attribute articles reachable from ℱ,

ℱ = {′∣′ ∈  ∧ ∃ ∈ ℱ ..  ⇒ ′}

(12)

We choose Jaccard coefﬁcient since it is one of the simplest set-
similarity measures. While more complex measures that give dif-
ferent weights to nodes higher in the hierarchy are possible, we do
not follow that in the interest of simplicity.

∣{7,8}∣+∣{′

Example 7 (Similarity of Facets): Consider facets ℱ1, . . ., ℱ5 in
Figure 3. (ℱ2, ℱ3)=
1,′
∣{2,7,8,3 ,9}∣+∣{′

∣ℱ2 ࢵ ℱ3 ∣+∣ℱ2 ࢵ ℱ3 ∣
∣ℱ2 Þ ℱ3 ∣+∣ℱ2 Þ ℱ3 ∣
3}∣
2 ,′

4}∣ =5/9. Other pair-wise similar-
=
ities can be computed in the same way. The average pari-wise simi-
larity of ℐ={ℱ2, ℱ3, ℱ5} is (ℐ) = ((ℱ2, ℱ3) + (ℱ2, ℱ5)
+ (ℱ3, ℱ5))/3 = 5/27.

2,′
1,′

3,′

We do not design a single function to combine the average pair-
wise similarity of a faceted interface with its navigational cost,
since they represent two measures with different natures. Instead,
in Section 5.3 we discuss how to search the space of candidate in-
terfaces by considering both measures.

5. ALGORITHMS

A straightforward approach for faceted interface discovery is to
enumerate all possible -facet interfaces with respect to the cate-
gory hierarchy ℋ and apply the ranking metrics directly to ﬁnd the
best interface. Such a naïve method results in the exhaustive exam-
ination of all possible combinations of  instances of all possible
facets, i.e., rooted and connected subgraphs of ℋ. Clearly it is a
prohibitively large search space, given the sheer size and complex-
ity of Wikipedia. The naïve technique would be extremely costly.
Therefore ﬁnding the best -facet interface is a challenging opti-
mization problem.

Our -facet discovery algorithm hinges on (1) reducing the search

space; and (2) searching the space effectively and efﬁciently.

Reducing the Search Space: There are two search spaces in ﬁnding
a good -facet interface: the space of facets and the space of -facet
interfaces, which are sets of  facets. To reduce the space of candi-
date facets, we focus on a subset of the safe reaching facets, ℛℋ-
induced facets, which are the facets that contain all the descendant
categories of their roots (Section 5.1). To further reduce the space
of faceted interfaces, we rank the facets individually by their navi-
gational costs (Section 5.2) and only consider the top ranked facets
that do not subsume each other (Section 5.3).

Figure 5: Navigational costs of facets.

start

start

start

c2

c5

c2

c3

c2

c4

c8

c5

c2

c11

c12

c13

c7

c8

c3

c2

c7

c8

c9

c7

c8

c4

c2

p’4

c10

c7

c7

c8

c11 c12

c13

p’2 p’3

c12

c13

p’3 p’9

p’3

p5

(a) I={F2,F5}

c2

c7

c14

c14

p’1

c14

c14

p’6

c7

c8

c9

c7

c8

c9

c7

c8

p’4

c10

p’2 p’3 c10

c2

c7

p’2 p’3

p’5

p’1

p’2 p’3

p1

p1

(b) I={F2,F3}

(c) I={F2,F4}

p5

Figure 6: The sequences of navigational steps.

4.2 Multi-Facet Ranking

Even with the cost metrics for individual facets, measuring the
“goodness” of a faceted interface, i.e., a set of facets, is not straight-
forward. This is because the best -facet interface may not be sim-
ply the cheapest  facets. The reason is that when the user navigates
multiple facets, the selection made at one facet has impact on the
available choices on other facets, as illustrated by Example 4.

9, ′

To directly follow the approach of ranking faceted interfaces by
navigational cost, in principle we could represent the navigational
steps on multiple facets as if the navigation is on one “integrated”
facet. To illustrate, consider the navigation on a 2-facet interface
ℐ={ℱ2, ℱ5} from Figure 3. Two possible sequences of naviga-
tional steps are shown in Figure 6(a). One is 2, 5, 8, 13, ′
9,
′
3, 5, which are the steps taken by the user in Figure 4, followed
by choosing ′
3, and ﬁnally 5. (Remember, for simpliﬁcation
of the model, we assumed that the user will always complete nav-
igational paths till reaching the target articles.) At each step, the
available choices from both facets are put together as the choices in
the “integrated” facet. Note that after 8 is chosen, 12 and 13 are
still valid choices but 11 is not available anymore because 11 can-
not reach the target articles that 8 reaches. For the same reason,
after 13 is chosen, ′
2 is not anymore.
The other highlighted sequence is 5, 11, 2, 7, ′
6, 1.
There are many more possible sequences not shown in the ﬁgure
due to space limitations.

3 is still a valid choice but ′

1, 14, ′

With the concept of “integrated” facet, one may immediately ap-
ply Deﬁnition 7 to deﬁne the cost of a faceted interface. That entails
computing all possible sequences of interleaving navigational steps
across all the facets in the interface. The interaction between facets
is query- and data-dependent, rendering such exhaustive computa-
tion practically infeasible.

However, the “integrated” facet does shed light on what are the
characteristics of good faceted interfaces. In general an interface
should not include two facets that overlap much. Imagine a special
case when two facets form a subsumption relationship, i.e., the root
of one facet is a supercategory of the other root. Presenting both
facets would not be desirable since they overlap signiﬁcantly, thus

WWW 2010 • Full PaperApril 26-30 • Raleigh • NC • USA656Searching the Space: Instead of exhaustively examining all possi-
ble interfaces, we design a hill-climbing based heuristic algorithm
to look for a local optimum (Section 5.3). To further tackle the chal-
lenge of modeling the interactions of multiple facets in measuring
the cost of an interface, the hill climbing algorithm optimizes for
both the average navigational cost and the pair-wise similarity of
the facets.

Our -facet discovery algorithm is outlined as three steps: con-
struction of relevant category hierarchy, ranking single facet, and
searching for k-facet interface.

5.1 Relevant Category Hierarchy (Algorithm 1)

By Deﬁnition 5, the facets in a faceted interface must be safe
reaching facets, i.e., they do not contain “dead end” categories that
cannot reach any target articles. Therefore the categories appear-
ing in any safe reaching facet could only come from the relevant
category hierarchy (ℛℋ), which is a subgraph of the Wikipedia
category hierarchy ℋ, deﬁned below.

Deﬁnition 9 (Relevant Category Hierarchy): Given the category
hierarchy ℋ(ℋ, ℋ, ℰℋ), the target articles  , and the attribute
articles , the relevant category hierarchy (ℛℋ) of  is a sub-
graph of ℋ. Given any category in ℛℋ, it is either directly a cat-
egory of some attribute article ′∈ or a supercategory or ancestor
of such categories. There exists an edge (category-subcategory re-
lationship) between two categories in ℛℋ if the same edge exists
in ℋ. By this deﬁnition the root of ℋ is also the root of ℛℋ.

The procedural algorithm for getting ℛℋ is in Algorithm 1.
Based on deﬁnition, straightforwardly we could prove every safe
reaching facet of the target articles  is a (rooted and connected)
subgraph of ℛℋ. However, not every rooted and connected sub-
graph of ℛℋ is a safe reaching facet. Therefore, even though
ℛℋ is much smaller than ℋ, the search space is still very large
which needs us to further shrink the space by considering only one
type of safe reaching facets, the ℛℋ-induced facets.

Deﬁnition 10 (-Induced Facet): Given the relevant category
hierarchy ℛℋ of the target articles  , a facet ℱ(, ℱ ,ℰℱ ) is
ℛℋ-induced if it is a rooted induced subgraph of ℛℋ, i.e., in
ℱ all the descendants of the root  and their category-subcategory
relationships are retained from ℛℋ.

Example 8 ( and -Induced Facet): Continue the run-
ning example. In Figure 3, the ℛℋ contains all the categories in
the category hierarchy ℋ except 6 (and thus the edge 299K6),
since 6 cannot reach any target article. ℱ2 is an ℛℋ-induced
facet, but would not be if it does not contain 7 (or 8).

Note that every ℛℋ-induced facet is safe reaching, and the
single-facet ranking and searching for k-facet are performed on it.

5.2 Ranking Single Facet (Algorithm 2 and 3)
Among all the ℛℋ-induced facets, only the top  facets with
the smallest navigational costs are considered in searching for a
faceted interface. In ranking the facets by their costs, one straight-
forward approach is to enumerate all the ℛℋ-induced facets and
to separately compute the cost of each facet by enumerating all
of its navigational paths. This approach is exponentially complex
due to repeated traversal of the edges in ℛℋ, because the ℛℋ-
induced facets would have many common categories and category-
subcategory relationships.

To avoid the costly exhaustive method, we design a recursive
algorithm that calculates the navigational costs of all the ℛℋ-
induced facets by only one pass depth-ﬁrst search of ℛℋ. The
details are in Algorithm 2. The essence of the algorithm is to,

Algorithm 1: Construct RCH and Get Attribute Articles

Input:  : target articles; ℋ: category hierarchy.
Output: :attribute articles; ℛℋ:relevant category

hierarchy.

// get attribute articles.
←; ℛℋ←; ℰℛℋ←
foreach  ∈  do

foreach  → ′, i.e., a hyperlink from  to ′ do

←∪{′}

// start from the categories of attribute articles.
foreach ′ ∈  do

foreach  ⇒ ′, i.e., a category of ′ do

ℛℋ ← ℛℋ ∪ {}

// recursively obtain the supercategories.
←ℛℋ; ′ ← 
while  is not empty do

foreach  ∈  do

foreach ′

99K  ∈ ℰℋ do
ℰℛℋ ← ℰℛℋ ∪ {′
if ′ /∈ ℛℋ then

99K }

ℛℋ ← ℛℋ ∪ {′}; ′ ← ′ ∪ {′}

 ← ′; ′ ← 

return  and ℛℋ(ℋ, ℛℋ, ℰℛℋ)

Algorithm 2: Facet Ranking

Input:  :targets;:attributes; ℛℋ:relevant category

hierarchy.

Output: ℐ: top  ℛℋ-induced facets with smallest costs.

// get reachable target articles for each attribute article.
foreach ′∈ do

′ ← {∣ ∈  ∧ ∃  → ′ (hyperlink from  to ′) }
 (′) ← ∣′ ∣

initialize () to be   for every  ∈ ℛℋ.
(ℋ) // recursively compute the costs of all
the ℛℋ-induced facets, starting from the root of ℛℋ.
ℐ← the top  ℛℋ-induced facets with the smallest costs.
return ℐ

1
2

3

4

5

6

7

8
9
10

11

12

13

14

15

16

1

2

3

4

5

6

7

during the recursive traversal of ℛℋ, book-keep the number of
navigational paths in a facet in addition to its navigational cost.
The bookkeeping is performed for each reachable target article be-
cause the cost is averaged across all such articles by Deﬁnition 7.
The cost of a facet rooted at  can be fully computed based on
the book-keeped information of the facets rooted at ’s direct sub-
categories, without accumulating the individual costs of the facets
rooted at ’s descendants. Therefore it avoids the aforementioned
repeated traversal of ℛℋ. More speciﬁcally, the lines 11-14 in
Algorithm 3 are for computing (ℱ, ) in Formula 7. How-
ever, the algorithm does not compute it by a direct translation of
Formula 8 and 1, i.e., enumerating all the navigational paths that
reach . Instead, line 12 gets 1, the total cost of all the navi-
gational paths ⇒′←, i.e., the ones that reach  without going
through any other categories; line 13 computes 2, the total cost
of all the navigational paths that go through other categories, by
utilizing (ℱ, ) and ℎ(ℱ, ) of the subcategories ,
but not other descendants. We omit the formal correctness proof.

5.3 Searching for k-Facet Interface (Algorithm 4)

Algorithm 4 searches for -facet interface. To reduce the search
space, our algorithm only considers ℐ, the top  facets from Algo-
rithm 2. We further reduce the space by excluding those top ranked

WWW 2010 • Full PaperApril 26-30 • Raleigh • NC • USA657Algorithm 4: Facet Selection

Input: ℐ: the top  ℛℋ-induced facets with the smallest

costs.

Output: ℐ: a discovered faceted interface with  facets

(<).

// remove subsumed facets from ℐ
ℐ− ←{ℱ∣∄ℱ′ ∈ ℐ s.t.ℱ is subsumed by ℱ′ , i.e.,  is a
descendant category of ′}
// hill climbing
ℐ ← a random -facet subset of ℐ− ; ℐ ′ ← ℐ− ∖ℐ
repeat

make ℐ=<ℐ[1],...,ℐ []> sorted in increasing order of
cost.
make ℐ ′=<ℐ ′[1],...,ℐ ′[−]> sorted in increasing order
of cost
for  =  to 1 step −1 do
for  = 1 to − do

ℐ←(ℐ∖{ℐ[]}) ∪ {ℐ ′[]}
1←ࢣℱ,ℱ′ ∈ℐ,ℱ∕=ℱ′ (ℱ, ℱ′ )
1←ࢣℱ∈ℐ
2←ࢣℱ,ℱ′ ∈ℐ ,ℱ∕=ℱ′ (ℱ, ℱ′ )
2←ࢣℱ∈ℐ
if (1≤2 and 1<2) or (1<2 and 1≤2)
then

(ℱ)

(ℱ)

Algorithm 3: ComputeCost(r)
Input: : the root of an ℛℋ-induced facet.
Output: (ℱ): cost of ℱ; (ℱ, ): average cost of
reaching target article  from ℱ; ℎ(ℱ, ):
number of navigational paths reaching  from ℱ;
: reachable target articles of .

if () then

return

() ←  ;

←{∣ 99K  ∈ ℰℛℋ} // subcategories of .
foreach  ∈  do

()

←{′∣′ ∈  ∧  ⇒ ′} // attribute articles belong to .
 ()← ∣∣ + ∣∣
← (∪′∈ ′ ) Þ(∪∈ ) // reachable target articles.
foreach  ∈  do

ℎ(ℱ, )

ℎ(ℱ, )←
∣{′∣′∈,∈′ }∣+ࢣ∈
1←
ࢣ′∈ ..∈′ (2( ()) + 2( (′)))
2←
ࢣ∈
(ℱ, )← 1+2
ℎ(ℱ ,)

(2( ())+(ℱ, ))×ℎ(ℱ, )

(ℱ)←ࢣ∈
return

(ℱ, )+×∣ − ∣

1
2

3

4
5

6

7

8

9
10
11

12

13

14

15
16

1

2
3

55

6

7
8

9

10

11

12

13

14

15
16

17

18

ℐ ← ℐ; ℐ ′ ← ℐ− ∖ℐ
go to line 5
until ℐ does not change ;
return ℐ

facets that are subsumed by other top facets (line 1). In other words,
we only keep ℐ− , the maximal antichain of ℐ based on the graph
(category hierarchy) subsumption relationship. This is in line with
the idea of avoiding large overlap between facets (Section 4.2).

Given ℐ− , instead of exhaustively considering all possible -
element subsets of ℐ− , we apply a hill-climbing method to search
for a local optimum, starting from a random -facet interface ℐ.
At every step, we try to ﬁnd a better neighboring solution, where
a -facet interface ℐ is a neighbor of ℐ if they only differ by
one facet (line 9). Given the ×(−) possible neighbors at every
step, we examine them in the order of average navigational costs
(line 5, 6, and 9). The algorithm jumps to the ﬁrst encountered
better neighbor. The algorithm stops when no better neighbor can
be found. As the goal function to be optimized in hill-climbing,
ℐ is considered better if the facets of ℐ have both smaller
pair-wise similarities and smaller navigational costs than that of
ℐ (line 14). The idea of considering both similarity and cost is
motivated in Section 4.2.

6. EXPERIMENTAL EVALUATION

6.1 Experimental Settings

Facetedpedia is implemented in C++ and the dataset is stored
in a MySQL database. The experiments are executed on a Dell
PowerEdge 2900 III server running Linux kernel 2.6.27, with dual
quad-core Xeon 2.0 GHz processors, 2x6MB cache, 8GB RAM,
and three 1TB SATA hard drivers in RAID5.

Dataset: We downloaded the Wikipedia dump of July 24, 2008
from http://download.wikimedia.org and loaded the data into a MySQL
database. In particular, we used the tables page.sql, pagelinks.sql,
categorylinks.sql, and redirect.sql, which provide all the relevant
data including the hyperlinks between articles, categories of arti-
cles, and the category system. We performed several preprocessing
tasks on the tables, including the detection and removal of cycles in

the category hierarchy. Although cycles should usually be avoided
as suggested by Wikipedia, the category system in Wikipedia con-
tains a very small number (594 in the dataset) of elementary cycles
6 due to various reasons. We applied depth-ﬁrst search algorithm
to detect the elementary cycles. The category hierarchy is made
acyclic by removing the last encountered edge in each elementary
cycle during the depth-ﬁrst search. Other performed preprocessing
steps include: removing tuples irrelevant to articles and categories;
replacing redirect articles by their original articles; removing spe-
cial articles such as lists and stubs. We also applied basic perfor-
mance tuning of the database, including creating additional indexes
on page_id in various tables. The characteristics of the dataset are
summarized in Figure 7. The total size of the tables is 1.2GB.

Queries: We experimented with 20 keyword queries that we de-
signed (Figure 8), in addition to the open queries that the users
came up with during user study (Section 6.2).

Parameters in algorithms: Each query was sent to Google with
site constraint site:en.wikipedia.org to get the top 200 (=200) En-
glish Wikipedia target articles. The relevant category hierarchy ℛℋ
was then generated by applying Algorithm 1 on the aforementioned
MySQL database. By default, Algorithm 2 returns top 200 (=200)
facets and Algorithm 4 generates 10 facets (=10). The value of
 in Deﬁnition 7 was set as 7. It was empirically selected
by investigating the relationship between the number of unreach-
able target articles (∣ − ∣) and the total navigational costs of
reachable targets (ࢣ∈

(ℱ, )).

6.2 User Studies

We conducted user studies to evaluate the effectiveness of Faceted-

pedia, and to compare the quality of the faceted interfaces gener-

6A cycle is elementary if no vertices in the cycle (except the
start/end vertex) appear more than once.

WWW 2010 • Full PaperApril 26-30 • Raleigh • NC • USA658number of articles
number of hyperlinks between articles
average number of hyperlinks per article
number of distinct categories
average number of categories per article
number of category-subcategory relationships

2, 445, 642
109, 165, 108
45
329, 007
3
731, 097

Figure 7: Characteristics of the dataset.

action ﬁlm
philosophers

country singer

Ivy League schools
historic landmarks

Q2
Q1
Q4 Texas universities
Q3
Q6 missile
Q5 Turing Award winner
Q8 NBA players
Q7
Q9
Q10 cartoon characters
Q11 Microsoft acquired game companies Q12 stand up comedian
Q13 graph theorists
Q15 American presidents
Q17 waterfall national park
Q19 premier league clubs

Q14 lakes in North America
Q16 battle far east
Q18 Chinese cuisine
Q20 PS3 game

Figure 8: Experiment queries.

ated by Facetedpedia and Castanet [16]. We obtained the imple-
mentation of Castanet from its authors. Note that Castanet is in-
tended for static, short, and domain-speciﬁc documents with lim-
ited vocabularies. Nevertheless, we applied Castanet on the dy-
namic keyword search results. Although not originally designed
for such purposes, Castanet still appears to be possibly the closest
related work. We use the same graphical user interface for both
systems, to make the comparison irrelevant to interface design.

The user studies were conducted online. The users all have col-
lege degrees or are in college, including university students, fac-
ulty, staff, and ﬁnancial and IT company workers. We believe these
users are experienced with Web search and comfortable with more
sophisticated access mechanisms, matching the target users of our
system. To reduce the overhead of the user, we partitioned the 20
queries in Figure 8 into 4 equal-size groups and asked each user
to only participate in the 5 queries of one group. For each query
group, we sent user-study invitations to roughly equal number of
people. Ultimately we were able to collect opinions from totally 36
users, 8 each for 2 groups, and 10 each for the other 2 groups.

For each query, we showed the query keywords and objective
description to the user, and asked the user to explore two interfaces
pre-generated by Facetedpedia and Castanet, respectively. At the
end of each query, the user was asked to provide response to 3 ques-
tions, namely 1-3 in Figure 9. The available choices for 1 and
2 are ratings from 1:“useless” to 5:“very useful”. The choices for
3 are “Facetedpedia” and “Castanet”. The same process iterated
through the 5 queries in the group assigned to the user. After the
5 queries were done, the user was also provided opportunity to try
arbitrary open queries on Facetedpedia, and provided answers to
questions 4-6 in Figure 9. The available choices are ratings
from 1:“strongly disagree” to 5:“strongly agree”. The same open
query study, however, was not possible for Castanet because the
implementation we obtained from the authors takes about 5 min-
utes to process each query and therefore could not be used for dy-
namic queries. The reason is that it checks WordNet for each word
in constructing category hierarchy. (Remember it was designed for
static collection of short texts.)

In Figure 10, column 2 and column 3 records average user rat-
ings per query on questions 1 and 2 respectively. Column 4 and
5 represent user’s absolute preference on one system over the other.
Clearly, from the results, Facetedpedia receives much stronger feed-
back than Castanet on 1 and 2. Also, for absolute preference,
user prefers Facetedpedia over Castanet almost unanimously. Fig-

Choices– 1: useless; 2: not very useful; 3: useful to
some extent; 4: useful; 5: very useful

R1 My rating about usefulness of Facetedpedia.
R2 My rating about usefulness of Castanet.

Choices– Facetedpedia; Castanet

R3 Which interface is better than the other?

Choices– 1: strongly disagree; 2: disagree; 3: neutral;
4: agree; 5: strongly agree

R4 The facets in Facetedpedia conveys important concepts re-

garding the articles related to the query.

R5 Facetedpedia is useful for browsing and exploration purposes.
R6 I look forward to use this interface even in the future for

exploratory browsing purposes.

Figure 9: User study questions and available answers.

Average R1 Average R2 R3-Facetedpedia R3-Castanet
1
3
3
1
1
2
3
4
1
4
1
2
4
4
4
1
1
1
3
4

2.5
2.625
2.875
2.5
2.5
3.375
3.625
3.625
3.25
3.875
3.1
3.2
3.5
3.5
3.7
2.9
3.1
2.9
2.7
3.1

3.5
3.5
3.5
3.625
3.375
3.625
4.0
3.75
4.125
3.5
4.2
3.8
3.8
3.7
3.7
3.9
4.1
4.2
3.7
3.6

7
5
5
7
7
6
5
4
7
4
9
8
6
6
6
9
9
9
7
6

Q1
Q2
Q3
Q4
Q5
Q6
Q7
Q8
Q9
Q10
Q11
Q12
Q13
Q14
Q15
Q16
Q17
Q18
Q19
Q20

Figure 10: Usefulness of Facetedpedia and Castanet.

ure 11 records average user ratings per group for 4, 5 and 6.
As it can be seen, majority of the groups provide strong positive
opinion the about usefulness of facets and the interface generated
by Facetedpedia and they believe Facetedpedia interface is effec-
tive for exploration purposes.

6.3 Characteristics of Generated Facets

Our experiments compared the effectiveness of three algorithms:
hill-climbing (Algorithm 4), top-– selecting the top  facets ranked
by Algorithm 2, and random-– randomly choosing  facets. Fig-
ure 13 shows the average characteristics of the faceted interfaces
generated by these methods. Although hill-climbing had a slightly
worse target article coverage than the other two (5% less), it out-
performed them in pair-wise similarity which means the  facets
selected have smaller overlap of navigational paths. The detailed
tracing results show that hill-climbing started from choosing top-
 facets and gradually replaced similar facets by less similar ones.
The ﬁnal  facets selected by hill-climbing usually were still within
the top 30%, while the ones selected by random- were evenly
distributed among the results from single-facet ranking. The av-
erage width and height of the facets generated by the three meth-
ods were about the same, except that random- occasionally chose
some much wider facets. Their average width and height were usu-
ally around 10 and 6, respectively. Therefore the fanout of internal
nodes and the length of navigational paths are within a reasonable
range for the users. Overall, hill-climbing helps us reducing over-
lapping facets without losing much coverage of target articles.

6.4 Efﬁciency Evaluation

We evaluated the scalability of our approach by measuring the
average execution time of discovering =10 facets for varying num-
ber of target articles ( from 50 to 500). As can be seen from Figure

WWW 2010 • Full PaperApril 26-30 • Raleigh • NC • USA659R4

R5

R6

 

g
n
i
t
a
R
e
g
a
r
e
v
A

4.5
4
3.5
3
2.5
2
1.5
1
0.5
0

as people, organizations, etc. To avoid missing useful facets from
small concept domains, one idea is to ﬁrst cluster the attribute arti-
cles into several groups and then make sure that each group has at
least a number of facets in the ﬁnal results.

Group-1 Q(1-5) Group-2 Q(6-10) Group-3 Q(11-

Group-4 Q(16-

15)

20)

Index of User Group

8. CONCLUSION

Figure 11: User experi-
ence with Facetedpedia
for open queries.

Figure 12: Execution time of
Facetedpedia vs. number of
target articles

Coverage average

width

average
height

Random-k
Top-k
Hill-
climbing

72.3%
73.9%
68.9%

53.8
10.2
9.8

8.6
5.5
5.7

average
pair-wise
similarity
0.108
0.187
0.072

Figure 13: Compare the quality of faceted interfaces generated
by various methods.

12, Facetedpedia scales well since the execution time increases lin-
early by the number of target articles. It also shows that Facetedpe-
dia already achieved fairly fast response without much performance
optimization. In average it took 3 seconds to discover the facets for
50 target articles, and 5 seconds for 200 target articles.

7. DISCUSSION

The faceted interfaces generated by Facetedpedia are certainly
not perfect and could be improved on many aspects. The pitfalls
and drawbacks of our system pose several open challenges which
could possibly form new research directions. It is our plan to for-
ward our investigation along the following lines:

First, hyperlinks in Wikipedia articles are not always good fea-
tures of the target articles. In many cases the hyperlinked articles
are important attribute articles that are strongly related to the tar-
get articles. However, there are also cases in which the authors of
an article make hyperlinks to other articles not because they have
strong relationships with the target articles. The author may believe
that the readers would not be familiar with an entity mentioned in
an article, therefore decides to make that mention an anchor text
linking to the article describing the entity. The hyperlinked article
is not necessarily highly related to the target article. For example,
in Wikipedia article Independence_Day_(ﬁlm), hyperlinked articles
such as Will_Smith and 20th_Century_Fox are certainly valid at-
tribute articles, while Moon and Mexico may not be. To assure the
quality of the discovered facets, we plan to investigate data mining
methods and NLP techniques in ﬁnding truly related articles.

Second, we found through experiments that a category hierar-
chy based on both rich semantics and strong IS-A relationships
will provide more accurate facets than the current Wikipedia cat-
egory system. This “grass-roots” folksonomy in Wikipedia, albeit
containing user-generated categories with richer semantics than a
thesaurus such as WordNet , is not always organized by rigorous
IS-A relationships. For instance, it includes subcategories such
as People_from_Texas and History_of_Texas under category Texas,
which can be misleading to a user who plans to navigate through
geographical concepts by choosing Texas. We plan to reﬁne the
category hierarchy for strong IS-A relationships.

Third, we need to design methods to improve the diversity of the
top ranked facets generated by Facetedpedia. Since our ranking
metric penalizes the facets that have small coverage, the top ranked
ones may tend to come from relatively large concept domains such

In this paper we proposed Facetedpedia, a faceted search system
over Wikipedia. This system provides a dynamic and automated
faceted search interface for users to browse the articles that are the
result of a keyword search query. Given the sheer size and complex-
ity of Wikipedia and the large space of possible faceted interfaces,
we proposed metrics for ranking faceted interfaces as well as efﬁ-
cient algorithms for discovering them. Our experimental evaluation
and user study verify the effectiveness of our methods in generating
useful faceted interfaces. Moreover, our ﬁndings pose several open
problems for future study. It would also be interesting to further
investigate if the proposed framework and methods can be applied
to other applications, or even the generic Web.

9. REFERENCES
[1] S. Auer, C. Bizer, G. Kobilarov, J. Lehmann, R. Cyganiak,
and Z. Ives. DBpedia: A nucleus for a web of open data. In
6th Int.l Semantic Web Conf., 2007.

[2] H. Bast and I. Weber. The CompleteSearch engine:

Interactive, efﬁcient, and towards IR & DB integration. In
CIDR, pages 88–95, 2007.

[3] O. Ben-Yitzhak, N. Golbandi, N. Har’El, R. Lempel,

A. Neumann, S. Ofek-Koifman, D. Sheinwald, E. Shekita,
B. Sznajder, and S. Yogev. Beyond basic faceted search. In
WSDM, pages 33–44, 2008.

[4] D. R. Cutting, D. R. Karger, J. O. Pedersen, and J. W. Tukey.

Scatter/gather: a cluster-based approach to browsing large
document collections. In SIGIR ’92, pages 318–329, 1992.

[5] W. Dakka and P. Ipeirotis. Automatic extraction of useful

facet hierarchies from text databases. ICDE, 2008.

[6] W. Dakka, P. G. Ipeirotis, and K. R. Wood. Automatic

construction of multifaceted browsing interfaces. In CIKM,
pages 768–775, 2005.

[7] D. Debabrata, R. Jun, N. Megiddo, A. Ailamaki, and

G. Lohman. Dynamic faceted search for discovery-driven
analysis. In CIKM, pages 3–12, 2008.

[8] J. Diederich and W.-T. Balke. FacetedDBLP - navigational

access for digital libraries. Bulletin of IEEE Technical
Committee on Digital Libraries, 4, Spring 2008.

[9] M. A. Hearst. Clustering versus faceted categories for

information exploration. Commun. ACM, 49(4):59–61, 2006.

[10] M. Käki. Findex: search result categories help users when
document ranking fails. In CHI ’05, pages 131–140, 2005.
[11] A. S. Pollitt. The key role of classiﬁcation and indexing in

view-based searching. In IFLA, 1997.

[12] W. Pratt, M. A. Hearst, and L. M. Fagan. A knowledge-based

approach to organizing retrieved documents. In AAAI
’99/IAAI ’99, pages 80–85, 1999.

[13] K. Rodden, W. Basalaj, D. Sinclair, and K. Wood. Does

organisation by similarity assist image browsing? In CHI,
pages 190–197, 2001.

[14] K. A. Ross and A. Janevski. Querying faceted databases. In

the Second Workshop on Semantic Web and Databases, 2004.

[15] S. B. Roy, H. Wang, G. Das, U. Nambiar, and M. Mohania.
Minimum effort driven dynamic faceted search in structured
databases. In CIKM, 2008.

[16] E. Stoica, M. A. Hearst, and M. Richardson. Automating

creation of hierarchical faceted metadata structures. In Proc.
NAACL-HLT 2007, pages 244–251, 2007.

[17] K.-P. Yee, K. Swearingen, K. Li, and M. Hearst. Faceted

metadata for image search and browsing. In CHI ’03, 2003.

[18] O. Zamir and O. Etzioni. Grouper: a dynamic clustering

interface to web search results. In WWW, 1999.

WWW 2010 • Full PaperApril 26-30 • Raleigh • NC • USA660