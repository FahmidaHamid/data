A Game Theoretic Formulation of the

Service Provisioning Problem in Cloud Systems

Danilo Ardagna
Politecnico di Milano

Dipartimento di Elettronica e
ardagna@elet.polimi.it

Informazione

Barbara Panicucci
Politecnico di Milano

Dipartimento di Elettronica e
panicucci@elet.polimi.it

Informazione

Mauro Passacantando

Università di Pisa

passacantando@dma.unipi.it

Dipartimento di Matematica

Applicata "U. Dini"

ABSTRACT
Cloud computing is an emerging paradigm which allows the
on-demand delivering of software, hardware, and data as
services. As cloud-based services are more numerous and
dynamic, the development of eﬃcient service provisioning
policies become increasingly challenging. Game theoretic
approaches have shown to gain a thorough analytical under-
standing of the service provisioning problem.

In this paper we take the perspective of Software as a
Service (SaaS) providers which host their applications at
an Infrastructure as a Service (IaaS) provider. Each SaaS
needs to comply with quality of service requirements, spec-
iﬁed in Service Level Agreement (SLA) contracts with the
end-users, which determine the revenues and penalties on
the basis of the achieved performance level. SaaS providers
want to maximize their revenues from SLAs, while minimiz-
ing the cost of use of resources supplied by the IaaS provider.
Moreover, SaaS providers compete and bid for the use of in-
frastructural resources. On the other hand, the IaaS wants
to maximize the revenues obtained providing virtualized re-
sources.
In this paper we model the service provisioning
problem as a Generalized Nash game, and we propose an
eﬃcient algorithm for the run time management and alloca-
tion of IaaS resources to competing SaaSs.

Category C.4: Performance attributes; Performance of

Systems; Quality concepts.

General Terms: Algorithms, Performance, Theory.
Keywords: Resource Allocation, Game Theory, Gener-

alized Nash Equilibrium.

1.

INTRODUCTION

Cloud Computing has been a dominant IT news topic over
the past few years. It is essentially a way for IT companies
to deliver software/hardware on-demand and for costumers
to store and access data over the Internet. Cloud computing
applications are generally priced on a subscription model, so
end-users may pay a yearly usage fee, for example, rather
than the more familiar model of purchasing software to run
on desktop. The Cloud-based services are not only restricted
to software applications (Software as a Service – SaaS), but
could also be the platform for the development and deploy-
ment of cloud applications (Platform as a Service – PaaS)
and the hardware infrastructure (Infrastructure as a Service
– IaaS). Many Companies, e.g. Google and Amazon, are

Copyright is held by the International World Wide Web Conference Com-
mittee (IW3C2). Distribution of these papers is limited to classroom use,
and personal use by others.
WWW 2011, March 28–April 1, 2011, Hyderabad, India.
ACM 978-1-4503-0632-4/11/03.

oﬀering Cloud computing services such as Google’s App En-
gine and Amazon’s Elastic Compute Cloud (EC2). Large
data centers provide the infrastructure behind the Cloud
and virtualization technology makes Cloud computing re-
sources more eﬃcient and cost-eﬀective both for providers
and customers. Indeed, end-users obtain the beneﬁts of the
infrastructure without the need to implement and adminis-
ter it directly adding or removing capacity almost instan-
taneously on a “pay-as-you-use” basis. Cloud providers can,
on the other hand, maximize the utilization of their physical
resources also obtaining economies of scale.

The development of eﬃcient service provisioning policies
is among the major issues in Cloud research. Indeed, mod-
ern Clouds live in an open world characterized by continu-
ous changes which occur autonomously and unpredictably.
In this context, game theoretic methods allow to gain a in-
depth analytical understanding of the service provisioning
problem. Game Theory has been successfully applied to di-
verse problems such as Internet pricing, ﬂow and congestion
control, routing, and networking [5]. One of the most widely
used “solution concept” in Game Theory is the Nash Equi-
librium approach: A set of strategies for the players consti-
tute a Nash Equilibrium if no player can beneﬁt by changing
his/her strategy while the other players keep their strategies
unchanged or, in other words, every player is playing a best
response to the strategy choices of his/her opponents.

In this paper we take the perspective of SaaS providers
which host their applications at an IaaS provider. Each
SaaS provider wants to maximize its proﬁt while complying
with QoS requirements, speciﬁed in Service Level Agreement
(SLA) contracts with the end-users, which determine the
revenues and penalties on the basis of the achieved perfor-
mance level. The proﬁt of the SaaS is given by the revenues
from SLAs minus the cost sustained for using the resources
supplied by the IaaS. However, each SaaS competes with
others SaaS and bids for the use of infrastructural resources.
The IaaS, in his turn, wants to maximize the revenues ob-
tained providing the resources. To capture the behavior of
SaaSs and IaaS in this conﬂicting situation in which the best
choice for one depends on the choices of the others, we recur
to the Generalized Nash game model [13, 15], which is an
extension of the classical Nash game. We then use Game
Theory results for developing an eﬃcient algorithm for the
run time allocation of IaaS resources to competing SaaSs.

The remainder of the paper is organized as follows. Sec-
tion 2 introduces the reference system under study. In Sec-
tion 3 we introduce our model based on the concept of Gen-
eralized Nash equilibrium and we prove its existence. In Sec-

WWW 2011 – Session: Monetization IIMarch 28–April 1, 2011, Hyderabad, India177tion 4 we provide analytical results for a simple case study,
while a general solution method is proposed in Section 5.
The experimental results discussed in Section 6 demonstrate
the eﬃciency of our method. Other approaches proposed in
the literature are discussed in Section 7. Conclusions are
ﬁnally drawn in Section 8.
2. PROBLEM STATEMENT AND

ASSUMPTIONS

We consider SaaS providers using Cloud computing facil-
ities to oﬀer services, according to the IaaS paradigm. We
assume that a SaaS provider oﬀers multiple transactional
Web services (WSs) and each service represents a diﬀerent
application. The hosted WSs can be heterogeneous with
respect to resource demands, workload intensities and QoS
requirements. The set of WS applications oﬀered by the p-th
SaaS provider are denoted with Ap.

An SLA contract, associated with each WS application, is
established between the SaaS provider and its end-users. In
particular, as in other approaches [9, 10, 31], for each WS
application k ∈ Ap, a linear utility function speciﬁes the per
request revenue (or penalty) Vk = νk +mk Rk incurred when
the end-to-end response time Rk assumes a given value. The
slope of the utility function is mk = −νk/Rk < 0 and Rk
is the threshold that identiﬁes the revenue/penalty region,
that is, if Rk > Rk the SLA is violated and the SaaS incurs
in penalties. Linear utility functions are a ﬂexible mech-
anism to rank diﬀerent applications (e.g., assigning higher
slopes to more important applications), and allow also to
implement soft constraints on response times since the SaaS
goal is to keep the infrastructure working in a proﬁtability
region, i.e., to provide an average response time lower than
Rk looking for the trade-oﬀ between the SLA revenues and
infrastructural costs [9].

Applications are hosted in virtual machines (VMs) which
are dynamically instantiated by the IaaS provider. We make
the simplifying assumption that each VM hosts a single WS
application. Multiple VMs implementing the same WS ap-
plication can also run in parallel. In that case, we further
assume that the running VMs are homogeneous in terms of
RAM and CPU capacity C and evenly share the workload.
IaaS providers usually charge software providers on an
hourly basis [6]. Hence, the SaaS has to face the problem
of determining every hour the optimal number of VMs for
each WS class in order to maximize the net revenues.

The SaaS performs resource allocation on the basis of a
prediction of future WS workloads [10]. The SaaS needs
also an estimate of the future performance of each VM in
order to determine application average response time.
In
the following we model each WS class hosted in a VM as an
M/G/1 queue [11], as done in [1, 26] and we assume, as com-
mon among Web service containers, that requests are served
according to the processor sharing scheduling discipline.

For the IaaS provider we consider a model similar to Ama-
zon EC2 [6] and we assume that the IaaS provider oﬀers: (i)
ﬂat VMs, for which SaaS providers applies for a one-time
payment (currently every one or three years) for each in-
stance they want to reserve, (ii) on demand VMs, which
allows SaaS to access computing capacity with no long-
term commitments, and (iii) on spot VMs, for which SaaS
providers bid and compete for unused IaaS resources.

The VM instances are charged with the on spot cost σk
for application k, which is set by the IaaS and ﬂuctuates

periodically depending on the IaaS provider time of the day
energy costs and also on the supply and demand from SaaS
for on spot VMs [6, 20].
Indeed, SaaS providers compete
among them for the use of on spot VMs and specify the
maximum cost σU
k for each application k they are willing to
pay per instance hour. The on spot cost σk is ﬁxed by the
IaaS provider which can also decide to do not allocate any
on spot instance to a SaaS. On the other hand, each SaaS
provider is guaranteed to have access up to f U
p ﬂat VMs he
reserved by applying to the one-time payment. The number
of on spot VMs available at the IaaS cloud service center is
denoted by sU .

For example in the Amazon case on spot costs are avail-
able via the EC2 API [6] or by third party sites [29]. On spot
costs ﬂuctuate according to the time of the day and on the
Cloud site region, and could be less or greater than the time
unit cost ϕ for ﬂat VMs. Finally, we denote with δ the cost
for on demand instances. With the current pricing models,
δ is strictly greater than ϕ and we assume δ > σU
k for all k.
Indeed, since the IaaS provider can arbitrarily terminate on
spot instances from a SaaS resource pool [6], no one is will-
ing to pay for a less reliable resource a time unit cost higher
than on demand instances, which provide a higher availabil-
ity level. On spot instances have been traditionally adopted
to support batch computing intensive workloads [6]. How-
ever, since nowadays IaaS providers allow specifying auto-
nomic policies which can dynamically allocate VM instances
in few minutes as a reaction to failures, we advocate the use
of on spot instances also to support the execution of tradi-
tional Web applications.

3. GENERALIZED NASH EQUILIBRIUM

APPROACH

Hereafter we introduce the Generalized Nash Equilibrium
Problem arising in the Cloud computing system under study
and we prove the existence of at least an equilibrium.
3.1 Problem Formulation

The goal of SaaS provider p is to determine every hour
the number of ﬂat fk, on demand dk and on spot sk VMs to
be devoted for the execution of all WS applications k ∈ Ap,
in order to maximize its proﬁts and, at the same time, so as
to satisfy the prediction Λk for the arrival rate of the WS
application k. Let us denote with µk the maximum service
rate for the requests of application k on a VM of capacity
one. If the workload is evenly shared among the VMs, then
the average response time for the execution of application
, under the
k requests is given by E[Rk] =

1

Cµk−

Λk

fk +dk +sk

assumption that VMs are not saturated, i.e. guaranteeing
the equilibrium conditions for the M/G/1 queues C µk (fk +
dk + sk) − Λk > 0.

The average per time unit revenues for application k re-

quests are given by Vk Λk = (νk + mk E[Rk]) Λk.

Considering the infrastructural costs to access ﬂat, on de-
mand, and on spot VM instances the goal of a SaaS provider
is to maximize its proﬁts given by:

(cid:18)

(cid:88)

k∈Ap

νk Λk +

mk Λk(fk + dk + sk)

C µk (fk + dk + sk) − Λk

− ϕ fk − δ dk − σk sk

With this setting in mind, the problem of the generic SaaS

(cid:19)

.

WWW 2011 – Session: Monetization IIMarch 28–April 1, 2011, Hyderabad, India178System Parameters

Capacity of computational resources

Set of applications of the p SaaS provider
Set of applications of all the SaaS providers

N number of SaaS providers
Ap
A
f U
p Maximum number of ﬂat computational resources IaaS can provide for provider p
sU Maximum number of on spot computational resources IaaS can provide for all the SaaS providers
C
Λk Prediction of the arrival rate for application k
µk Maximum service rate of a capacity 1 server for executing class k application
mk Application k utility function slope
ϕ
δ
σL
σU

k Minimum time unit cost for on spot VMs used for application k, set by the IaaS provider
k Maximum time unit cost for on spot VMs used for application k, set by the SaaS provider

Time unit cost for ﬂat VMs
Time unit cost for on demand VMs

Decision Variables

fk
dk
sk
σk
xp = (fk, dk, sk)k∈Ap Strategies vector of SaaS provider p
x−p = (xi)N

Number of ﬂat VMs used for application k
Number of on demand VMs used for application k
Number of on spot VMs used for application k
Time unit cost for on spot VMs used for application k

Strategies vector of all SaaS providers diﬀerent from p

i=1,i(cid:54)=p,

Table 1: Parameters and decision variables.

plications k ∈ Ap and every SaaS provider p, in order to
maximize its total revenue:

+

max ΘI =

(ϕ fk + δ dk + σk sk)

(cid:88)

k∈A

k ≤ σk ≤ σU
σL

k

∀ k ∈ A,

(5)

where A denotes the set of indexes of all WS applications
(i.e., A = ∪pAp, Ap1 ∩ Ap2 = (cid:11) if p1 (cid:54)= p2).

Note that, the on spot instance cost lower bound σL

k is
ﬁxed by the IaaS provider according to the time of the day
and includes the energy costs for running a single VM in-
stance for one hour and the amortized cost of the hosting
physical machine [20]. For the sake of clarity, the notation
adopted in this paper is summarized in Table 1.

k < σL

If the maximum time unit costs of an application is lower
than the minimum set by the IaaS, i.e. σU
k , formally
the SaaSs and IaaS problems have no solution. In that case
we can set sk = 0 and consider a simpliﬁed problem where
the capacity allocation problem for application k is limited
to determine the number of ﬂat and on demand instances.
k ≤ σU
Hence in the following we will always assume that σL
k
for all k. Note that, if the on spot instances are terminated
by the IaaS provider, then the SaaS can dynamically start
the execution of an equal number of on demand instances.
In this framework, SaaS providers and the IaaS provider
are making decisions at the same time, and the decisions of a
SaaS depend on those of the others SaaS and the IaaS. Vice
versa, the IaaS objective function depends on SaaS decisions.
In this setting, we can not analyze decision in isolation, but
we must ask what a SaaS would do, taking into account the
decision of the IaaS and other SaaSs. To capture the behav-
ior of SaaSs and IaaS in this conﬂicting situation (game) in
which what a SaaS or the IaaS (the players of the game) does
directly aﬀects what others do, we consider the Generalized
Nash game[13, 15], which is broadly used in Game Theory
and other ﬁelds. We remind the reader that the generalized
Nash equilibrium problem (GNEP) diﬀers from the classical
Nash equilibrium problem (NEP) since, not only the objec-
tive functions of each player (called payoﬀ functions) depend

provider p becomes:

max Θp =

(cid:88)
− (cid:88)

k∈Ap

k∈Ap

mk Λk(fk + dk + sk)

C µk (fk + dk + sk) − Λk

ϕ fk − (cid:88)

k∈Ap

δ dk − (cid:88)
(cid:88)

fk ≤ f U

k∈Ap

p

k∈Ap

(cid:88)

k∈A

∀ k ∈ Ap
sk ≤ sU
∀ k ∈ Ap.

σk sk

(1)

(2)

(3)

(4)

νk Λk can be dropped in the SaaS

fk + dk + sk >

Λk
C µk

Note that the terms (cid:80)

fk, dk, sk ≥ 0

k∈A

objective function since they are independent of the decision
variables.

Constraint (1) entails that the ﬂat VMs allocated to appli-
cations are less or equal to the one available, while constraint
(2) guarantees that resources are not saturated. Finally con-
straint (3) guarantees than the on spot VMs allocated to
competing SaaS providers are lower than the one available
at the IaaS cloud service center sU .

We would like to remark that, in the formulation of the
problem, we have not imposed variables fk, dk, sk to be in-
teger, as in reality they are. In fact, requiring variables to
be integer makes the solution much more diﬃcult. How-
ever, preliminary experimental results have shown that if
the optimal values of the variables are fractional and they
are rounded to the closest integer solution, the gap between
the solution of the real integer problem and the relaxed one
is very small, justifying the use of a relaxed model. We
therefore decide to deal with continuous variables, actually
considering a relaxation of the real problem.

On the other side, the IaaS provider’s goal is to determine
the time unit cost σk for on spot VM instances for all ap-

WWW 2011 – Session: Monetization IIMarch 28–April 1, 2011, Hyderabad, India179upon the strategies chosen by all the other players, but also
each player’s strategy set may depend on the rival players’
strategies. In our setting the constraint of each problem in-
volving other player’s variables (joint constraint) comes from
(3).

Following the Nash equilibrium concept, SaaS and IaaS
providers adopt a strategy such that none of them can im-
prove its revenue by changing its strategy unilaterally (i.e.,
while the other players keep their strategies unchanged).
The service provisioning problem results therefore in a GNEP
where the players are the SaaS providers and the IaaS provid-
er, the strategy variables of SaaS provider p are fk, dk, and
sk, for k ∈ Ap, while the strategy variables of the IaaS are
the costs for on spot VMs, σk, for all k ∈ A. In the following
we denote with xp = (fk, dk, sk)k∈Ap the strategies vector of
p=1, x−p the vector formed
SaaS provider p, with x = (xp)N
by the strategies of all SaaS providers diﬀerent from p, and
we set σ = (σk)k∈A.

Within this setting, the IaaS’s strategy is simple. In fact,
if a SaaS provider decides not to use on spot VMs for appli-
cation k, that is sk = 0, the value of the IaaS payoﬀ does not
depend on the choice for σk, that can be any feasible value.
Whereas, if sk > 0, regardless its value, the best response of
the IaaS is to play σk = σU
k . Another important feature of
the derived GNEP is that it satisﬁes the Convexity Assump-
tion: the payoﬀ functions of both SaaS providers and IaaS,
are concave in its own variables (Θp is concave [8] being the
sum of linear and concave function, and ΘI is linear) and the
set of strategies are convex. Moreover, even if the decision
of a SaaS depends on the decisions of the other SaaSs and
the IaaS, the only constraint of each problem involving other
player’s variables (coming from (3) in each SaaS problem),
is the same for all players: we refer to this special class of
GNEP as jointly convex GNEP [15].
3.2 Existence of equilibria

Using the model introduced in the previous sections, we
now prove that there exists an equilibrium for service provi-
sioning on the Cloud. The proof is based on the equivalence
between generalized Nash equilibria and ﬁxed points of the
best-response mapping, and on the Kakutani’s ﬁxed point
theorem [21].
In the following, we indicate by Xp(x−p) the set of strate-
gies for provider p, and XI the set of strategies of the IaaS
provider.

Theorem 1 There exists at least one generalized Nash

equilibrium for the game.
Proof Let consider any SaaS provider p. For any feasi-
ble strategy x−p of the other SaaS providers we have that
Xp(x−p) contains the set:

p := {xp ≥ 0 : (cid:80)

X L

fk ≤ f U
p ,

sk = 0 ∀ k ∈ Ap
k∈Ap
fk + dk > Λk/(C µk) ∀ k ∈ Ap}.

(cid:21)

.

and ΘU

(cid:88)

p (xp) is:

(cid:20) mk Λk(fk + dk + sk)

C µk (fk + dk + sk) − Λk

− ϕ fk − δ dk − σL

k sk

k∈Ap
We remark that if fk + dk + sk → Λk
then ΘU
as well.

p (xp) → −∞ and if dk → +∞ then ΘU

C µk

for some k ∈ Ap,
p (xp) → −∞

If we denote by M p := max
xp∈XL

ΘL

p (xp), then the set:

(cid:102)Xp := {xp : ΘU

p

p (xp) ≥ M p}

is nonempty, convex and compact. Therefore, for any fea-
sible x−p and σ we obtain that:

ΘL

p (xp) = M p

max

xp∈Xp(x−p)

Θp(xp, σ) ≥ max
xp∈XL

Θp(xp, σ) ≥ max
xp∈XL

p

p

thus:

arg max

xp∈Xp(x−p)

Θp(xp, σ) ⊆ (cid:102)Xp,
of the rivals are uniformly bounded by (cid:102)Xp.
(cid:101)X := (cid:102)X1 × . . .(cid:103)XN × XI

Finally, we consider the convex compact set

that is the sets of best responses of player p to the strategies

(cid:20)

(cid:21)

× . . .
(cid:48)

ΘI (x, σ

).

and the best response set-valued mapping B deﬁned as fol-
lows:

(cid:20)

×

arg

B(x, σ) :=

arg max

y1∈X1(x−1)

Θ1(y1, σ)

max

yN ∈XM (x−N )

Θn(yN , σ)

× arg max
σ(cid:48)∈XI

(cid:21)

map B : (cid:101)X ⇒ (cid:101)X has nonempty and convex values, and its

From the above discussion it follows that the set valued

graph is closed by continuity of payoﬀ functions. Therefore,
by Kakutani’s theorem there exists a ﬁxed point of B, that
is a strategy (x, σ) ∈ B(x, σ), which is a generalized Nash
equilibrium of the game.
4. A SINGLE APPLICATION CASE STUDY
In order to gain insight into the properties of the equilib-
ria in our setting, let us focus on the case of a single SaaS
provider with a single application class.

In the following we will also assume that the IaaS is over-
provisioned and there is no an upper bound sU on the num-
ber of on spot VM instances available and, hence, the con-
straint (3) is relaxed.
Indeed, it is not reasonable that a
single SaaS will be able to saturate the on spot instances ca-
pacity available in a real system. In that case, each player’s
strategy (SaaS and IaaS) belong to a set which is ﬁxed and
does not depend on the rival players’ strategies: hence the
GNEP reduces to a NEP which is much more simple to solve.
The aim of the SaaS provider, given the IaaS strategy σ,

is to choose f , d, and s that maximize the payoﬀ:

Moreover, for any feasible strategy σ of IaaS provider we
have the following relations:

p (xp) ≤ Θp(xp, σ) ≤ ΘU
ΘL

p (xp),

where ΘL

(cid:88)

k∈Ap

p (xp) is:

(cid:20) mk Λk(fk + dk + sk)

C µk (fk + dk + sk) − Λk

(cid:21)

− ϕ fk − δ dk − σU

k sk

m Λ (f + d + s)

− ϕ f − δ d − σ s,

ΘS =

C µ (f + d + s) − Λ
over the set XS = {(f, d, s) ∈ R3
C µ , f ≤
f U}. The aim of the IaaS provider, given the SaaS strategies
(f, d, s), is to choose σ that maximizes the payoﬀ:

+ : f + d + s > Λ

ΘI = ϕ f + δ d + σ s,

over the set XI = [σL, σU ].

WWW 2011 – Session: Monetization IIMarch 28–April 1, 2011, Hyderabad, India180An analytic study can be obtained writing down the KKT
conditions for the SaaS and the IaaS optimization problems
and concatenating them and it is omitted here for space lim-
itation (see [8] for further details). We can observe that the
Nash equilibria depend on the application workload condi-
tions and on the relation between the cost ϕ of the ﬂat VMs
and the upper bound σU for on spot instances cost. The ob-
tained equilibria and the corresponding value of the payoﬀ
functions ΘS and ΘI are reported in Table 2.

The ﬁrst important remark we get is that, in general, there
is no a unique Nash equilibrium (e.g., when ϕ = σU ). How-
ever, if multiple equilibria exist they are equivalent, that is
they are characterized by the same values of the payoﬀs.
Furthermore, assuming δ > σU
k for all k we always have
d = 0 (i.e., the SaaS provider always adopt ﬂat or on spot
VMs which are always cheaper than on demand instances).
When ϕ ≥ σU (Table 2, ﬁrst and second rows) then it is
more convenient for the SaaS provider to use only on spot
instances which number can be obtained by a closed formula
under any workload conditions. Remind that the value of
σL is set by the IaaS provider, and SaaS provider can not set
the value of σU too low otherwise the IaaS will not provide
on spot resources. Let us now examine the case ϕ < σU and
assume initially that f U ≤ Λ
C µ .
In these hypotheses, the
SaaS provider is under heavy load conditions and requests
cannot be executed by using only the ﬂat VMs. The SaaS
provider will use all of its ﬂat VMs and will buy on spot
VMs at the maximum cost. Again, the number of on spot
VMs can be determined by a closed formula (see Table 2,
third row). Since ϕ < σU , in these conditions the payoﬀ
ΘS is greater than the value obtained when ϕ ≥ σU (Ta-
ble 2 ﬁrst and second rows). Hence, these conditions are
more proﬁtable for the SaaS provider which determines the
optimal trade-oﬀ between the cost of the ﬂat and on spot
VMs and the revenues which can be achieved by the SLA
contract. With the same arguments we can derive that, vice
versa, the payoﬀ ΘI is lower than the value obtained when
ϕ ≥ σU , hence these conditions are less proﬁtable from the
IaaS point of view even if on spot instances are sold at the
maximum cost.

Let us now examine the case when ϕ < σU and f U > Λ

C µ .
The SaaS provider is under light load conditions and, there-
fore, the incoming requests could be executed by using only
the ﬂat VMs. Under these hypotheses, the equilibria are
set according to the marginal value of the payoﬀ function
of the SaaS player evaluated in f = f U and s = 0, that is
(C µ f U −Λ)2 . This marginal value represents the change in
the revenues of SaaS per unit change in s, i.e., the increase in
the SaaS provider revenues deriving from SLA contracts ob-
tained providing better performance to end-users by adopt-
ing an additional on spot VM. We identify two cases:

−m Λ2

• if ϕ < σU < −m Λ2

(C µ f U −Λ)2 (see Table 2, fourth row), the
marginal value is greater than the cost of individual
on spot instance sold at the maximum cost (σ = σU ),
therefore it is convenient for the SaaS provider to buy
on spot instances. Note that under these conditions,
the payoﬀ ΘS is greater than the value obtained when
ϕ ≥ σU as in the previous case. Vice versa, for the
IaaS provider these circumstances are less proﬁtable.
(C µ f U −Λ)2 ≤ σU (see Table 2, ﬁfth and

−m Λ2

• if ϕ < σU and

sixth row), then the marginal value is less or equal to
the cost of on spot VMs and hence the SaaS provider

has no incentives to buy additional on spot VMs. Also
in these cases, the equilibrium value of the payoﬀ of
SaaS provider is greater than the one obtained when
ϕ ≥ σU , while this again does not happen for the
IaaS provider. Finally,
it is worth noticing that if
(C µ f U −Λ)2 < ϕ the SaaS provider adopts a number
of VMs lower than f U . Hence, in that case the costs
incurred by using a larger number of ﬂat VMs can-
not be counterbalanced by the revenues which can be
obtained by improving application performance.

−m Λ2

5. GENERAL SOLUTION METHOD

In the previous sections, we showed that the service pro-
visioning problem in a Cloud Computing environment rep-
resents a GNEP and more precisely a jointly convex GNEP.
Concerning solution algorithms for general GNEPs, the liter-
ature is still very limited. More interesting results have been
obtained for GNEPs with a jointly convex structure as our
model is. In fact, a jointly convex GNEP can be solved in-
troducing a variational inequality (VI) problem1 reformula-
tion: given a jointly convex GNEP whose payoﬀs are contin-
uously diﬀerentiable and convex with respect to each player
variables, then every solution of the V I(X, F ), where F =
−[(∇xp Θp(x, σ)N
p=1,∇σΘI (x, σ)] and X := X1×. . . XN ×XI
is the set of individual and joint constraints, is also a solu-
tion of the jointly convex GNEP (see, e.g., [15]). We remark
that the GNEP has usually multiple or even inﬁnitely many
solutions and it is not true that any solution of the jointly
convex GNEP is also a solution of the VI. A solution of
the jointly convex GNEP which is also a solution of the VI
is called a variational equilibrium. Our approach is to cal-
culate, among all the equilibria, a variational equilibrium
which is more socially stable than other equilibria (see [12])
and it is a valuable target for an algorithm.

There are plenty of methods for solving VI problems. In

our setting we have:



∂Θ1
∂f1
∂Θ1
∂d1
∂Θ1
∂s1···
···
∂σ1···

∂ΘI



F = −

=

m1 Λ2
1

m1 Λ2
1

(C µ1 (f1 + d1 + s1) − Λ1)2 + ϕ
(C µ1 (f1 + d1 + s1) − Λ1)2 + δ
(C µ1 (f1 + d1 + s1) − Λ1)2 + σ1

m1 Λ2
1
···
···
−s1···







whose Jacobian is:

(cid:34)a1 a1 a1

(cid:35)

a1 a1 a1
a1 a1 a1

JF =

. . .

0

0

(cid:34)a|A| a|A| a|A|

a|A| a|A| a|A|
a|A| a|A| a|A|

(cid:35)

B

−BT
where the generic term ak = −
(C µk (fk+dk+sk)−Λk)3 > 0,
and B is a matrix of dimension 3|A| × |A|. Its symmetric
part is:
1Given X ⊆ Rn and F : Rn → Rn, the V I(X, F )
problem consists in ﬁnding a vector z∗ ∈ X such that
(cid:104)F (z∗), z − z∗(cid:105) ≥ 0, for all z ∈ X.

2 mk Λ2

k C µk

0

WWW 2011 – Session: Monetization IIMarch 28–April 1, 2011, Hyderabad, India181SaaS equilibrium and value

f = 0 d = 0 s = Λ
C µ
ΘS = − Λ

√
σU +
0 ≤ f ≤ f U

C µ (

σU

σU

1 +

(cid:16)

(cid:17)

σU +

(cid:113) −m

(cid:16)
√−m)2
(cid:113) −m
(cid:17)
d = 0 s ≥ 0
(cid:113) −m
(cid:16)
√−m)2
(cid:113) −m
(cid:16)

(cid:17) − f U
√−m)2 + f U (σU − ϕ)
(cid:17) − f U
√−m)2 + f U (σU − ϕ)
(cid:17)
(cid:113) −m
√−m)2

d = 0 s = 0

1 +

1 +

σU

σU

1 +
√
C µ (

f + s = Λ
C µ
ΘS = − Λ
d = 0 s = Λ
C µ

C µ (

σU +

d = 0 s = Λ
C µ

C µ (

σU +

f = f U
ΘS = − Λ

f = f U
ΘS = − Λ

√

√

(cid:16)

f = Λ
C µ
ΘS = − Λ

1 +
√
ϕ +

C µ (

ϕ

IaaS equilibrium and value

σ = σU
ΘI = Λ

C µ (

√−m σU + σU )

σ = σU

ΘI = Λ

C µ (

√−m σU + σU )

σ = σU
ΘI = Λ

C µ (

√−mσU + σU ) + f U (ϕ − σU )

σ = σU
ΘI = Λ

C µ (

√−mσU + σU ) + f U (ϕ − σU )

max{σL, ϕ} ≤ σ ≤ σU
√−m ϕ + ϕ)

ΘI = Λ

C µ (

f = f U

d = 0 s = 0

ΘS = m Λ f U

C µ f U −Λ − ϕ f U

max{σL,

−m Λ2

(C µ f U −Λ)2 } ≤ σ ≤ σU

ΘI = ϕ f U

Table 2: Single application single SaaS equilibria.

0

(cid:34)a|A| a|A| a|A|

a|A| a|A| a|A|
a|A| a|A| a|A|

(cid:35)



0

0

Conditions

ϕ > σU

ϕ = σU

ϕ < σU
f U ≤ Λ

C µ

ϕ < σU

f U > Λ
C µ
σU < −m Λ2
ϕ < σU

(C µ f U −Λ)2

f U > Λ
C µ
−m Λ2

(C µ f U −Λ)2 < ϕ

ϕ < σU

f U > Λ
C µ
ϕ ≤ −m Λ2

(C µ f U −Λ)2 ≤ σU
(cid:34)a1 a1 a1

(cid:35)

a1 a1 a1
a1 a1 a1

0

. . .

0



hyperplane projection method [19], where two projections
per iteration are executed. The method is simple and ad-
mits a geometric interpretation. Given the current point
(xt, σt), ﬁrst we compute ProjX ((xt, σt) − βt F (xt, σt)) and
then we search on the line segment between those points, for
(yt, δt) such that the hyperplane

{(x, σ) : (cid:104)F (yt, δt), (x, σ) − (yt, δt)(cid:105) = 0}

strictly separates (xt, σt) from any solution of the prob-
lem. The next iterate (xt+1, σt+1) is computed by projecting
(xt, σt) onto the hyperplane and then onto X. The scheme
is formally stated in Figure 1. We set as initial solution of
the algorithm x0 the one obtained by the best reply among
SaaS according to the Gauss-Siedel scheme [15] and setting
σ0 = σU

k for all k.

We emphasize that constructing the hyperplane requires
a single projection onto the feasible set and employs an
Armijo-type line search. During the line search, moreover,
no projection onto X are required, but only function eval-
uations. Regarding the choice of the parameters, following
[19] we take βt+1 = median( ˆβ, θ αt βt, ˜β), where θ > 1 but
not too large, e.g. θ = 2.

The algorithm for the VI solution can be executed eﬃ-
ciently by the IaaS, under the assumption that the SaaSs
provide to the IaaS also the the incoming workload predic-
tion Λk for the next hour. Indeed, for the problem under
analysis the SaaS utility function slopes are advertised to
the cloud end-users and hence are known also by the IaaS.
6. EXPERIMENTAL RESULTS

The resource management algorithm proposed has been
evaluated for a variety of system and workload conﬁgura-

Therefore, in the feasible set X, its non-zero eigenvalues
(i.e., 3 a1, ··· , 3 a|A|) are positive (being mk < 0 and fk +
dk + sk > Λk
), and hence F results to be monotone2 (not
C µk
strictly).

Hence, we can calculate a variational equilibrium of the
GNEP associated to the service provisioning problem by
solving a monotone VI. Concerning the solution methods
for monotone VIs, the projection type methods are among
the simplest ones. These methods found on the well known
ﬁxed point reformulation of a VI:

∗ ∈ X solves V I(X, F ) iﬀ

z

∗

z

= ProjX (z

∗ − α F (z

∗

)) for any α > 0,

where ProjX denotes the orthogonal projection onto X.3

The important feature of these methods is that there is
not need of using derivative of F and they do not involve any
computation besides the function evaluation and the projec-
tion onto X. When the projection is easily computable, as
is our case, projection methods are extremely simple and
cheap. Among the projection type methods we consider the
2F is monotone on X if, for any w, z ∈ X, it holds that
(cid:104)F (w) − F (z), w − z(cid:105) ≥ 0.
3ProjX (z) = arg min{(cid:107)w − z(cid:107), w ∈ X} ∀ z ∈ Rn.

WWW 2011 – Session: Monetization IIMarch 28–April 1, 2011, Hyderabad, India182STEP 0. Select parameters ξ ∈ (0, 1), ˆβ, ˜β s.t. 0 < ˆβ ≤ ˜β
and a sequence {βt} ⊂ [ ˆβ, ˜β]. Let (x0, σ0) ∈ X and set
t = 0.

STEP 1. Compute (xt, σt) = (xt, σt) − βt F (xt, σt)
STEP 2. If (xt, σt) = ProjX (xt, σt) then STOP
STEP 3. Set j(t) the minimum j ≥ 0 :

−jProjX (xt, σt) + (1 − 2

−j)(xt, σt))(cid:105)
(cid:107)(xt, σt) − ProjX (xt, σt)(cid:107)2.

(cid:104)(xt, σt), F (2

≥ ξ
βt

Let αt = 2−j(t) and

(yt, δt) = αt ProjX (xt, σt) + (1 − αt) (xt, σt),

γk =

(cid:104)F (yt, δt), (xt, σt) − (yt, δt)(cid:105)

(cid:107)F (yt, δt)(cid:107)2

,

(xt+1, σt+1) = ProjX ((xt, σt) − γt F (yt, δt))

STEP 4. Set t = t + 1 and go to STEP 1.

Figure 1: Solution algorithm for VI.

tions. The application performance parameters have been
varied as considered in the literature (see e.g.
[25, 1, 9]
and references therein). Cloud providers time unit costs
have been varied according to the commercial fees currently
adopted [6]. Section 6.1 is devoted to quantitatively anal-
yse the single application case study presented in Section
4. Section 6.2 illustrates the variational equilibria proper-
ties on a medium size system. Finally, the scalability of the
algorithm reported in Figure 1 is discussed in Section 6.3.
6.1 Single Application Analysis
For the numerical analysis reported in this Section we set
Λ = 10 req/sec, C = 1, µ = 1 req/sec, and m = −1. Figures
2 and 3 report the plots of the SaaS and IaaS payoﬀ functions
ΘS an ΘI where we set σU = 0.09$, and we varied ϕ and
f U under the assumption that f U ≤ Λ/(C µ) (i.e., which
corresponds to rows 1-3 of Table 2). Under this hypothesis
the SaaS provider is under heavy load conditions since he
cannot serve the overall incoming workload by using only
his ﬂat resources. The plots show that under the condition
ϕ > σU the payoﬀ functions are constant, while when ϕ ≤
σU ΘS (ΘI ) increases (decreases) linearly with f U .

−m Λ

Figures 4 and 5 plot ΘS and ΘI as function of σU (Table
2 rows 4-6) under light workload conditions for the SaaS
(Λ < C µ f U ) where we set ϕ = 0.03$ and f U = 50. In this
case the behaviour of the payoﬀ functions changes crossing
(C µ f U −Λ)2 which with the considered
the marginal value
setting is equal to 0.0625$: When σU is greater than the
marginal value both ΘS and ΘI are constant, while increase
for lower values of σU . Indeed, the SaaS provider acquires
additional on spot instances to proﬁtably serve incoming end
users requests, while the IaaS obtains higher revenues selling
on spot instances.
6.2 Equilibria Sharing Analysis

The aim of this Section is to analyse how the on spot
VMs are shared among competing SaaS changing the game
parameters. The analysis results have been obtained by the
algorithm described in Section 5. In particular we consid-

Figure 2: SaaS payoﬀ function for f U ≤ Λ/(C µ).

Figure 3: IaaS payoﬀ function for f U ≤ Λ/(C µ).

ered two SaaS oﬀering ﬁve heterogeneous applications each.
If not diﬀerently stated we set sU = 40, C = 1, ϕ = 0.1$,
p = 20 (p ∈ {1, 2}), Λk = 1 req/s, µk = k req/s,
δ := 0.11$, f U
k = 0.09 for all k ∈ {1, 10}. In
mk = −1, σL
k = 0.03$, and σU
the following we will vary one parameter at the time for the
ﬁrst application k = 1, while the parameters of the remain-
ing ones will be held ﬁxed. Figures 6-9 show how the number
of resources devoted to the ﬁrst application (in terms of ﬂat,
on demand, and on spot instances) and the overall capacity
allocated to the remaining classes change as a function of
the varying parameter.
In particular, in Figure 6 the in-
coming workload Λ1 varies between 1 and 14 req/s. As the
Figure shows, all of the on spot instances available at the
IaaS are always used but, as the workload increases, they
are migrated from the other applications to application 1.
In order to proﬁtably sustain the workload, the number of
ﬂat instances used is also increased, but on demand VMs are
not used until Λ1 reaches 11 req/s. When Λ1 is further in-
creased the system starts allocating on demand VMs which
are more expensive but are needed to serve the incoming
requests. In general the resource allocation trends are linear

WWW 2011 – Session: Monetization IIMarch 28–April 1, 2011, Hyderabad, India1831 is supported by ﬂat instances. Also in this scenario on
demand VMs are never used and the trends are linear. This
is very unintuitive, since increasing the maximum time unit
cost one is willing to pay for a given application implies
that the number of on spot instances devoted to the same
application is reduced.

Figure 6: Resource allocation with varying applica-
tion 1 incoming workload.

Figure 7: Resource allocation with varying applica-
tion 1 utility function slope.

Figure 8: Resource allocation with varying applica-
tion 1 maximum service rate.
6.3 Scalability Analysis

To evaluate the scalability of our resource allocation algo-
rithm we have considered a very large set of randomly gener-
ated instances. All tests have been performed on VMWare
virtual machine based on Ubuntu 9.10 server running on
an Intel Nehalem dual socket quad-core system with 32 GB
of RAM. The virtual machine has a physical core dedicated
with guaranteed performance and 4 GB of memory reserved.
KNITRO 7.0 has been use as non linear optimization solver.

Figure 4: SaaS payoﬀ function for Λ < C µ f U .

Figure 5: IaaS payoﬀ function for Λ < C µ f U .

with Λ1, the discontinuities in the plots are due to the fact
that the equilibrium is not unique and hence the same per-
formance and revenues can be obtained with multiple values
of (fk, dk, sk).

Figure 7 shows the resource sharing at the equilibrium
changing the slope of application 1 utility function (which
has been varied in the range [−15,−1]). As in the previous
analysis, the on spot capacity is migrated to application 1
which becomes more sensible to response time variations and
hence requires additional capacity. However, in this case the
adoption of on demand instances is never proﬁtable.

Figure 8 analyses how the variational equilibrium changes
by varying application 1 maximum service rate (the range
[0.05, 1] req/s has been considered). If the maximum service
rate increases the service time required to process each appli-
cation 1 request decreases and the overall capacity required
to process application 1 decreases accordingly. Hence, in
this case on spot instances are migrated from application
1 to the other classes and on demand instances are used
only when application 1 requests are very CPU intensive
(µ1 < 0.1 req/s).

Finally, Figure 9 shows how the equilibrium changes by
varying the maximum time unit cost for application 1 (σU
1
has been varied in the range [0.1, 1]$; we set ϕ = 0.03$,
while for the remaining classes σL
k = 0.02$).
As σU
1 increases the number of on spot VMs allocated to
application 1 decreases since the IaaS set σ1 = σU
1 and the
SaaS provider can use in a more cost eﬃcient way the on spot
VMs to serve his remaining applications, while application

k = 0.01$ and σU

WWW 2011 – Session: Monetization IIMarch 28–April 1, 2011, Hyderabad, India184seeking an equilibrium, or stable operating point for the sys-
tem. A survey of diﬀerent modelling and solution concepts
of networking games, as well as a number of diﬀerent appli-
cations in telecommunications and wireless networks, based
on Game Theory, can be found in [5].

With respect to telecommunication applications, a rich
literature exists which includes solutions for ﬂow and con-
gestion control [3], network routing [4], ﬁle allocation [24],
load balancing [22], resource allocation [17] and quality of
service provisioning [14].

In [18] a Markovian queueing network model is used to
derive decentralized ﬂow control mechanisms in computer
communication networks with multiple controllers.

In the setting of optimal routing strategies, [23] investi-
gates the existence of Nash equilibria in noncooperative ﬂow
control in a general product-form network shared by multi-
ple end-users introduced in [18]. The goal is to study the ex-
istence of Nash equilibria for decentralized control schemes.
This approach is based on directly proving the existence of
a ﬁxed point of the best response correspondence of the un-
derlying game.

In [27] the authors examine the problem of communica-
tion delays for two main types of heterogeneous systems: (i)
systems where all the nodes have the same processing rates
and capabilities but the arrival rate of local jobs at nodes
may not be the same, and (ii) systems where diﬀerent nodes
may process jobs at diﬀerent rates.

In [16] the static load balancing problem in heterogeneous
distributed systems is formulated as a noncooperative game
among users. Based on the Nash equilibrium concept, the
authors derive a distributed load balancing algorithm, whose
performance are compared with that of other existing schem-
es. The main advantages of the proposed approach are the
distributed structure, low complexity and optimality of al-
location for each user. Finally, authors in [7] analyze the
impact of non-cooperative users in a system of multiple par-
allel non-observable queues by studying the Price of Anarchy
(PoA), the worst-case performance loss of the selﬁsh equi-
librium with respect to its centralized counterpart.

Regarding Cloud computing, the use of Game Theory for
the resource allocation problem is investigated in [30]. Here,
the authors start from a bid proportional auction resource
allocation model and propose an incomplete common infor-
mation model where one bidder does not know how much
the others would like to pay for the computing resource. To
this end a Bayesian learning mechanism is introduced.

In [2], the authors consider centralized and decentralized
load balancing strategies in a system with multiple and het-
erogeneous processor sharing servers. Each server has an
associated service capacity and a holding cost per unit time.
The requests arrive as a Poisson process, and the service
time of incoming jobs is assumed to be know. For such sys-
tem, the load balancing problem is investigated.

In [32] the authors propose a pricing mechanism for allo-
cation capacity in a utility computing system among com-
peting end-users requests. The ﬁxed available service capac-
ity is allocated among the diﬀerent ﬂows proportionally to
their monetary bids. The paper studies the resulting equi-
librium point, establishes convergence of a best-response al-
gorithm, and bounds the eﬃciency loss (PoA) of this dis-
tributed mechanism.

Diﬀerently from our point of view, in [32] the problem of
the capacity allocation is considered for a single virtualized

Figure 9: Resource allocation with varying applica-
tion 1 on spot maximum time unit cost.

The number of SaaS provider has been varied between 10
and 80, the number of applications (evenly shared among
SaaSs) between 100 and 800.

The performance parameters of Web applications and in-
frastructural resources costs have been randomly generated
uniformly in the ranges reported in Table 3 as in other lit-
erature approaches [1, 9, 25] and according to commercial
fees applied by IaaS cloud providers [6].

sU
Λk
mk
ϕ
σL
k

[100,1000]
[1,100] req/s
[-10,-1] req/s
[0.03,0.24]$
[0.02,0.08]$

C
µk

δ
σU
k

[1,3]
[1,10] req/s

[0.08,1.24]$
[0.09,0.30]$

Exe. Time (s)

Exe. Time (s)

Table 3: Performance parameters and time unit cost
ranges.
N,|A|
10,1000
20,2000
30,3000
40,4000
50,5000

N,|A|
60,6000
70,7000
80,8000
90,9000

125.7
259.2
298.5
186.4
258.0

18.9
133.8
299.4
115.5
116.4

100,10000

Table 4: VI algorithm average execution time and
number of iterations.

Table 4 reports, for problem instances of diﬀerent sizes,
the average computational time in seconds for the algorithm
reported in Figure 1 starting from the initial best reply so-
lution (the means are computed on ten diﬀerent runs). The
average number of iterations over the whole set of runs is
around 5. Since problems with a size comparable with real
systems [28] including thousands of VM instances and hun-
dreds of SaaS providers can be solved in the worst case in less
than twenty minutes, our approach can be used to support
the run time management of real cloud infrastructures.
7. RELATED WORK

The recent development of Cloud systems and the rapid
growth of the Internet have led to a remarkable development
in the use of the Game Theory tools. Problems arising in
the ICT industry, such as resource or quality of service al-
location problems, pricing, and load shedding, can not be
handled with classical optimization approaches. Interaction
across diﬀerent players is non-negligible: Each player can be
aﬀected by the actions of all players, not only her own ac-
tion. In this setting, a natural modelling framework involves

WWW 2011 – Session: Monetization IIMarch 28–April 1, 2011, Hyderabad, India185server among competing user requests, while in this paper
we consider the infrastructure data center at a higher gran-
ularity (i.e., VMs).

8. CONCLUSIONS

We proposed a game theory based approach for the run
time management of a IaaS provider capacity among mul-
tiple competing SaaSs. The model includes infrastructural
costs and revenues deriving form cloud end-users which de-
pend on the achieved level of performance of individual re-
quests. Future work will validate of our solution by perform-
ing experiments in real cloud environments. Furthermore,
a comparison with the heuristic solutions adopted by SaaS
and IaaS providers for the run time cloud management will
be also performed.

9. REFERENCES
[1] J. M. Almeida, V. A. F. Almeida, D. Ardagna, I. S.

Cunha, C. Francalanci, and M. Trubian. Joint
admission control and resource allocation in
virtualized servers. J. Parallel Distrib. Comput.,
70(4):344–362, 2010.

[2] E. Altman, U. Ayesta, and B. Prabhu. Load balancing
in processor sharing systems. In ValueTools ’08 Proc.,
pages 1–10, ICST, Brussels, Belgium, Belgium, 2008.
[3] E. Altman and T. Basar. Multi-user rate-based ﬂow

control. IEEE Trans. on Communications,
46(7):940–949, 1998.

[4] E. Altman, T. Basar, T. Jimenez, and N. Shimkin.

Competitive routing in networks with polynomial cost.
IEEE Trans. on Automatic Control, 47(1):92–96, 2002.

[5] E. Altman, T. Boulogne, R. El-Azouzi, T. Jim´enez,

and L. Wynter. A survey on networking games in
telecommunications. Comput. Oper. Res.,
33(2):286–311, 2006.

[6] Amazon Inc. Amazon Elastic Cloud.

http://aws.amazon.com/ec2/.

[7] J. Anselmi and B. Gaujal. Optimal routing in parallel,

non-observable queues and the price of anarchy
revisited. In Teletraﬃc Congress (ITC), 2010 22nd
International, 2010.

[8] D. Ardagna, B. Panicucci, and M. Passacantando. A

Game Theoretic Formulation of the Service
Provisioning Problem in Cloud Systems. Politecnico di
Milano, Technical Report 2010.22.
http://home.dei.polimi.it/ardagna/CloudTechRep.pdf.
[9] D. Ardagna, B. Panicucci, M. Trubian, and L. Zhang.

Energy-Aware Autonomic Resource Allocation in
Multi-tier Virtualized Environments. IEEE Trans. on
Services Computing. To appear, available on line.

[10] M. Bennani and D. Menasc´e. Resource Allocation for
Autonomic Data Centers Using Analytic Performance
Models. In IEEE Int’l Conf. Autonomic Computing
Proc., 2005.

[11] G. Bolch, S. Greiner, H. de Meer, and K. Trivedi.
Queueing Networks and Markov Chains. J. Wiley,
1998.

[12] E. Cavazzuti, M. Pappalardo, and M. Passacantando.

Nash equilibria, variational inequalities, and
dynamical systems. J. of Optimization Theory and
Applications, 114(3):491–506, 2002.

[13] G. Debreu. A social equilibrium existence theorem.

Proc. of the National Academy of Sciences of the
USA, 38:886–893, 1952.

[14] R. El-Azouzi and E. Altman. Constrained traﬃc

equilibrium in routing. IEEE/ACM Trans. on
Automatic Control, 48(9):1656–1660, 2003.

[15] F. Facchinei and C. Kanzow. Generalized Nash

equilibrium problems. Ann. Oper. Res., 175:177–211,
2010.

[16] D. Grosu and A. Chronopoulos. Noncooperative load
balancing in distributed systems. J. Parallel Distrib.
Comput., 65(9):1022–1034, 2005.

[17] M. Haviv. The aumann-shapely pricing mechanism for

allocating congestion costs. Operations Research
Letters, 29(5):211–215, 2001.

[18] T. Hsiao and A. Lazar. Optimal decentralized ﬂow

control of markovian queueing networks with multiple
controllers. Performance Evaluation, 13(3):181–204,
1991.

[19] A. N. Iusem and B. F. Svaiter. A variant of

korpelevich’s method for variational inequalities with
a new search strategy. Optimization, 42(4):309–321,
1997.

[20] J. Hamilton. Using a Market Economy.

http://perspectives.mvdirona.com/2010/03/23/Using
AMarketEconomy.aspx.

[21] S. Kakutani. A generalization of Brouwer’s ﬁxed point
theorem. Duke Mathematical Journal, 8:457–459, 1941.
[22] H. Kameda, E. Altman, T. Kozawa, and Y. Hosokawa.

Braess-like paradoxes in distributed computer
systems. IEEE Trans. on Automatic Control,
45(9):1687–1691, 2000.

[23] A. Korilis and A. Lazar. On the existence of equilibria

in noncooperative optimal ﬂow control. J. ACM,
42(3):584–613, 1995.

[24] J. Kurose and R. Simha. A microeconomic approach

to optimal resource allocation in distributed computer
systems. IEEE Trans. on Computers, 38(5):705–717,
1989.

[25] D. Kusic, J. O. Kephart, N. Kandasamy, and

G. Jiang. Power and Performance Management of
Virtualized Computing Environments Via Lookahead
Control. In ICAC 2008 Proc., 2008.

[26] D. A. Menasc´e and V. Dubey. Utility-based QoS

Brokering in Service Oriented Architectures. In IEEE
ICWS Proc., pages 422–430, 2007.

[27] R. Mirchandaney, D. Towsley, and J. Stankovic.

Adaptive load sharing in heterogeneous distributed
systems. J. Parallel Distrib. Comput., 9(4):331–346,
1990.

[28] A. Qureshi, R. Weber, H. Balakrishnan, J. Guttag,

and B. Maggs. Cutting the electric bill for
internet-scale systems. In SIGCOMM ’09 Proc., pages
123–134, New York, NY, USA, 2009. ACM.

[29] SpotHistory.com. Spot Instance Price History Graphs.

http://www.spothistory.com/.

[30] F. Teng and F. Magoules. A new game theoretical

resource allocation algorithm for cloud computing. In
Advances in Grid and Pervasive Computing, pages
321–330, 2010.

[31] B. Urgaonkar and P. Shenoy. Sharc: Managing CPU

and Network Bandwidth in Shared Clusters. IEEE
Trans. on Parallel and Distr. Systems, 15(1):2–17,
2004.

[32] B. Yolken and N. Bambos. Game based capacity
allocation for utility computing environments. In
ValueTools ’08 Proc., pages 1–8, ICST, Brussels,
Belgium, Belgium, 2008.

Acknowledgements
The authors express many thanks to Dr. Bernardetta Addis
for very fruitful discussions on non linear solver issues. The
work of Danilo Ardagna and Barbara Panicucci has been
supported by the GAME-IT research project funded by Po-
litecnico di Milano. The work of Danilo Ardagna has been
supported also by the FP7 IDEAS-ERC project SMScom.

WWW 2011 – Session: Monetization IIMarch 28–April 1, 2011, Hyderabad, India186