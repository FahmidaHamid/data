SAILER: An Effective Search Engine for Uniﬁed Retrieval

of Heterogeneous XML and Web Documents

Guoliang Li, Jianhua Feng, Jianyong Wang, Xiaoming Song, and Lizhu Zhou

Department of Computer Science and Technology, Tsinghua University, Beijing 100084, P. R. China

{liguoliang,fengjh,jianyong,dcszlz}@tsinghua.edu.cn;songxm07@mails.tsinghua.edu.cn

ABSTRACT
This paper studies the problem of uniﬁed ranked retrieval
of heterogeneous XML documents and Web data. We pro-
pose an eﬀective search engine called Sailer to adaptively
and versatilely answer keyword queries over the heteroge-
nous data. We model the Web pages and XML documents
as graphs. We propose the concept of pivotal trees to ef-
fectively answer keyword queries and present an eﬀective
method to identify the top-k pivotal trees with the high-
est ranks from the graphs. Moreover, we propose eﬀective
indexes to facilitate the eﬀective uniﬁed ranked retrieval.
We have conducted an extensive experimental study using
real datasets, and the experimental results show that Sailer
achieves both high search eﬃciency and accuracy, and out-
performs the existing approaches signiﬁcantly.
Categories and Subject Descriptors
H.2.8 [Database Applications ]: Miscellaneous
General Terms
Algorithms, Performance, Languages
Keywords
Keyword Search, XML, Web Pages, Uniﬁed Keyword Search
1.

INTRODUCTION

Existing web search engines cannot integrate the infor-
mation from multiple interrelated pages to answer keyword
queries meaningfully. The next-generation Web search en-
gines require link-awareness, or more generally, the capabil-
ity of integrating the correlative information that are linked
through hyperlinks. For example, to search for the con-
ferences including the topic of “Information Retrieval”
and held in “Beijing 2008”, users issue a keyword query of
"Conference 2008 Beijing Information Retrieval" to a
search engine like GOOGLE. As we all know, "WWW 2008" is
held in Beijing and “Information Retrieval” is one of its
major research topics, but surprisingly, the homepage of
"WWW 2008" is not in the top-10 results and not even in
the ﬁrst one hundred answers either. This is because "WWW

Copyright is held by the author/owner(s).
WWW 2008, April 21–25, 2008, Beijing, China.
ACM 978-1-60558-085-2/08/04.

2008" splits its information into several pages methodically.
The page of Important Date contains keywords "2008,Con-
ference", "Information Retrieval" is contained in the page
of Call-For-Paper and "Beijing" is included in the home-
page. Consequently, existing search engines often include a
number of false negatives due to the limitation of their mod-
els which take only a list of individual pages as the result but
neglect the fact that interrelated pages linked by hyperlinks
may be more meaningful. However, this is not an ad hoc
problem but ubiquitous over the Internet.

As XML is widely recognized as the data interchange stan-
dard over the Internet, the research community has been in-
troducing keyword search capability into XML documents[3,
4, 5]. To the best of our knowledge, few existing works could
be universally applied to Web pages and XML documents.
Therefore, providing both eﬀective and eﬃcient search abil-
ity over such heterogeneous collections within a single search
engine remains a big challenge. This calls for a framework
for indexing and querying over large collections of heteroge-
neous data. To address these problems, we propose an eﬀec-
tive search engine Sailer based on Structure-Aware Index-
ing for uniﬁed retrievaL of hetERogeneous XML and web
documents. As opposed to the traditional search engines,
which return a list of individual pages as the results, Sailer
extracts a set of relevant pages, which are highly interrelated
and related to queries.
2. SAILER
2.1 Graph Modeling

We model the Web pages and XML documents as graphs,
where the nodes are respectively pages and elements and
links are hyperlinks between pages and parent-child rela-
tionships (or IDREF) in XML documents. We can translate
the problem of keyword search over the heterogeneous data
to the problem of ﬁnding the connected trees with minimal
cost over the graphs, which contain all or a part of input
keywords, called Steiner trees. However, it is fairly diﬃ-
cult to extract the Steiner trees in a large graph, which is
NP-hard [1]. Alternatively, we devise indices for facilitating
keyword-based search over large graphs.
2.2 Pivotal Trees

Definition 1. (Pivotal Node) Given a graph G, a key-
word ki, and a node n ∈ G that directly or indirectly contains
ki, the node pn(ki,n), which directly contains ki and has the
minimal distance with n, is called a pivotal node. That is,

pn(ki,n)=argminnr{δ(nr,n)|nr ∈ G},

where nr directly contains ki and δ(nr,n) denotes the dis-
tance between nr and n.

1061WWW 2008 / Poster PaperApril 21-25, 2008 · Beijing, ChinaDefinition 2. (Pivotal Tree) Given a keyword query
K={k1, k2,··· , km}, and a graph G, consider node n ∈ G,
the subtree rooted at n and containing the pivotal paths from
n to every pivotal node pn(ki,n) is called a Pivotal Tree.

Pivotal trees are compact connected trees in the graph,
which contain all the input keywords, and therefore they
can be taken as the answers of keyword queries.
2.3 Ranking
We present how to eﬀectively rank the pivotal trees. Given
a pivotal tree PT and a keyword query K={k1, k2,··· , km},
we present Equation 1 to rank the pivotal tree PT .
Score(root(PT ), ki)

Score(K,PT ) =

m(cid:88)

(1)

k=1

where root(PT ) denotes the root of PT . Score(root(PT , ki))
denotes the score of ki in PT . Given any node n and a key-
word ki, we present how to assign the score of ki in n (i.e.,
Score(n, ki)) as follows. If n directly contains ki, we pro-
pose Equation 2 to compute Score(n, ki).

Score(n, ki) =

ln(1 + tf (ki, n)) ∗ ln(idf (ki))

(1 − s) + s ∗ ntl(n)

(2)

where tf (ki,n) denotes the term frequency of ki in n; idf (ki)
denotes the inverse document frequency of ki; ntl(n) denotes
the normalized term length of n and ntl(n)=
, where
|n| denotes the number of terms in n and |G| denotes the
number of nodes in G; s is a constant and usually set to 0.2.
If n indirectly contains ki, we present Equation 3 to com-

n(cid:48)∈G |n(cid:48)|

(cid:80)

|n|

|G|

pute Score(n, ki).

Score(n, ki) =

Score(pn(ki,n), ki)

σδ(pn(ki,n),n)

(3)

where σ is an attenuation factor. Obviously, the larger dis-
tance between ki and n, the less relevant between them. We
experimentally prove that σ is usually set to 0.8.

Note that, Score(pn(ki,n), ki) can be computed based on
Equation 2, as pn(ki,n) directly contains ki and δ(pn(ki,n), n)
can be pre-computed oﬀ-line. Accordingly, we can score the
nodes that indirectly or directly contain the keywords based
on Equation 2 and Equation 3.
2.4 Indexing

We note that Score(n, ki) in Equation 2 and Equation
3 can be pre-computed oﬀ-line and thus we can materialize
such scores into the index. The entries of the index are the
keywords that contained in the graph. Diﬀerent from in-
verted indices which only maintain the nodes that directly
contain the keyword, each entry of index preserves the nodes
that directly or indirectly contain the keyword in the form
of a triple <Node, Score, Pivotal Path>, where the Score
is the assigned score of the keyword in the Node, and Piv-
otal Path preserves the path from Node to the corresponding
pivotal node. Accordingly, the index captures the rich struc-
tural relationships as each entry preserves the paths from a
given node to the corresponding pivotal node.

3. EXPERIMENTAL STUDY

We have designed and performed a comprehensive set of
experiments to evaluate the performance of our approach.
We crawled a huge amount of real data from the Internet.

(a) Search Eﬃciency

(b) Search Quality

Figure 1: Search Eﬃciency and Quality

There are four types of data in our dataset: i) the homepages
of top conferences, such as WWW, SIGIR, SIGMOD and so
on; ii) the hompages of research groups; iii) the homepages
of researchers; iv) XML, PDF, WORD and PPT documents.
There were approximate 100,000,000 documents. The exper-
iments were conducted on an Intel(R) Pentium(R) 2.4GHz
computer with 1GB of RAM. The algorithms were imple-
mented in Java. We compared Sailer with state-of-the-art
methods, Information Unit [6], and SphereSearch [2]. We
selected one hundred queries for the experiments. We gave
the elapsed time of the ﬁrst ten queries and the average
precision of all the queries as illustrated in Figure 1.

4. CONCLUSION

In this paper, we have investigated the problem of uni-
ﬁed retrieval over heterogeneous web pages and XML doc-
uments. We modeled the heterogeneous data as graphs and
identiﬁed the pivotal trees to answer keyword queries. We
proposed indexes for facilitating the identiﬁcation of pivotal
trees. We have conducted an extensive performance study
to evaluate the search eﬃciency and quality of our method.
The experimental results show that our approach achieves
both high search eﬃciency and quality, and outperforms the
existing approaches signiﬁcantly.

5. ACKNOWLEDGEMENT

This work is partly supported by the National Natural Sci-
ence Foundation of China under Grant No.60573094, the Na-
tional High Technology Development 863 Program of China
under Grant No.2007AA01Z152 and 2006AA01A101, the
National Grand Fundamental Research 973 Program of China
under Grant No.2006CB303103.

6. REFERENCES
[1] Gaurav Bhalotia, Arvind Hulgeri, Charuta Nakhe, Soumen

Chakrabarti, and S. Sudarshan. Keyword searching and
browsing in databases using banks. In ICDE, 2002.

[2] Jens Graupmann, Ralf Schenkel, and Gerhard Weikum. The

spheresearch engine for uniﬁed ranked retrieval of
heterogeneous xml and web documents. In VLDB, 2005.

[3] Guoliang Li, Jianhua Feng, Jianyong Wang, and Lizhu

Zhou. Eﬃcient keyword search for valuable lcas over xml
documents. In CIKM, 2007.

[4] Guoliang Li, Beng Chin Ooi, Jianhua Feng, Jianyong Wang,

and Lizhu Zhou. EASE: Eﬃcient and Adaptive Keyword
Search on Unstructured, Semi-structured and Structured
Data. In SIGMOD, 2008.

[5] Guoliang Li, Jianhua Feng, Jianyong Wang, and Lizhu

Zhou. RACE: Finding and Ranking Compact Connected
Trees for Keyword Proximity Search over XML Documents.
In WWW, 2008.

[6] Wen-Syan Li, K. Selcuk Candan, Quoc Vu, and Divyakant

Agrawal. Retrieving and organizing web pages by
‘information unit’. In WWW, 2001.

 0 100 200 300 400 500 600 700 800 900 1000Q10Q9Q8Q7Q6Q5Q4Q3Q2Q1Elapsed Time(ms)QueriesInfo UnitSphereSearchSailer 50 60 70 80 90 100Top-100Top-50Top-20Top-10Top-5Top-1Top-k PrecisionTop-kInfo UnitSphereSearchSailer1062WWW 2008 / Poster PaperApril 21-25, 2008 · Beijing, China