Speeding Up Web Service Composition with Volatile

External Information

John Harney

LSDIS Lab, Dept. of Computer Science

University of Georgia, GA 30602

jfh@cs.uga.edu

ABSTRACT
This paper introduces a novel method for composing Web services
in the presence of external volatile information. Our approach,
which we call the informed-presumptive, is compared to previous
state-of-the-art approaches for Web service composition in volatile
environments. We show empirically that the informed-presumptive
strategy produces compositions in signiﬁcantly less time than the
other strategies with lesser backtracks.

Categories and Subject Descriptors
H.3.5 [Online Information Systems]: Web-based Services

General Terms
Algorithms, Theory

Keywords
Web services, Adaptation, Volatile environments, Expiration times

1.

INTRODUCTION

Web service compositions (WSCs) are an important area of study
in services oriented computing. They offer the potential for auto-
matically formulating processes in an efﬁcient and timely manner.
WSCs are predominantly modeled as being static, where the par-
ticipating services are assumed to exhibit ﬁxed quality of service
(QoS) parameters during the composition and execution. However,
in practice, WSC environments are often volatile – QoS of partic-
ipating services may change during the composition. Therefore,
WSCs must compose in the presence of this volatility.

Previous approaches [?, ?] associate expiration times with the
service parameters. When the parameters of the component ser-
vices expire, the WSC issues a query to gather the updated infor-
mation. If the new parameter values are different from the previous
ones, the WSC backtracks to the step in the composition where the
service with the revised parameters is used. A signiﬁcant limitation
of these approaches is that some of the backtracks are redundant –
changes in the parameter values do not necessitate changes in the
composition. As excessive backtracking leads to time-consuming
compositions, we may improve on these approaches by reducing
the amount of backtracking.

We introduce a new method for managing volatility during com-
position, which we call the informed-presumptive approach. The
method predicts whether the newly queried parameter values will
cause signiﬁcant changes in the composition. If the composition is

Copyright is held by the author/owner(s).
WWW 2008, April 21–25, 2008, Beijing, China.
ACM 978-1-60558-085-2/08/04.

Prashant Doshi

LSDIS Lab, Dept. of Computer Science

University of Georgia, GA 30602

pdoshi@cs.uga.edu

expected to change due to the revised parameters, then the informed-
presumptive will backtrack to the point in the composition where
the queried service occurs. Otherwise, it ignores the changed pa-
rameter value, as its impact on the composition is negligible. Thus,
we seek to ﬁnd a range of revised values that are expected to in-
duce a change in the composition. Using the technique of gradient
descent, we ﬁnd the ranges of values with minimal computational
overhead. In using the informed-presumptive, we form composi-
tions in less time compared to previous state-of-the-art strategies,
by eliminating backtracks that are not required. We empirically
demonstrate the speed up using a simulated volatile environment.

2. METHODOLOGY
For a composition problem containing states, S, and component
services, A, we ﬁnd the service(s) to be invoked at each state s ∈ S.
Let ˆA(s) ∈ A be the choice of services available at each state. The
composition ﬁnds the optimal service(s) that maximizes the value
function:

π

∗(s) = argmax
a∈ ˆA(s)

V a

(1)

∗

In Eq. ??, π
is the optimal policy which maps each state to the
∗ : S → A; In deﬁning
optimal service(s) to invoke at that state, π
the value function, V a, we borrow from [?], and use a weighted
summation of the QoS parameters of the service, a, and sum over
all services in the composition. We use the normalized cost, ¯C a,
and availability ¯Ava.

Let (cid:3)pa denote the revised parameter value vector for the service,

a:

(cid:3)pa def= [ ¯C

(cid:4)a, ¯Av

(cid:4)a]

(2)
(cid:4)a are the revised cost and availability obtained
where ¯C
by querying service a. (Of course, (cid:3)pa can be extended to account
for other QoS parameters as well.)

(cid:4)a and ¯Av

As a change in the value function indicates a change in the com-
position, we seek those revised parameter vectors for each service
that bring a change in the value function. Let π be the original pol-
be the revised policy given the new parameter vector,
icy and π
then we ﬁnd all (cid:3)pa for which:

∗

∗

((cid:3)pa) − V π((cid:3)pa) = 0

V π

(3)

∗

V π((cid:3)pa) is the expected value of the original composition, π, in the
presence of the revised parameter vector, (cid:3)pa, of service a, while
((cid:3)pa) is the value of the composition following the optimal pol-
V π
∗
. The parameter vectors, (cid:3)pa, that satisfy Eq. ?? are those for
icy π
which no backtracking is needed.

We may view the difference in Eq. ?? as the error in using the
original composition given the revised parameter vector, (cid:3)pa, and

1201WWW 2008 / Poster PaperApril 21-25, 2008 · Beijing, ChinaLazy
Eager
Presumptive
Informed-Presumptive

 1400

 1200

 1000

 800

 600

 400

 200

Average Composition Times

Lazy
Eager
Presumptive
Informed-Presumptive

 1400

 1200

 1000

 800

 600

 400

 200

t

 

s
p
e
S
e
m
T
n
o

 

i

i
t
i
s
o
p
m
o
C

t

 

s
p
e
S
e
m
T
n
o

 

i

i
t
i
s
o
p
m
o
C

Lazy
Eager
Presumptive
Informed-Presumptive

 1400

 1200

 1000

 800

 600

 400

 200

t

 

s
p
e
S
e
m
T
n
o

 

i

i
t
i
s
o
p
m
o
C

 0

 0

 0.2

 0.4
 0.6
Change Likelihood

(a)

 0.8

 1

 0

 0

 0.2

 0.4
 0.6
Change Likelihood

(b)

 0.8

 1

 0

 0

 0.2

 0.8

 1

 0.4
 0.6
Change Likelihood

(c)

Figure 1: The average composition time for the four strategies with a volatility ratio of (a)1, (b).5, (c).33.

denote the difference as E((cid:3)pa). This allows us to model the prob-
lem of ﬁnding the vectors satisfying Eq. ?? as a gradient descent
where we descend down the error surface, E((cid:3)pa), until we reach
the minimal plateau (E((cid:3)pa) = 0). For performing the gradient
descent, we update (cid:3)pa in the following way:

(cid:3)pa ← (cid:3)pa + Δ(cid:3)pa

(4)

where

Δ(cid:3)pa = −η∇E((cid:3)pa)

(5)
Here, η is the step size, 0 ≤ η ≤ 1. The negative sign indicates
that we take a step in the direction of the reducing gradient. For our
application, the deﬁnition for ∇E(˜pa) is the vector:

∇E((cid:3)pa) = [ ∂E((cid:3)pa)
∂ ¯Ca ,

(6)
Fortunately, Theorem ?? simpliﬁes the task of ﬁnding ∇E((cid:3)pa).
THEOREM 1. As V a is a linear function of the QoS parameters

∂E((cid:3)pa)
∂ ¯Ava ]

of a service, a, the gradient ∇E((cid:3)pa) is constant.

Theorem ?? allows us to perform gradient descent with minimal

computational overhead, as we show later.
3. EXPERIMENT

Our experimental evaluation focuses on comparing composition
times when using the informed-presumptive approach and the pre-
viously existing strategies. These are:
•The eager strategy, which on service expiration, issues a query to
the service for the revised information. It suspends the WSC until
the revised information is received and backtracks if there is a dif-
ference in the QoS value.
• The lazy strategy, which on service expiration, issues a query and
continues the WSC until completion, at which point the revised in-
formation is processed. It backtracks if there is a difference in the
QoS value.
• The presumptive strategy, which on service expiration, issues a
query and continues the WSC until the revised information is re-
ceived, It backtracks if there is a difference in QoS value.

Among these strategies, the presumptive approach was shown to

perform the best.

For our experiments, we utilized a travel planning scenario in a
simulated volatile environment, and implemented the above strate-
gies in addition to the informed-presumptive.

Each component of a travel plan (ie. booking a plane ticket, re-
serving a hotel room, and renting a car) is a single step in the com-
position. At each step, we gave a choice of 10 vendor Web services,

with varying cost and availability values. Let the time to compose
a step in the composition (without any backtracks) be ts
comp, the
expiration time for a service a be ta
exp, and the query lag time for
Qlag. We use two measurements of volatility, (a) the
a service be ta
volatility ratio, t
, which signiﬁes how often a service expires
during the composition of a single step, and (b) the likelihood that
the QoS parameter of a service will change upon expiration.

s
comp
ta
exp

4. RESULTS

Figure ?? shows the results of our experiments for volatility ra-
tios 1, 0.5, and 0.33. In Figure ??(a), we see that when services of-
ten expire during composition, the informed-presumptive approach
shows lower composition times on average than the other strate-
gies. However, at a low likelihood of change (≤ 20 percent), the
informed-presumptive performs slightly worse as precision errors
due to overstepping in the gradient descent become visible.
In
Fig. ??(b), the informed-presumptive has a signiﬁcantly better av-
erage composition time than the others. For lower volatility levels,
such as 0.33 (Figure ??c), the informed-presumptive continues to
outperform the strategies, although the services expire less often.
The improved composition times of the informed-presumptive are
achieved by eliminating unnecessary backtracks employed by the
other strategies.

5. CONCLUSIONS AND FUTURE WORK

We have introduced a new approach for managing WSC in volatile
environments that outperforms previous state-of-the-art composi-
tion strategies. We show that a signiﬁcant time speed-up may be
gained by predicting whether changed parameters induce changes
in the composition, thus eliminating unnecessary backtracks.

When complex value functions and dependencies are introduced
to the composition, performing gradient descent is likely to become
a time-consuming task. Thus, our future work will explore imple-
menting our approach on more complex compositions.

6. REFERENCES
[1] V. Agarwal, G. Chaﬂe, K. Dasgupta, N. Karnik, A. Kumar,

S. Mittal, and B. Srivastava. Synthy: A system for end to end
composition of web services. JWSR, 3(4), 2005.

[2] T.-C. Au, U. Kuter, and D. S. Nau. Web service composition

with volatile information. In ISWC, 2005.

[3] T.-C. Au and D. Nau. Reactive query policies: A formalism

for planning with volatile external information. In CIDM,
2007.

1202WWW 2008 / Poster PaperApril 21-25, 2008 · Beijing, China