Using CEP Technology to Adapt Messages

Exchanged by Web Services∗

Yehia Taher1,2, Marie-Christine Fauvet2, Marlon Dumas3, Djamal Benslimane1

1 Claude Bernard University of Lyon

LIRIS, 23 bd 11 Novembre, 696222 Villeurbanne cedex, France

2 University of Grenoble, LIG (MRIM)

385 rue de la bibliothèque – B.P. 53 – 38041 Grenoble Cedex 9, France

3Institute of Computer Science, University of Tartu

J Liivi 2, Tartu 50409, Estonia
Yehia.Taher@liris.cnrs.fr

ABSTRACT
Web service may be unable to interact with each other be-
cause of incompatibilities between their interfaces. In this
paper, we present an event driven approach which aims at
adapting messages exchanged during service interactions.
The proposed framework relies on Complex Event Process-
ing (CEP) technology, which provides an environment for
the development of applications that need to continuously
process, analyse and respond to event streams. Our main
contribution is a system that enables developers to design
and implement CEP-based adapters. These latter are de-
ployed in a CEP engine which is responsible for continuously
receiving messages and processing them according to rules
implemented by the adapters. Resulting transformed mes-
sages are thus forwarded to their original service recipient.

Categories and Subject Descriptors
H.3.5 [Information Storage and Retrieval]: Online In-
formation Services—Web-based services

General Terms
Design, Experimentation, Management

Keywords
Web service adaptation, CEP technology

1.

INTRODUCTION

The interface of a Web service is deﬁned as the set of
messages it can send and receive and the inter-dependencies
between them. It is a contract the service and its partners
must respect. When an existing service has to interact with
another one, their interfaces are more likely to be incompat-
ible [?]. When this happens, they are two options: (i) force
one of the services to support a new (compatible) interface.
This solution is usually unsatisfactory because services then

∗This work is funded by the project Web Intelligence granted

by the French Rhˆone-Alpes Region. Most of it was done
when Yehia Taher was visiting the BPM Group at QUT,
Brisbane.

Copyright is held by the author/owner(s).
WWW 2008 April 21–25, 2008, Beijing, China.
ACM 978-1-60558-085-2/08/04

have to expose as many interfaces as interactions they are
involved in. (ii) supply an adapter responsible for receiv-
ing, adapting, and transmitting messages from one service
to the other despite incompatibilities of their interfaces [?].
Implementing ad-hoc adapters is a costly and tedious task.
Moreover, most of the time an adapter is speciﬁc to a pair
of services and cannot be reused [?].

The study presented in this paper aims at designing a
framework for specifying and generating Web service adapte-
rs. Our contribution is twofold: (i) The proposed framework
supplies operators corresponding to diﬀerent situations of
adaptation, and these operators may be composed to deal
with more complex incompatibilities of interfaces. The re-
sulting reusable mapping is then compiled and deployed into
a CEP engine. (ii) We deﬁned a methodology for using CEP
technology in a Service Oriented Architecture.

2. EVENT-DRIVEN ADAPTATION
2.1

Illustration

As a motivating example we consider a service Ssel in-
tended to oﬀer products for sale, and a service Scons which
is meant to place orders against Ssel. While Scons was de-
signed in such a way an order of n items is realised by send-
ing n messages, Ssel expects an order to be sent at once. To
deal with the resulting incompatibility the behaviour of the
required adapter is as follow. Messages sent by Scons are
received and stored, and messages related to the same order
are grouped together. When a condition is satisﬁed, mean-
ing that an order is completed, an aggregation operation
is applied on all related messages. This process results in
forwarding to Scons a message that contains the order as ex-
pected by Ssel’s interface. Since multiple conversation could
coexist between Scons and Ssel, there is a need to correlate
message belonging to the same conversation. Figure ?? de-
picts such an adaptation process.
2.2 Approach

An Event Driven Architecture (EDA) is a software archi-
tecture paradigm promoting the production, detection, con-
sumption of, and reaction to events. Event consumers sub-
scribe to an intermediary event handler, and event producers
publish to this handler. When an event is received, the event
handler forwards it to the consumer. While EDA deals with
patterns of simple and ordinary events, Complex Event pro-

1231WWW 2008 / Poster PaperApril 21-25, 2008 · Beijing, Chinaadaptation situation. More complex adaptation situations
could be addressed by composing these operators. Designers
of adapters have to identify which adaptations need to be
performed between two services, and then wrap the corre-
sponding composition of operators into a map. A graphical
user interface meant to ease this task is supplied. Subse-
quently, maps are exported to the CCQ code generation
tool, which integrates a compiler component used to pro-
duce a CEP execution-time module. Eventually, maps are
loaded into the CEP execution engine. We model each oper-
ator by a speciﬁc automaton therefore easing veriﬁcation of
operator composition correctness. This latter is then com-
piled and deployed as a CEP module.
3.2 Run-Time Environment
The run-time environment consists of a CEP infrastruc-
ture including a CEP execution engine and a set of SOAP
Integration layers, which allow a CEP engine to be inte-
grated in a Service Oriented Architecture. The CEP en-
gine is embedded as the most important component in the
system architecture. It provides the core service of receiv-
ing, correlating, analyzing and processing messages against
loaded CCQ. Upon a situation detection, events such as
message manipulation and production, are generated in re-
sponse. While Web services communicate through the use
of SOAP messages, the intermediate adapter should be able
to consume, analyze, and forward SOAP messages. To deal
with this issue, we have designed a SOAP Integration Lay-
ers model meant to wrap the CEP infrastructure. Such a
model consists of input and output wrappers. A SOAP in-
put wrapper is used to consume SOAP messages issues from
an output action at the sender service interface. After re-
ceiving a message, the input wrapper is meant to transform
it to a representation appropriate to the CEP engine, and
then publish it into the engine. Similarly, an output wrap-
per gets produced event from the engine, transform it in a
SOAP message and then forward it to the corresponding
input action at the ﬁnal receiver service.

4. CONCLUSION

In this paper, we have integrated CEP technology with
Service Oriented Architecture.
In particular, we have de-
scribed how to use an event driven system to adapt message
interactions between Web services with incompatible inter-
faces. An ongoing study, still relying on the CEP technology,
aims at addressing more complex adaptation challenges in
service oriented architecture, such as dealing with incompat-
ibilities between Web service interaction protocols.

5. REFERENCES
[1] B. Benatallah and et al. Developing adapters for web

services integration. In Proc. of the 17th CAISE Conf.,
pages 415–429. Springer Verlag, June 2005.

[2] M. Dumas, M. Spork, and K. Wang. Adapt or perish:

Algebra and visual notation for service interface
adaptation. In Proc. of the 4th BPM Conf., pages
65–80, Vienna, Austria, 09/2006. Springer Verlag.

[3] Y. Taher, D. Benslimane, M.-C. Fauvet, and

Z. Maamar. Towards an approach forweb services
substitution. ideas, 0:166–173, 2006.

Figure 1: Adaptation Example

cessing1 (CEP) is a new EDA paradigm that allows of simple
events to be aggregated into complex ones. More precisely,
CEP is a platform for building and running event-based ap-
plications that could continuously process event streams to
detected a speciﬁed conﬂuence of events, and trigger a spe-
ciﬁc action when the events occur. Most of existing CEP
platforms provide a continuous computation language for
specifying queries each of which deﬁning the schema of an
event stream to be monitored, deﬁning event patterns to
be detected, specifying processing functions and sequencing,
and ﬁnally declaring output to be generated.

As Web service interactions rely on message exchanges,
the process of adaptation consists in consuming incoming
messages, processing them, and ﬁnally producing messages.
With this setting, CEP fulﬁls Web service adaptation re-
quirements. Exchange messages are modelled as events, the
message adaptation logic is encoded in terms of continuous
computation queries (CCQ), that allow the CEP engine to
observe message events and detect the predeﬁned adaptation
situations. By doing so, a CEP engine hosting the adap-
tation CCQ, is able to intermediate messages interactions
between Web services, and acts as a Web service adapter.

3. SYSTEM OVERVIEW

As part of our contribution, we provide developers with
a framework that allows designing, building and deploying
CEP -based Web service adapters. Figure ?? depicts the
proposed framework architecture which is discussed below.

Figure 2: Framework Architecture

3.1 Design-Time environment

We have designed a set of template adaptation operat-
ors, where each of them is intended to deal with a speciﬁc

1http://www.complexevents.com/

SendOne Item Send Stop Mark001001002001Adapter001Item1Item2Item1Item2ReceiveItem ListConsumerServiceSellerServiceWeb serviceInterfacesDesign toolSOAP Integration LayerSOAP Integration Layer: Input Stream: Output StreamWeb serviceInterfacesCCQ Code Generation ToolHTTPSOAPHTTPSOAPService(A)Service(B)LoadCEP EngineOperator-based MapDesign-timeRun-timeInput WrapperInput WrapperOutput WrapperInput WrapperOutput Wrapper: Continuous queries1232WWW 2008 / Poster PaperApril 21-25, 2008 · Beijing, China