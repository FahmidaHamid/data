Dataplorer: A Scalable Search Engine for the Data Web

Haofen Wang, Qiaoling Liu,  
Gui-Rong Xue, Yong Yu
Shanghai Jiao Tong University
Shanghai, 200240, China
{whfcarter, lql, grxue,
yyu}@apex.sjtu.edu.cn

Lei Zhang, Yue Pan
IBM China Research Lab
Beijing, 100094, China

{lzhangl, panyue}@cn.ibm.com

ABSTRACT
More and more structured information in the form of seman-
tic data is nowadays available. It oﬀers a wide range of new
possibilities especially for semantic search and Web data in-
tegration. However, their eﬀective exploitation still brings
about a number of challenges, e.g. usability, scalability and
uncertainty. In this paper, we present Dataplorer, a solution
designed to address these challenges. We consider the us-
ability through the use of hybrid queries and faceted search,
while still preserving the scalability thanks to an extension
of inverted index to support this type of query. Moreover,
Dataplorer deals with uncertainty by means of a powerful
ranking scheme to ﬁnd relevant results. Our experimental
results show that our proposed approach is promising and
it makes us believe that it is possible to extend the current
IR infrastructure to query and search the Web of data.

Categories and Subject Descriptors: H.3.3 [Informa-
tion Storage and Retrieval]:
Information Search and Re-
trieval

General Terms: Algorithms, Performance, Experimenta-
tion

Keywords: hybrid query, inverted index, ranking, faceted
search

1.

INTRODUCTION

Structured information is nowadays available and grows
rapidly to form a Web of data. It oﬀers a wide range of new
possibilities that were until now out of reach. To prepare the
arrival of new applications and scenarios beneﬁting from this
information, several initiatives have appeared, among which
it is possible to notice the Linking Open Data project [1].

However, the eﬀective exploitation of the Web of data still
brings about a number of challenges: Usability – Struc-
tured queries cannot be imposed as such to the end-user,
usually lacking knowledge about the language itself and the
data schema. Scalability – As the already impressive amount
of data available is ever growing, eﬃcient search solutions
able to scale to this level are becoming essential. Uncer-
tainty – The diverse provenance of the data, as well as the
diﬀerent ways it can be interpreted or queried require the
consideration of the uncertainty and imperfection.

In this paper, we present Dataplorer, a solution designed
to address these challenges without sacriﬁcing one for the

Copyright is held by the author/owner(s).
WWW 2009, April 20–24, 2009, Madrid, Spain.
ACM 978-1-60558-487-4/09/04.

sake of the others. The usability challenge is addressed by
providing the user with hybrid query capabilities, leveraging
the power of structured queries and the ease of use of key-
word search. We also propose a faceted search functionality
that allows users to progressively compose the structured
part of their information need after having started with im-
precise keywords. Scalability is one of the main challenges
that hybrid queries are facing, due to the large amount of
data. Inspired from the cross ﬁeld of DB and IR integration,
we make IR compatible with hybrid search through an exten-
sion of the inverted index, and thus able to scale as well as to
handle structured information. To ensure that uncertainty
does not remain as a problem to return relevant results, we
provide a powerful ranking scheme that considers structures
of both data and hybrid queries for score propagation and
aggregation during results ranking. As an improvement of
our previous work [3], we support faceted search with in-
tegrated ranking to tackle both usability and uncertainty
issues while preserving eﬃciency.
2. SYSTEM OVERVIEW

The architecture is presented by Figure 1. It is composed
of three main components: a front-end interface, needed to
address the usability challenges by making the functionali-
ties accessible to the user, a search component, in charge of
retrieving and ranking the results, and a component used to
index the Web of data in an eﬃcient way. The system demo
can be found through http://dataplorer.apexlab.org.

Figure 1: Dataplorer Architecture

2.1 Hybrid Query Capability

Let us assume that a user called Alice is willing to ﬁnd
information about martial art ﬁlms directed by Hong Kong

The Back-End EngineSearch Layer       Relation-based RankingDFS-based RetrievalWeb of DataUser     The Front-End Interface       Faceted Browsing & Searching       Relation Navigation          Index Layer         Indexing Keywords         Indexing Categories         Indexing RelationsHybrid QueriesRanked ResultsWWW 2009 MADRID!Poster Sessions: Wednesday, April 22, 20091079Figure 2: An Example Hybrid Query

ﬁeld f and a term t, it retrieves the corresponding post-
ing list as an Ascending Integer Stream (AIS), which is
accessed from the smallest integer to the largest one. (2)
Merge-sort m(S1,∩, S2). Given two AISs S1 and S2,
it
computes S1 ∩ S2 and returns a new AIS. (3) Mass-union
u(S, R). Given a relation R and a AIS S, it computes the
set {o | ∃s : s ∈ S ∧ (s, R, o)} and returns it as a AIS.

Table 1: Translating data into “Documents” in IR
Document Field
concept C
relation R

text
text
type

Term
tokens in textual properties
tokens in textual properties
concepts that i belongs to
all relations R that (i, R, ?) is a
triple in data
all relations R that (?, R, i) is a
triple in data
tokens in textual properties of i

individual i

subjOf

objOf

text

directors and starring Chinese martial art actors. The abil-
ity to use a conjunction of keywords like “martial art” and
precise semantic relations like “directed by” gives the oppor-
tunity to improve the user experience when addressing com-
plex information needs. Figure 2 depicts the example query.
The deﬁnition of the hybrid queries used by Dataplorer is
based on the work previously done by [2] focusing on con-
junctive queries that we extended to combine keyword and
structured data search. A hybrid conjunctive query q is a

query expression of the form q(x) ← ∃−→y .conj(x,−→y ), where
x is called the target variable, −→y are existentially quantiﬁed
variables called non-distinguished variables, and conj(x,−→y )
R−(z1, z2). z, z1, z2 are individuals or variables in x or −→y .

is a conjunction of terms of the form C(z), R(z1, z2), or

R is a relation name and C represents a concept expression
that is a boolean combination of concept names and keyword
concept W . In this paper, we restrict to queries whose graph
patterns are trees, as in [2]. We also restrict the query result
to be unary (i.e., a single target variable x in the query).
These restrictions lead to a much more simpliﬁed and hence
eﬃcient query evaluation procedure, while a large portion of
information needs can still be expressed.
2.2 Data Indexing

Inverted index is based on the concepts of documents,
ﬁelds, and terms. Each term is associated with a posting
list of documents containing it.
In addition, for each of
these documents, there is a list of positions showing where
the term appears in it. Current search engines have proved
this technique to easily scale to the Web. By leveraging
the index structure, we translate the Web of data into docu-
ments, ﬁelds and terms in a proper way, as shown by Table 1.
In order to index a relation instance (s, R, o), We use the po-
sition list to store the objects of relation R under subject s,
where s is treated as a document with a ﬁeld named subjOf
and a term R in the ﬁeld. Similarly, the objOf ﬁeld can be
considered as indexing instances of the relation R−.
2.3 Faceted Search with Integrated Ranking
Dataplorer eﬃciently answers a tree-shaped hybrid query
using a DFS (i.e. Depth First Search) based retrieval al-
gorithm according to a well-optimized query plan. The
query evaluation is reduced to three basic operations over
posting lists including (1) Basic-retrieval b(f, t). Given a

1,∩, S(cid:48)

We propose a ranking scheme according to ranking prin-
ciples quality propagation and quantity aggregation, which
means that the higher the quality of a neighbor (or the more
the number of its neighbors), the higher the rank of a result.
First, we attach a scoring capability to each AIS and ob-
tain a Scored AIS (SAIS), e.g. S(cid:48) = {(cid:104)d1, 0.4(cid:105),(cid:104)d3, 0.8(cid:105), ...}.
We then generalize the three basic operations to b(cid:48)(f, t),
m(cid:48)(S(cid:48)
2), u(cid:48)(S(cid:48), R), so that they are adapted to SAIS.
For basic-retrieval b(cid:48)(f, t), we score an item in its result by
b(cid:48)(f, t)[d] = RSV (t, d) where RSV (t, d) computes the rele-
vance of d with respect to t according to the tf-idf principle
1,∩, S(cid:48)
and returns a degree in [0,1]. For merge-sort m(cid:48)(S(cid:48)
2),
1[d] ·
we score an item in its result by m(cid:48)(S(cid:48)
2[d]. For mass-union u(cid:48)(S(cid:48), R), we score an item in its re-
S(cid:48)
s:s∈S(cid:48)∧(s,R,o)(1 − S(cid:48)[s]). Thus,
the ranking scheme is tightly integrated in query processing.
Faceted search is recognized as an eﬀective means to ex-
plore the Web of data. Starting from a keyword query, the
user gets the ranked results as well as the corresponding
available facets (i.e. concepts and relations) to construct
hybrid queries iteratively. Dataplorer computes the data
distribution of all associated facets. We reduce the com-
putation to hybrid queries by modeling concepts and rela-
tions as “general documents” and introducing TYPE, SUB-
JECT OF, OBJECT OF as “general relations”.

sult by u(cid:48)(S(cid:48), R)[o] = 1 −(cid:81)

2)[d] = S(cid:48)

1,∩, S(cid:48)

3. EVALUATION

For the experiments, we used DBLP, DBpedia, Freebase,
USCensus, GeoNames, SW.org, and SWRC. Totally, the in-
dexed data adds up to 1.1 billion triples. We compared the
query performance of Dataplorer with SOR1 and RDF-3X2
on 45 structured conjunctive queries with diﬀerent shapes,
lengths and variable numbers. Thanks to the beneﬁt of spa-
tial locality for fast access using the extension of the in-
verted index, Dataplorer outperforms RDF-3X in most cases
although RDF-3X has employed well-designed compression
and optimization technologies. Dataplorer’s performance is
comparable to that of SOR with cache, and is one or two
orders of magnitude faster than SOR when performing cold-
start. We further created 20 hybrid queries from the ques-
tions collected from 10 users. Dataplorer achieved more
than 20% improvements on P @10 compared with that of
traditional keyword search systems and database with full-
text extensions. Moreover, all these queries can be answered
within one second which indicates the good eﬃciency as well.

4. REFERENCES

[1] C. Bizer, T. Heath, K. Idehen, and T. Berners-Lee. Linked

data on the web. In Proc. of WWW, 2008.

[2] I. Horrocks and S. Tessaris. Querying the semantic web: A

formal approach. In Proc. of ISWC, 2002.

[3] L. Zhang, Q. Liu, J. Zhang, H. Wang, Y. Pan, and Y. Yu.

Semplore: An IR Approach to Scalable Hybrid Query of
Semantic Web Data. In Proc. of ISWC, 2007.

1http://www.alphaworks.ibm.com/tech/semanticstk
2http://www.mpi-inf.mpg.de/ neumann/rdf3x

0x1x2xstarringdirected_by"martial"Chinese actorsHong Kong film directors"action film"WWW 2009 MADRID!Poster Sessions: Wednesday, April 22, 20091080