Automatically Filling Form-Based

Web Interfaces with Free Text Inputs

Guilherme A. Toda†

∗
Altigran S. da Silva†

Eli Cortez†

Filipe Mesquita†

Edleno Moura†

Marden Neubert‡

†Federal University of Amazonas

{gat,eccv,fsm,alti,edleno}@dcc.ufam.edu.br

‡Uol Inc.

marden@uolinc.com

ABSTRACT
On the web of today the most prevalent solution for users to
interact with data-intensive applications is the use of form-
based interfaces composed by several data input ﬁelds, such
as text boxes, radio buttons, pull-down lists, check boxes,
etc. Although these interfaces are popular and eﬀective,
in many cases, free text interfaces are preferred over form-
based ones. In this paper we discuss the proposal and the
implementation of a novel IR-based method for using data
rich free text to interact with form-based interfaces. Our
solution takes a free text as input, extracts implicitly data
values from it and ﬁlls appropriate ﬁelds using them. For
this task, we rely on values of previous submissions for each
ﬁeld, which are freely obtained from the usage of form-based
interfaces.
Categories and Subject Descriptors
J.0 [Computer Applications]: General

General Terms
Algorithms, Management

Keywords
Data Extraction, Form Filling, Web Application

1.

INTRODUCTION

The Web is abundant in data-intensive applications such
as online stores, digital libraries, and data sharing services
(e.g. Craiglists, Googlebase), which store and maintain high
volumes of data in the so called Web databases. One of the
challenges regarding the development of this type of appli-
cation is building intuitive interfaces for allowing users to
interact with their underlying structured databases. The
most prevalent solution in this direction is designing form-
based interfaces which contain data input ﬁelds, such as text
boxes, radio buttons, pull-down lists, check boxes and other
input mechanisms.

This situation is very common in popular auction sites
such as eBay and amazon.com which extensively use form-
based interfaces for allowing users to register oﬀers. In fact,
there may be distinct form-based interfaces with speciﬁc

∗Contact author.

Copyright is held by the author/owner(s).
WWW 2009, April 20–24, 2009, Madrid, Spain.
ACM 978-1-60558-487-4/09/04.

Figure 1: Overview of a pure form-based interface
(a) and iForm (b).

ﬁelds depending on the product being oﬀered. For instance,
in the experiments presented in this paper, we consider dis-
tinct interfaces corresponding to the categories ”vehicles”,
”mobile phones” from the Brazilian popular auction site To-
daOferta.com.
Interestingly, as some of these sites (e.g.,
eBay and TodaOferta) also allow entering oﬀers using generic
free text descriptions, users often avoid using form-based in-
terfaces. However, in many cases the lacking of structured
information obtained through these interfaces may prevent
the proper use of services based on searching, mining, rec-
ommendation and integration over oﬀers.

In this paper we propose an aproach that consists in de-
ploying a system that receives a free text input (e.g., an oﬀer
or an ad), and recognizes implicit data values occurring in
it that can be used to appropriately ﬁll out the ﬁelds in a
form based interface. Unlike approaches for information ex-
traction from free text [2, 1], our approach does not require
a training phase over manually labeled texts, since it simply
relies on values previously entered in form-based interfaces.

2. THE IFORM APPROACH

In this section, we present the iForm approach in contrast
to form-based interfaces as illustrated in Figure 1. Before
using iForm for boosting a form-based interface, we con-
sider that users have been using the interface as shown in
Figure 1a, by typing values in ﬁelds to interact with the
database DB. The values manually entered in this process
allow us to build and maintain lexicons, which stores terms
used for ﬁlling each ﬁeld. Lexicons are the crux of iForm
approach. Users dealing with iForm, as illustrated in Fig-
ure 1b, provide a free text document or portions as input
and iForm extract values for ﬁlling the form by matching

WWW 2009 MADRID!Poster Sessions: Thursday, April 23, 20091163the contents of the input text with the lexicon of each ﬁeld.
For simplicity, we refer to the user free text document or
portions as input text from now on. Users may want to ver-
ify the form ﬁlled by our method to make corrections and
then proceed with the request submission. After that, iForm
automatically updates the lexicon index for improving the
extraction quality as users deal with iForm.

The iForm approach consists in extracting values from
the input text using lexicons and ﬁlling a target form-based
interface using them. In order to identify suitable ﬁeld values
in the input text we ﬁrst break it into segments and then
estimate the aﬃnity of each segment to a ﬁeld. Intuitively,
the aﬃnity score would be 1 if the segment is found as a value
in the ﬁeld domain (i.e., the set of all possible values of the
ﬁeld) and 0, otherwise. Since this solution is intractable in
many cases, we try to estimate the aﬃnity by estimating how
frequent terms composing the segment are in the values of
a ﬁeld. For this, we rely on a set of representative terms for
each ﬁeld, such that most values in the ﬁeld domain presents
at least one term from this set. In practice, we consider that
the lexicon index contains enough representative terms for
identifying values.

Once we identify set Pk of potential values Sab for each
ﬁeld fk, we aim at ﬁnding a mapping between values in Pk
and ﬁelds in the form-based interface with maximum aggre-
gate aﬃnity, such that (1) only a single segment is assigned
to each ﬁeld and (2) the segments select are non-overlapping,
i.e., there are no segments Sab and Scd for a < c in the map-
ping such that b ≥ c. The last step in our approach consists
in using the ﬁnal mapping to ﬁll out the ﬁelds of the form-
based interface.

3. EXPERIMENTS

We have conducted two sets of experiments. In the ﬁrst
one, we used jobs postings for comparing iForm with CRF [2],
a state-of-art data extraction method.In the second experi-
ment we tested our method with real multi-typed web forms
for submissions of Car ads/oﬀers and Mobile Phones oﬀers.

Comparison with CRF

This experiment compares iForm and CRF [2] for the task
of extracting segments from text inputs and ﬁlling out a
form. We took from the RISE Jobs collection a subset of 100
job postings whose segments to be extracted were manually
labeled. These job postings form an adequate training set
for CRF, since this method requires examples of values to
be extracted to appear within the context they occur. This
same set was used to create the lexicons for iForm.

Next, we tested both approaches using a distinct set of 50
documents, whose extraction outcome was available from
RISE, allowing us to automatically verify the results.

According to the results presented in the Table 1, iForm
had signiﬁcant superior F-measure levels in 7 ﬁelds. The
lower quality obtained by CRF is explained by the fact that
segments to be extracted from typical free text inputs, such
as jobs postings, may not appear in a regular context, which
is an important requirement for CRF.

Experiments with a Real Form-Based Interface

To evaluate the performance of our approach within typical
scenarios, we test iForm with a form-based interfaces from
a Brazilian popular auction site (http://www.todaoferta.
com). We performed experiments with vehicle form, that

Field
State
City

Language

Required Degree

Platform

Title

Company

Salary
Average

Submission-level

0.93

0.85

0.82

0.66

0.57

0.16
0.14
0.56

0.61

1.00%
1.00%
1.00%
1.00%
1.00%
1.00%
1.00%
3.00%
1.00%
1.00%

iForm CRF T-Test Wilcoxon
0.98

0.79
0.54
0.66
0.00
0.5
0.44
0.09
0.23

0.39
0.42

1.00%
1.00%
1.00%
3.00%
1.00%
1.00%
1.00%
2.00%
1.00%
1.00%

Table 1: Field-level f-measure for each ﬁeld and
submission-level f-measure for the comparative ex-
periment.

contains 4 text boxes and 28 check boxes – a total of 32
ﬁelds, and mobile phones form that consists of 2 text boxes
and 35 check boxes – a total of 37 ﬁelds.

To create the lexicons, we used real oﬀers submitted dur-
ing October 2008 to each interface. Tests were performed
using other 50 oﬀers for each interface, distinct from the of-
fers used to create the lexicons. The results are presented
in Table 2.

A detailed inspection on the oﬀers entered by users in
this interface, revealed that, in many cases, users simply
cut and past mobile phone speciﬁcations from the manufac-
turer’s web sites, leading to a high uniformity in the free
text advertisements submitted to the text boxes.

Text Box
Check Box

Type of Field # Fields Precision Recall
86.00%
77.00%
81.50%

85.00%
77.00%
81.00%

Average

4
28

(a) Vehicles

Text Box
Check Box

Type of Field # Fields Precision Recall
87.00%
99.00%
93.00%

91.00%
99.00%
95.00%

Average

2
35

F-Measure

0.85
0.77
0.81

F-Measure

0.89
0.99
0.94

(b) Mobile Phones

Table 2: Field-level results for oﬀers from TodaOferta.
4. CONCLUSION

In this paper we presented a framework called iForm for
automatically using data values implicitly available in free
text documents as input for a pre-existing form-based inter-
face. We proposed a novel IR-based method for identifying
implicit values in the free text documents and ﬁlling the
form-based interface using them. We tested our approach
with representative instances of the problem and found that
it achieved better results than CRF, a state-of-art data ex-
traction model. Our experiments also demonstrate that our
approach is able to properly deal with diﬀerent types of
input ﬁelds, such as text boxes, pull-down lists and check
boxes.
5. REFERENCES
[1] M. E. Caliﬀ and R. J. Mooney. Relational learning of

pattern-match rules for information extraction. pages 328–334.
American Association for Artiﬁcial Intelligence, 1999.

[2] J. D. Laﬀerty, A. McCallum, and F. C. N. Pereira. Conditional
random ﬁelds: Probabilistic models for segmenting and labeling
sequence data. pages 282–289. Morgan Kaufmann Publishers
Inc., 2001.

WWW 2009 MADRID!Poster Sessions: Thursday, April 23, 20091164