browsers have become mature execution platforms enabling web applications to rival their desktop counterparts. an important class of such applications is interactive multimedia games, animations, and interactive visualizations. unlike many early web applications, these applications are latency sensitive and processing (cpu and graphics) intensive. when demands exceed available resources, application quality (e.g., frame rate) diminishes because it is hard to balance timeliness and utilization. the quality of ambitious web applications is also limited by single-threaded execution prevalent in the web. applications need to scale their quality, and thereby scale processing load, based on the resources that are available. we refer to this as scalable quality. doha is an execution layer written entirely in javascript to enable scalable quality in web applications. doha favors important computations with more in uence over quality based on hints from application-speci c adaptation policies. to utilize widely available multi-core resources, doha augments html5 web workers with mechanisms to facilitate state management and load-balancing. we evaluate doha with an award-winning web-based game. when resources are limited, the modi ed game has better timing and overall quality. more importantly, quality scales linearly with a small number of cores and the game is playable in challenging scenarios that are beyond the scope of the original game.
