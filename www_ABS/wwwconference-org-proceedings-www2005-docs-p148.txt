we present a language for specifying web service interfaces. a web service interface puts three kinds of constraints on the users of the service. first, the interface speci es the methods that can be called by a client, together with types of input and output parameters; these are called signature constraints. second, the interface may specify propositional constraints on method calls and output values that may occur in a web service conversation; these are called consistency constraints. third, the interface may specify temporal constraints on the ordering of method calls; these are called protocol constraints. the interfaces can be used to check,  rst, if two or more web services are compatible, and second, if a web service a can be safely substituted for a web service b. the algorithm for compatibility checking veri es that two or more interfaces ful ll each others  constraints. the algorithm for substitutivity checking veri es that service a demands fewer and ful lls more constraints than service b. [software
