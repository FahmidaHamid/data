the clustering coe cient of a node in a social network is a fundamental measure that quanti es how tightly-knit the community is around the node. its computation can be reduced to counting the number of triangles incident on the particular node in the network. in case the graph is too big to  t into memory, this is a nontrivial task, and previous researchers showed how to estimate the clustering coe cient in this scenario. a di erent avenue of research is to to perform the computation in parallel, spreading it across many machines. in recent years mapreduce has emerged as a de facto programming paradigm for parallel computation on massive data sets. the main focus of this work is to give mapreduce algorithms for counting triangles which we use to compute clustering coe cients. our contributions are twofold. first, we describe a sequential triangle counting algorithm and show how to adapt it to the mapreduce setting. this algorithm achieves a factor of 10-100 speed up over the naive approach. second, we present a new algorithm designed speci cally for the mapre-duce framework. a key feature of this approach is that it allows for a smooth tradeo  between the memory available on each individual machine and the total memory available to the algorithm, while keeping the total work done constant. moreover, this algorithm can use any triangle counting algorithm as a black box and distribute the computation across many machines. we validate our algorithms on real world datasets comprising of millions of nodes and over a billion edges. our results show both algorithms e ectively deal with skew in the degree distribution and lead to dramatic speed ups over the naive implementation.
