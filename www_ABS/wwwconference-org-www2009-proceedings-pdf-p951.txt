web applications often use html templates to separate the webpage presentation from its underlying business logic and objects. this is now the de facto standard programming model for web application development. this paper proposes a novel implementation for existing server-side template engines, flyingtemplate, for (a) reduced bandwidth consumption in web application servers, and (b) o loading html generation tasks to web clients. instead of producing a fully-generated html page, the proposed template engine produces a skeletal script which includes only the dynamic values of the template parameters and the bootstrap code that runs on a web browser at the client side. it retrieves a client-side template engine and the payload templates separately. with the goals of e ciency, implementation transparency, security, and standards compliance in mind, we developed flyingtemplate with two design principles e ective browser cache usage, and reasonable compromises which restrict the template usage patterns and relax the security policies slightly but in a controllable way. this approach allows typical template-based web applications to run e ectively with flyingtemplate. as an experiment, we tested the specweb2005 banking application using flying-template without any other modi cations and saw throughput improvements from 1.6x to 2.0x in its best mode. in addition, flyingtemplate can enforce compliance with a simple security policy, thus addressing the security problems of client-server partitioning in the web environment.
