Brands and agencies use marketing as a tool to in uence customers and make them into loyal buyers.
One of the major decisions in a marketing plan deals with the allocation of a given budget among media channels in order to maximize Copyright is held by the International World Wide Web Conference Committee (IW3C2).
Distribution of these papers is limited to classroom use, and personal use by others.
the impact on a set of potential customers.
Several examples of media channels are TV, newspapers, billboards, and websites.
In many cases, a  ne-grained decision is needed regarding the budget allocated within a speci c channel, e.g., how to distribute the budget for radio commercials among the di erent major radio channels.
In some cases, there are additional constraints on the amount of budget that can be spent on any speci c outlet.
Such constraints may be enforced by the policy makers or the regulations in an organization.
An underlying assumption is that the amount of budget allocated to a channel determines the chances of in uenc-ing particular customers.
As a result, one may model this setting as a bipartite graph in which one side is the set of possible marketing channels, and the other is the population of customers.
An edge between channel i and a customer j indicates that j may in uence i with some probability that depends on the budget allocated to j.
We emphasize that a similar situation occurs in a social network, where a marketing budget needs to be distributed among a set of potential in uencers in a way that provides high-impact.
Given that an in uencer can e ect the decisions of her neighbors in the network, and that her level of e ort depends on the budget allocated to her, we get a setting that is similar to the one described above.
Both of the above-mentioned scenarios deal with the allocation of budget among di erent channels.
A convenient way for modelling the fact that the probability of a channel to in uence a customer depends on its allocated budget is by focusing on discrete budgets.
The allocation of k units of budget to channel j corresponds to k attempts made by channel j to in uence each of its corresponding customers.
We note that each such attempt may have a di erent probability to in uence a customer.
These probabilities depend on the underlying model, as formally described in Subsection 1.1.
We emphasize that all these models leave much freedom in the way one measures the expected number of customers that are in uenced by a particular budget allocation.
We also note that probabilistic models are natural since our knowledge of customers behavior is inherently limited, and thus, we can only have some probabilistic estimate for the typical impact of a budget allocation to some channel.
We like to point out two major di erences between our models and previous work (e.g., [9, 18, 19, 23, 3]):
 in similar contexts have only focused on the selection of a subset of in uencing nodes.
In particular, the allocation of budget among nodes was not treated.
We text of an algorithmic approach to marketing.
the propagation of in uence, which may happen in social networks.
We emphasize that this is due to the fact that a major motivation for our work is the distribution of budget among marketing channels, although we believe that our models are applicable to social networks as well.
We primarily focus on two models: a source-side in u-ence model and a target-side in uence model.
The common setting in both models consists of a bipartite graph G = (S, T, E), where S and T are collections of source and target nodes, respectively, and E   S   T is an edge set.
Each source node s has a capacity cs   N+, and there is a (global) budget B   N+.
The objective is to distribute the budget among the source nodes in a discrete way that respects the capacities of nodes, and maximizes the expected number of target nodes that become active (or in uenced).
Speci cally, each source node s should be allocated a budget bs   {0, 1, .
.
.
, cs} such that which target nodes become active depends on the underlying model:   s S bs   B.
The process in   Source-side in uence model   Each source node     s   S has a probability vector ps =  ps [0, 1]cs .
A source node s that is allocated a budget of bs makes bs independent trials to activate each neighboring target node t. The probability that t is activated by s in the ith trial is ps i .
Thus, if the set of source nodes  (t) designates the neighbors of t in G then the probability that t becomes active is 1, .
.
.
, ps cs   bs  s (cid:0)(t) i=1
 (1   ps i ) .
We note that all the trials that s makes (to all its neighboring nodes) are independent.
  Target-side in uence model   Each target node t  
 T has a probability vector pt =  pt Suppose the set of source nodes  (t) designates the s (cid:0)(t) bs.
Then, neighbors of t in G, and let Bt = the probability that t becomes active is 1, .
.
.
, pt  
 (1   pt i) .
i=1 We emphasize that the probability that a target node t becomes active is a function of the overall budget Bt allocated to its neighbors.
Notice that our models are very general as they support completely arbitrary probability vectors, and not necessarily ones that are monotone or have any other restrictive structural properties.
Also note that one can argue that in real-life situations the exact values of the probabilities are unknown.
We believe however that one can almost always have some good estimate for these probabilities, and therefore, we assume that these probabilities are known.
We study both in uence models and attain the following results: Source-side in uence model.
We devise an e cient deterministic algorithm that has an approximation ratio of 1   1/e   0.632 for in uence maximization in the source side model.
We observe that this result is best possible under the assumption that P  = NP.
Speci cally, this result matches the NP-hardness bound of 1   1/e, which already holds for the special setting of maximum coverage [10].
We also discuss several generalizations of our model and techniques.
In particular, we demonstrate that our approach can be employed in a general setting where the underlying graph is arbitrary and each source node has a di erent in uence on each of its neighbors.
This latter setting is well-motivated as it may abstract the question of in uence maximization in social networks.
Target-side in uence model.
We demonstrate that in u-ence maximization in this model extends both the maximum edge biclique and the dense k-subgraph problems.
Consequently, we attain among some additional hardness results that our problem is hard to approximate within a factor of  (1/B ) for some   > 0, assuming a certain hypothesis about the average-case hardness of random 3SAT [11].
This implies that in uence maximization in the target-side model is provably harder than in the source-side model.
In light of the above state of a airs, we then focus our attention on a modi ed model in which there are no capacity constraints on the source nodes.
We develop an e cient deterministic algorithm that achieves a logarithmic approximation ratio.
This establishes a computational separation between the two target-side models, and proves that the budget capacity constraints underlie the hardness of the problem in the former model.
Previous work dealing with in uence in multi-agent systems considered issues such as  nding a set of most in uen-tial individuals, and understanding the e ects of the social structure on emergent behavior (see, e.g., [21] and the reference therein).
More generally, the di usion and spreading of opinions in societies has long been a topic of study in the social sciences [26, 15], and later got the attention of game-theorists [31, 22, 17] and AI researchers [28] among others.
While a main interest in this research concerns with the need to in uence individuals, the related literature does not consider the distribution of budgets among those individuals; rather, it primarily concentrates on issues such as information propagation.
Our work seems to be the  rst to optimize the budget distribution beyond deciding the identity of the individuals that should be approached.
Our notion of a budget is a discrete one.
This is consistent with common practices in organizations (e.g., working in multiplications of some  xed value) and related simulations [27].
Other work relating to the subject of budget constraints in markets and advertising appears in [6, 14, 8, 2, 5, 29, 7].
In this section, we devise an e cient deterministic algorithm that has an approximation ratio of 1   1/e   0.632 for the problem of maximizing the in uence in the source-tion that P  = NP.
Speci cally, this result matches the NP-hardness bound of 1   1/e, which already holds for the special setting of maximum coverage [10].
The latter setting is equivalent to the case in which all the probability vectors are of the form  1, , .
.
.
, , where each   can be any valid value.
In this case, the objective reduces to selecting B source nodes in a way that maximizes the cardinality of their neighbor set.
We note that our algorithm and analysis has similarities with the algorithm for maximizing a nondecreasing submod-ular set function subject to a knapsack constraint [30].
We emphasize that our problem is not an instance of the latter problem.
In particular, in our problem, one may select a node multiple times (i.e., allocate it a budget other than 0 or 1), and these selections may not satisfy a decreasing marginal in uence property as required for submodular-ity.
Informally, our problem does not admit a decreasing marginal in uence property since adding an extra unit of budget to some node may have a higher marginal in uence with respect to prior budget increments.
De(cid:12)nition 1.
Let {bs}s S be a feasible budget allocation to the source nodes, and let s and  (s) be a source node and its neighbors in G, respectively.
The marginal in(cid:13)uence of adding a feasible budget of k to s is the expected increase in the number of target nodes that become active.
One can easily verify that this amounts to (1   pv i )   (1   ps bs+j) )  .
bv     ({bs}s S, s, k) =     t (cid:0)(s) v (cid:0)(t) ( 1   k  i=1 j=1 In accordance, the per unit marginal in(cid:13)uence of adding a budget of k to s is  ({bs}s S, s, k)/k.
Let     3 be a  xed integer, and let P be the set of all solutions in which at most   source nodes are allocated feasible budgets.
Speci cally, in each such solution, the allocated budgets respect the capacities of the corresponding nodes, and the overall allocated budget is at most B.
One can easily verify that the cardinality of the set P is O(|S| B ), that is, polynomial in the parameters of the problem as long as   is  xed.
Our algorithm enumerates over all the solutions in P, where each solution is utilized as an initial budget allocation.
Given some initial allocation, the algorithm completes it greedily.
Speci cally, let {bs}s S be the initial allocation     S was allocated an overall budget of in which a set S     B.
The greedy procedure completes the budget allo-
cation of nodes in S \ S as follows:   Once the enumeration phase ends, the algorithm considers all the resulting budget allocations (each corresponds to some initial budget allocation from P), and outputs the one whose expected in uence is maximal.
In what follows, we prove that our algorithm has an approximation ratio of 1 1/e   0.632.
This result matches the NP-hardness bound of 1   1/e, which holds for the special setting of maximum coverage [10].
We begin by introducing a notation and terminology that will be used later:   and   for all  s, k    Q do  s,k    ({bs}s S, s, k)/k Algorithm 1 GreedyCompletion Input: A feasible budget allocation {bs}s S, and a remaining budget K = B   B Output: An updated budget allocation
 k   {1, .
.
.
, min{K, cs   bs}}











 end if 14: end while bs   bs + k, K = K   k modify all pairs  s, k remove all pairs  s, k remove  s, k  from Q end for let  s, k    Q be a pair with a maximal  s,k if K   k then     Q to  s, k     k      Q such that k     0 else   Let A  = { s 1 , .
.
.
, s r(cid:3) } be an optimal solu-        r(cid:3) , b 1, b tion for a given input instance of the problem.
Here, each pair  s i )   S   N+ indicates that the source     i , b     node s i is allocated a (positive) budget of b i in the optimal solution.
We assume that the pairs in A  are ordered according to a non-increasing marginal in uence.
1  with Namely, the marginal in uence of the pair  s     1, b respect to the empty solution is the highest among all other pairs, the marginal in uence of the pair  s
     2, b with respect to the solution that consists of the pair 1  is the highest among all remaining pairs, and  s     1, b so on.
  Let OPT = OPT1 + OPT2 be the expected number of target nodes that become active in the optimal solution.
Here, OPT1 indicates the overall marginal in u-ence of the  rst   pairs in A  (with respect to the empty solution), and OPT2 stands for the overall marginal in uence of the remaining pairs in A  (with respect to the solution that consists of the  rst   pairs).
Note that if r       then OPT1 = OPT and OPT2 = 0.
Recall that our algorithm enumerates over all the (initial) solutions in which at most   source nodes are allocated fea-      then our algorithm  nds an sible budgets.
Hence, if r optimal budget allocation.
Accordingly, in the remainder of this subsection, we deal with the case that r >  .
We concentrate on the solution A that our algorithm generates with respect to the initial solution which consists of the  rst   pairs in A  .
Namely, we assume that A initially consists  }.
Clearly, if we prove that this so-of { s   1, b lution is a (1  1/e)-approximation for the optimal outcome then our algorithm is guaranteed to have (at least) the same approximation ratio.
1 , .
.
.
, s       , s       Let ALG = ALG1 +ALG2 be the expected number of target nodes that become active in the above-mentioned solution A.
Here, ALG1 indicates the overall marginal in uence of the  rst   pairs in A (with respect to the empty solution), and ALG2 stands for the overall marginal in uence of the remaining pairs in A (with respect to the solution that consists of the  rst   pairs).
Note that ALG1 = OPT1 due to our assumption regarding the enumeration step.
Hence, greedy completion procedure.
Recall that the greedy procedure is built around one main loop.
In each iteration i of that loop, the algorithm extends the current solution with a pair  si, ki  whose per unit marginal in uence is maximal, namely, the budget of node si is increased by ki.
We mark the per unit marginal in uence in that iteration by  i, and the corresponding marginal in uence by  i =  iki.
Notice that if the required budget ki is more than the remaining budget then the algorithm cannot extend the current solution.
In such a case, the algorithm does not increase the budget of any node, the underlying pair is removed, and the loop continues.
Also note that the algorithm may increase the budget of any node multiple times in di erent iterations.
Let  sL, kL  be the  rst pair for which the greedy procedure cannot extend the current solution.
For the sake of the analysis, we may assume without loss of generality that  sL, kL  involves an increase towards the optimal solution.
That is, suppose the current budget allocation is {bs}s S then bs + kL   b   s. We note that our assumption is valid since if there is such a prior pair that does not involve an increase towards the optimal solution then excluding it from the potential pairs list Q does not change the greedy solution (with respect to the same initial solution), the optimal solution, and the analysis.
Note that such a pair may be excluded by initially adjusting the budget constraint of the underlying node in an appropriate way.
Lastly, we remark that in case that the greedy procedure does not experience a situation in which it cannot extend the current solution then we denote the last inspected pair by  sL, kL .
Lemma 1.
 i   ki/K   (OPT2   i 1 j=1  j) in every iteration 1   i   L.
Proof.
Let dq be the di erence between the budget al-   +q in the optimal solution and the budget located to node s allocated to it by the greedy procedure up to iteration i.
In case the greedy procedure allocated more budget to node   s  +q than the optimal solution then we set dq = 0.
Using a simple counting argument, one can attain that there is a    +q(cid:3) such that increasing its budget by dq(cid:3) increases node s the overall in uence by at least ( OPT2   i 1  )   dq(cid:3)
  j j=1 ( OPT2   i 1  )  j , j=1 dq(cid:3)  r  q=1 dq where the inequality follows since K is the overall budget     r(cid:3) by the optimal solution.
allocated to the nodes s  +1, .
.
.
, s Since our greedy procedure selects a pair whose per unit marginal in uence is maximal and the pair  s  +q(cid:3) , dq(cid:3)    Q,   we get that  i   (OPT2   Lemma 2.
OPT2   for every 0   i   L.
i i 1 j=1  j)/K.
j=1  j   i j=1(1   kj/K)   OPT2 Proof.
We prove this lemma by induction on i.
The lemma clearly holds when i = 0.
Assume that the lemma holds for i   1 and notice that OPT2   i  j=1  j   OPT2   i 1  j=1 ( OPT2   i 1  j=1 )  j  j   ki
   )   )  j ( OPT2   i 1  ) j=1
 1   kj
   ( ( 1   ki   i 
   j=1
 where the  rst inequality follows from Lemma 1, and the last inequality is due to the induction hypothesis.
Corollary 1.
Proof.
Let us de ne  (x) = ln(1   x).
Notice that     is concave and monotonically decreasing in the range (0, 1].
This implies that given x1, .
.
.
, xL   (0, 1], we know that
 i=1 xi/L) by Jensen s inequality.
Sub-i=1  i   (1   1/e)   OPT2.
  stituting each xi with ki/K, we obtain that )

 i=1  (xi)/L    ( ( ) ( or equivalently, 1   ki



 i=1 ln i=1   ln   1   ki
 (  

 i=1 ki

 ( where the last inequality follows as using the lemma, we conclude that ) 1   ki
  i   L  ( i=1 i=1 )
 i=1 ki
 (

 , )
 ,   (
 )
   )

 i=1 ki/K   1.
Now,  



 e We are now ready to prove the main theorem of this section.
  tion regarding the enumeration step.
Theorem 1.
ALG   (1   1/e)   OPT.
that ALG2     Proof.
Recall that ALG1 = OPT1 due to our assump-  In addition, notice
 i=1  i in case that the greedy procedure could not extend the solution in iteration L, and ALG2 =
 i=1  i, otherwise.
In the former case, one can easily verify that  L   OPT1/ .
This follows since the pair  sL, kL  involves an increase towards the optimal solution, and by our assumption regarding the enumeration step, the marginal in uence of such an increase cannot be higher than the marginal in uence of extending the solution that consists of the pairs As a result, ALG2   j  with the pair  s     i , b i  , for all 1   i    .
  i=1  i   OPT1/ .
We can now con-
( )
 ) (  i   1  
 (
 e

 clude that ) i 1 j=1
   j , b  s   i=1

  
 e  
 where the second inequality is due to Corollary 1, and the last inequality holds since     3.
Generalized graph models.
A natural generalization of our model is when the edges, rather than the source nodes, are associated with probability vectors.
In this setting, a source node s that is allocated a budget of bs makes bs independent trials to activate each neighboring target node t; the probability of activating t depends on the probability vector of the edge (s, t) in a similar way to the original model.
Notice that an instance of the original model can be translated to an instance of the new model in which the probability vectors of all edges adjacent to any source node are identical.
It is not hard to verify that our algorithm from Subsection 2.1 can be applied in this generalized model, attaining the same approximation ratio.
In particular, one can easily validate that the counting argument from the proof of Lemma 1 is also applicable in this latter model.
An even more general model is when the underlying (directed) graph is arbitrary, rather than bipartite.
In this setting, a node s that is allocated a budget of bs makes bs independent trials to activate each neighboring node t, where the probability of activating t depends on the probability vector of the edge  s, t .
Furthermore, any node s may become in uenced as a result of the budget allocated to it.
This can be modelled by a self-loop in the underlying graph, that is, an edge  s, s , where this edge has a probability vector having the same interpretation as before.
This general model is well-motivated as it may be used to abstract the question of in uence maximization in social networks.
Similarly to before, one can verify that our algorithm from Subsection 2.1 can be applied in this generalized model, attaining the same approximation ratio.
Speci cally, this case can be reduced to the bipartite case by (1) creating a source node copy sv and a target node tv copy in the bipartite graph for each graph node v, and (2) creating an edge (su, tv) in the bipartite graph for each directed graph edge  u, v , having the same probability vector.
A tradeo  between running time and approximation.
Our algorithm from Subsection 2.1, although e -cient, may not be practical due to the enumeration step.
Nonetheless, one can utilize it and its analysis to develop a simple algorithm that has a practical running time (essentially, the running time of the greedy completion procedure) with a somewhat worse approximation guarantee.
This algorithm selects the budget allocation that achieves the maximal in uence from |S| + 1 solutions: the  rst solution is obtained by executing the greedy procedure on the given input instance, and the remaining |S| solutions are obtained by allocating the maximal possible budget to each single source node.
One can validate that this algorithm attains a (e   1)/(2e)   0.316-approximation.
Speci cally, the outline of the analysis is the following: If the optimal solution has a single node whose marginal in uence (with respect to the empty solution) is at least (e   1)/(2e)   OPT then we are clearly through; otherwise, one can demonstrate that the greedy solution achieves an approximation ratio of (1  1/e)  (e  1)/(2e) = (e  1)/(2e) by applying a similar reasoning to that presented in Theorem 1, while noting that  L   (e   1)/(2e)   OPT.
In this section, we prove that the problem of maximizing the in uence in the target-side model is provably harder than in the source-side model.
This is done by demonstrating that both the maximum edge biclique and the dense k-subgraph problems can be reduced to our problem.
As a result, we attain that our problem is hard to approximate within a factor of  (1/B ) for some   > 0, assuming a certain hypothesis about the average-case hardness of random 3SAT [11].
We also establish some additional hardness results that depend on other computational complexity assumptions.
We then turn to consider a modi ed model in which there are no capacity constraints on the source nodes, or equivalently, one may assume that each cs = B.
We develop an e cient deterministic algorithm that achieves a logarithmic approximation ratio.
This establishes a computational separation between both models, and proves that the budget capacity constraints underlie the hardness of the problem in the former model.
We remark that this modi ed model is still NP-hard, and in fact, it is NP-hard to approximate to within a factor better than 1   1/e as it extends the maximum coverage problem [10].
The latter problem is equivalent to the case in which all the probability vectors are of the form  1, , .
.
.
, , where each   can be any valid value.
In this case, there is no use for allocating a budget greater than
 duces to selecting B source nodes in a way that maximizes the cardinality of their neighbor set.
A reduction from maximum edge biclique.
We begin by demonstrating that our problem is as hard to approximate as the maximum edge biclique problem.
As input for maximum edge biclique, we are given a bipartite graph G = (S, T, E).
Our goal is to  nd a biclique in G having a maximum number of edges.
A vertex set S such     T is called a biclique if (s, t)   E for all that S s   S   .
In what follows, we show a reduction to our problem from a variant of maximum edge biclique in which the cardinality k of the optimal subset of S-vertices is known in advance.
Notice that the maximum edge biclique problem is polynomial-time reducible to this latter problem by enumerating over all |S| possible values of k, and hence, this variant shares the same computational hardness as maximum edge biclique.
, t   T  
  
 for maximum edge biclique with |S Given an input instance of the above-mentioned variant of maximum edge biclique, we construct an input instance of our problem that consists of the same bipartite graph G.
Moreover, we set the capacity of each source node s   S to
 with each target node t   T to  0, .
.
.
, 0, 1 ; here, the length of the pre x of 0 s is B   1.
Now, one can easily verify that  | = a solution S  | edges implies a budget allocation in the newly-created k|T  |.
Speci cally, the claimed instance with an in uence of |T in uence is attained by allocating a unit of budget to each of the source nodes corresponding to S .
Conversely, it is not di cult to verify that given a valid budget allocation, one can perform a similar gap-preserving transformation in the opposite direction.
In particular, notice that the subgraph induced by the source nodes that are allocated a unit budget and the target nodes that are in uenced to an extent of 1 is indeed a biclique.
    As a result of this gap-preserving reduction, and in conjunction with the hardness results presented by Feige [11] and Feige and Kogan [12], we attain two inapproximability average-case hardness of random 3SAT [11].
Theorem 2.
The in uence maximization problem in the target-side model is hard to approximate within a factor of  (1/B ) for some   > 0, assuming that there is no polynomial-time algorithm that refutes most 3CNF formulas with n variables and  n clauses, and never wrongly refutes a satis able formula, where   is a su ciently large constant independent of n.
The other is based on a plausible assumption that 3SAT has no subexponential algorithm [12].
Theorem 3.
The in uence maximization problem in the target-side model is hard to approximate within a factor of  (1/2(log B)  ) for some   > 0, assuming that there is no algorithm for 3SAT that runs in time 2n3/4+  for some   > 0.
  A reduction from dense k-subgraph.
We proceed by presenting a simple reduction from the dense k-subgraph problem to our problem.
An input instance for the dense k-subgraph problem [13] consists of a graph G = (V, E) on n vertices, and a parameter k   n. The objective is to  nd     V of cardinality k that maximizes the number a subset V of edges having both endpoints in V .
Up until recently [1], the dense k-subgraph problem has  only  been shown not to admit a PTAS under various computational complexity assumptions [11, 20].
Nevertheless, it is a notorious problem that so far has resisted all attempts to provide good approximability results.
In particular, the current best approximation ratio for this problem is roughly  (1/n1/4) [4].
Consequently, the following reduction proves that achieving a good approximation for our problem must result in a good approximation for the dense k-subgraph problem.
For example, developing a  (1/B )approximation algorithm for our problem would imply a  (1/k )approximation for dense k-subgraph.
           

  
 ) such that S  
 = {(v, e) : v   S Given an input instance of dense k-subgraph, we construct an input instance of our problem that consists of a bipar-
tite graph G , e     and its edge set is de ned as E , and v is one of the endpoints of e in G}.
Furthermore,
 we set the capacity of each source node to 1, the budget B = k, and the probability vector associated with each target node to  0, 1 .
Now, one can easily verify that a solution  
 for dense k-subgraph that covers   edges implies a budget allocation in the newly-created instance with in uence  . Speci cally, one should allocate a unit of budget to each of the source nodes corresponding to V .
Conversely, it is not di cult to verify that given a valid budget allocation, one can perform a similar value-preserving transformation in the opposite direction.
  As a result of this value-preserving reduction, and in conjunction with the hardness results presented in [1], we attain the following inapproximability result.
This result is based on a certain hypothesis regarding the hardness of the hidden clique problem.
Theorem 4.
The in uence maximization problem in the target-side model is hard to approximate within a factor of  (1/2(log B)2/3 ), assuming that there is no algorithm that runs in time no(logn) and distinguished between a random graph G(n, 1/2) and a random graph G(n, 1/2) with a random clique of size n1/3 placed in it.
In light of the state of a airs presented in Subsection 3.1, we focus our attention on a modi ed model in which there are no capacity constraints on the source nodes, but the budget constraint B is still valid.
We develop an e cient deterministic algorithm whose approximation ratio is logarithmic.
We begin by introducing the maximum thresholds coverage problem.
Subsequently, we show that given an instance of our problem, one can translate it to maximum thresholds coverage with multi-sets.
The maximum thresholds coverage problem.
An input instance of the maximum thresholds coverage problem consists of a ground set of n elements X = {e1, .
.
.
, en}, a collection of m subsets X1, .
.
.
, Xm   X, and a budget B.
Each element ei is associated with a positive threshold value di, and a positive weight wi.
The objective is to select at most B of the subsets in a way that maximizes the overall weight of satis ed elements.
An element ei is satis(cid:12)ed if it appears in at least di of the selected subsets.
When one is allowed to select multiple copies of any subset then this problem is refereed to as maximum thresholds coverage with multi-sets.
We emphasize that the overall number of selected subset copies should be at most B in this case.
Given an input instance of our problem, we can translate it to maximum thresholds coverage with multi-sets as follows: Each target node t is translated to a collection of B elements Et = {et1, .
.
.
, etB}, and each source node s is translated into a subset Xs that consists of all the elements corresponding to each of its neighboring target nodes.
For example, if t is a neighbor of s in the bipartite graph then Xs consists of all the elements of Et.
The threshold of each element etb is set to b, and its weight is set to ft(b) ft(b 1), i) de nes the probability that a target node t becomes active as a function of the overall budget b allocated to its neighbors.
where ft(b) = 1   i=1(1   pt b One can easily validate that a solution for our problem de nes a solution for maximum thresholds coverage with multi-sets whose overall weight is equal to the expected in uence of the former solution.
Speci cally, each unit of budget assigned to a source node s translates to a selection of a copy of the subset Xs.
In addition, notice that all the elements of each Et are covered the same number of times as a result of our construction.
Consequently, if the budget allocated to the neighbors of t was b then each of the elements of Et are covered b times.
Clearly, only the elements et1, .
.
.
, etb are satis ed, and their overall weight contribution is indeed equal to the probability that t becomes active when a budget of b is allocated to its neighbors, as required.
Conversely, it is not di cult to verify that given a solution for maximum thresholds coverage with multi-sets, one can perform a similar value-preserving transformation in the opposite direction.
i=1(ft(i)   ft(i   1)) = ft(b).
Note that this is   b In the re-A logarithmic approximation algorithm.
mainder of this subsection, we concentrate on the maximum thresholds coverage with multi-sets problem.
We present a  (1/ log B)-approximation algorithm for this problem, which implies the same performance guarantee for in uence maximization in the target-side model by the above reduction.
We emphasize that one may assume without loss of generality that the minimal element weight is at least 1.
This assumption holds as one can normalize the weights (by di-quences whatsoever.
Our algorithm employs a classify-and-select approach.
Speci cally, it works as follows:   We partition an input instance into  log B  classes based on the thresholds of the elements.
More precisely, the ith class de nes an input instance which is induced by the elements whose thresholds are in the range Ii = [2i 1, 2i).
This input instance is identical to the original instance with the modi cation that     the collection of subsets is X m, where each X j consists only of the elements of Xj whose thresholds are in the range Ii.
 

   We  nd an approximate solution for each modi ed input instance.
Speci cally, given the input instance of class i, we consider a (weighted) coverage problem that consists of the same elements and subsets, but has a budget of max{ B/2i , 1}.
Note that there are no thresholds in this problem, and we are basically interested in maximizing the weight of covered elements.
An element is covered if it appears in at least one selected subset.
We execute the well-known greedy algorithm for coverage (see, e.g., [16]) on this problem to obtain a solution S   {X m}.
As a solution   for class i, we return min{2i, B} copies of each of the subsets in S.
 

   As the solution of our algorithm, we return the solution that maximizes the overall weight of satis ed elements out of the  log B  solutions computed for the classes.
We next prove the main theorem of this section.
Theorem 5.
The above algorithm has an approximation ratio of  (1/ log B).
Proof.
We prove that the solution that is computed for each class i attains a constant fraction of the weight that the optimal solution yields from the elements whose thresholds are in the range Ii.
As a consequence, the above-mentioned approximation ratio follows since there is at least one class for which the optimal solution yields  (1/ log B) of the optimal weight.
For ease of presentation, it would be convenient to assume that B is a power of 2, i.e., B = 2  for some     N.
We demonstrate how to neglect this assumption later on.
Consider some class i.
We next argue that an optimal solution which is restricted to select either 0 or 2i copies of any subset is only worse by some constant factor c from an optimal solution that can select any number of copies of any subset.
Notice that proving this argument completes the proof of the theorem since our algorithm  nds a constant factor approximation for the former setting.
Speci cally, The former setting is equivalent to the coverage problem considered by our algorithm, and the greedy algorithm is known to attain (1   1/e)-approximation for coverage [25,
 of the optimal weight for class i.
For the purpose of proving the above argument, we use a simple probabilistic argument.
Let us concentrate on the optimal solution S  for class i that can select any number of copies of any subset, and let E be the set of elements sat-is ed by this solution.
We analyze the following approach: (1) randomly select B/2i subsets from the multiset S  , and (2) output a solution that consists of 2i copies of any selected subset.
Note that if several copies of a subset are   selected, we still output only 2i copies of it.
Clearly, the resulting solution is restricted in the sense that either 0 or 2i copies of any subset are selected.
Furthermore, the number of copies in the solution is at most B/2i   2i = B.
Finally, the expected weight of the solution is at least ] [ ( ( Pr e E(cid:3)         (   e E(cid:3) e E(cid:3)
 e  
 is selected B 2i(cid:0)1 B/2i ) ) ) )B/2i X such that e   X ( ( ( 1   2i 1 )  
 B/2i we

   we ) we we , e E(cid:3) ( ) ( )   (1   a c a b c /   where the second inequality follows as b/a)c. In other words, the expected weight of the solution is a constant fraction of the optimal weight of class i.
As a result, the optimal solution which is restricted to select either 0 or 2i copies of any subset is worse by at most a e   0.393 from an optimal solution that factor of 1   1/ can select any number of copies of any subset.
We now discuss how to deal with the general case that B is not a power of 2.
Suppose that     N is the  rst integer such that B < 2 .
First notice that for class  , our algorithm computes a greedy solution with a budget of 1 (i.e., selecting one subset whose elements have maximal weight), and then returns the solution that consists of B copies of that subset.
Arguments similar to those presented in the above probabilistic argument, applied to the case in which one random subset of S  is initially selected, can be used to prove that the weight of the optimal restricted solution for that class is at least 1/2 of the weight of the optimal unrestricted solution.
In fact, applying the same probabilistic argument with respect to selecting just one random subset establishes that the weight of the optimal restricted solution for class   1 is at least 1/4 of the weight of the optimal unrestricted solution.
Focusing on the remaining classes i = 1, .
.
.
,     2, one can demonstrate that applying the probabilistic argument in which we initially select  B/2i  subsets from S  proves that the weight of the optimal restricted solution for class i is at least 1   e  1/4   0.221 of the weight of the optimal unrestricted solution.
We study the problem of allocating a given budget to various media channels to maximize the in uence on a candidate audience.
We present two models of in uence, namely, a source-side and a target-side in uence models.
We develop an optimal approximation algorithm for the  rst model, while establishing that the latter model is provably harder.
We also demonstrate that the budget capacity constraints underlie the computational hardness of the latter model.
We discuss several extensions of the source-side in uence model in Subsection 2.3.
We believe that it is worthwhile to further study those directions.
We also think that it would be interesting to prove hardness results for the target-side in uence model under more standard assumptions, like a P  = NP assumption.
Finally, another worthy direction for in uence model in which there are no capacity constraints.
[16] D. S. Hochbaum, editor.
Approximation algorithms for NP-hard problems.
PWS Publishing Co., 1997.
