Given the vast amount of content available on the Internet,  nding information of personal interest (news, blogs, videos, movies, books, etc.)
is often like  nding a needle in a haystack.
Recommender systems based on collaborative  ltering (CF) [15] aim to address this problem by leveraging the preferences of similar users in a user population.
Copyright is held by the International World Wide Web Conference Committee (IW3C2).
Distribution of these papers is limited to classroom use, and personal use by others.
As the web has become more social with the emergence of Facebook, Twitter, LinkedIn, and most recently Google+, this adds myriad new dimensions to the recommendation problem by making available a rich labeled graph structure of social content from which user preferences can be learned and new recommendations can be made.
In this socially connected setting, no longer are web users simply described by an IP address (with perhaps associated geographical information and browsing history), but rather they are described by a rich user pro le (age, gender, location, educational and work history, preferences, etc.)
and a rich history of user interactions with their friends (comments/posts, clicks of the like button, tagging in photos, mutual group memberships, etc.).
This rich information poses both an amazing opportunity and a daunting challenge for machine learning methods applied to social recommendation   how do we fully exploit rich social network content in recommendation algorithms?
Many existing social CF (SCF) approaches [10, 11, 19,
 as [16] used in the nonsocial CF setting.
These MF approaches have proved quite powerful and indeed, we will show empirically in Section 5 that existing social extensions of MF outperform a variety of other non-MF SCF baselines.
The power of CF MF methods stems from their ability to project users and items into latent vector spaces of reduced dimensionality where each is e ectively grouped by similarity; in turn, the power of many of the SCF MF extensions stems from their ability to use social network evidence to further constrain (or regularize) latent user projections.
Despite providing state-of-the-art performance on SCF problems, we notice that existing SCF MF objective functions can be improved in three key aspects, which form the basis for our key algorithmic contributions in this paper: (a) Learning user similarity: In existing SCF MF objectives, the mapping from user features to user similarity is  xed.
It will be desirable to learn such similarity among a large number of pro le attributes from data, such as two users are more similar when they have the same gender or age.
To address this, we extend existing social regularization and social spectral regularization objectives to incorporate user features when learning user-user similarities in a latent space.
(b) Direct learning of user-to-user information diffusion: Existing SCF MF objectives do not permit directly modeling user-to-user information di usion according to the social graph structure.
For example, if a certain user always likes content liked by a friend, this cannot be directly learned by optimizing existing hybrid SCF method where we combine the collaborative  ltering (CF) matrix factorization (MF) objective used by Matchbox [17] with a linear content-based  l-tering (CBF) objective used to model direct user-user information di usion in the social network.
(c) Learning restricted interests: Existing SCF MF objectives treat users as globally (dis)similar although they may only be (dis)similar in speci c areas of latent interest.
For example, a friend and their coworker may both like technology-oriented news content, but have di ering interests when it comes to politically-oriented news content.
To address this, we de ne a new social co-preference regularization method that learns from pairs of user preferences over the same item to learn user similarities in speci c areas   a contrast to previous methods that typically enforce global user similarity when regularizing.
The key application contribution of our paper is to evaluate the proposed recommendation algorithms in online human trials of a custom-developed Facebook App for link recommendation.
We use data collected over  ve months from over 100 App users and their 37,000+ friends.
Results show that feature-based social spectral regularization outperforms (i) a range of existing CF and SCF baselines, (ii) performs as well on friend recommendations as direct modeling of information di usion features, and (iii) provides better social regularization than the co-preference approach.
In addition, deploying our algorithm on a real social network provided us with a number of interesting observations from user behavior and feedback discussed in Section 5.3.
For example, click feedback correlates weakly with like ratings.
Also, the most popular links may be liked by the most people, but they are not liked by everyone on average.
In the rest of this paper, Section 2 provides a succint overview of CF and SCF algorithms, Section 3 proposes three novel objective functions to address (a) (c), Section 4 dicusses the details of our Facebook application for link recommendation, Section 5 presents two rounds of evaluation with further analysis of user data in our social recommendation setting, and Section 6 concludes this study.
Collaborative  ltering (CF) [15] is the task of predicting whether, or how much, a user will like (or dislike) an item by leveraging knowledge of that user s preferences as well as those of other users.
While collaborative  ltering need not take advantage of user or item features (if available), a separate approach of content-based  ltering (CBF) [7] makes individual recommendations by generalizing from the item features of those items the user has explicitly liked or disliked.
What distinguishes CBF from CF is that CBF requires item features to generalize whereas CF requires multiple users to generalize; however, CBF and CF are not mutually exclusive and recommendation systems often combine the two approaches [1].
When a CF method makes use of item and user features as well as multiple users, we refer to it as CF although in some sense it may be viewed as a combined CF and CBF approach.
We de ne social CF (SCF) as the task of CF augmented with additional social network information such as the following:   Expressive personal pro le content: gender, age, places lived, schools attended; favorite books, movies, quotes; online photo albums (and associated comment text).
  Explicit friendship or trust relationships.
  Content that users have personally posted (often text, images, and links).
  Content of public (and if available, private) interactions between users (often text, images and links).
  Evidence of external interactions between users such as being jointly tagged in photos or videos.
  Expressed preferences (likes/dislikes of posts and links).
  Group memberships (often for hobbies, activities, social or political discussion).
We note that CF is possible in a social setting without taking advantage of the above social information, hence we include CF baselines in our later experiments on SCF.
We present all algorithms for CF and SCF using the following mathematical notation:   N users.
For methods that can exploit user features, we de ne an I-element user feature vector x   R I (alternately if a second user is needed, z   R I ).
For methods that do not use user feature vectors, we simply assume x is an index x   {1 .
.
.
N} and that I = N .
  M items.
For methods that can exploit item features, we de ne a J-element feature vector y   R J .
The feature vectors for users and items can consist of any real-valued features as well as {0, 1} features like user and item IDs.
For methods that do not use item feature vectors, we simply assume y is an index y   {1 .
.
.
M} and that J = M .
  A (non-exhaustive) data set D of single user preferences of the form D = {(x, y)   Rx,y} where the binary response Rx,y   {0 (dislike), 1 (like)}.
  A (non-exhaustive) data set C of co-preferences (cases where both users x and z expressed a preference for y   not necessarily in agreement) derived from D of the form C = {(x, z, y)   Px,z,y} where co-preference class Px,z,y   { 1 (disagree), 1 (agree)}.
Intuitively, if both user x and z liked or disliked item y then we say they agree, otherwise if one liked the item and the other disliked it, we say they disagree.
  A similarity rating Sx,z between any users x and z.
This is used to summarize all social interaction between user x and user z in the term Sx,z   R. A de -nition of Sx,z   R that has been useful is the following average-normalized measure of user interactions: Int x,z =


 # interactions b/w x and z (cid:4) x(cid:2),z(cid:2)(cid:3)=x(cid:2) # interactions b/w x Sx,z = ln (Int x,z) (cid:4) and z (1) How  # interactions between x and z  is explicitly de- ned is speci c to a social network setting and hence uations in this paper to Section 4.2.4.
We also de ne S+ x,z, a non-negative variant of Sx,z:
 (2)   A setfriends x such that z   friends x i  z is o cially x,z = ln (1 + Int x,z) denoted as a friend of x on the social network.
Having now de ned notation, we proceed to survey a number of CBF, CF, and SCF algorithms including all of those compared to or extended in this paper.
Since our objective in this work is to classify whether a user likes an item or not (i.e., a binary objective), we focus on binary classi cation-based CBF approaches.
While a variety of classi ers may work well, we choose the support vector machine (SVM) [5] since it is well-known for its state-of-the-art classi cation performance.
For the experiments in this paper, we use a linear SVM (implemented in the LibSVM [4] toolkit) with feature vector f   R F derived from (x, y)   D, denoted as fx,y and tuning parameter C. A linear SVM learns a weight vector w   R
 such that wT fx,y > 0 indicates a like (1) classi cation of fx,y and wT fx,y   0 indicates a dislike (0) classi cation.
A detailed list of features fx,y used in the SVM for the Facebook link recommendation task evaluated in this paper are de ned as in Section 4.2.3   these include user features such as age and gender (binary) and item features such as popularity (number of times the item was shared).
Going one step beyond standard CBF, our SVM features also include joint user and item features from the social network, in particular binary information di usion [3] features for each friend z   friends x indicating if z liked (or disliked) y.
Crucially we note that our SVM implementation of CBF using social network features actually represents a social CBF extension since it can learn when a friend z s preference for items are predictive of user x s preferences.
k-Nearest Neighbor One of the most common forms of CF is the nearest neighbor approach [2].
There are two main variants of nearest neighbors for CF, user-based and item-based   both methods generally assume that no user or item features are provided, so here x and y are simply respective user and item indices.
When the number of users is far fewer than the number of items, it has been found that the user-based approach usually provides better predictions as well as being more e cient in computation [2]; this holds for the evaluation in this paper, so we focus on the user-based approach.
Given a user x and an item y, let N (x : y) be the set of N user nearest neighbors of x that have also given a rating for y, where  nearest  is determined by the cosine similarity (i.e., normalized dot product) Sim x,z between two vectors of ratings for users x and z (when both have rated the same item).
Following [2], the predicted rating  Rx,y   [0, 1] that the user x gives item y can then be calculated as

 z N (x:y) Sim x,zRz,y z N (x:y) Sim x,z  Rx,y = (3)
 Another common approach to CF attempts to factorize an (incomplete) matrix R of dimension I   J containing observed ratings Rx,y (note that x and y are assumed to row and column indices of Rx,y) into a product R   U T V

 of real-valued rank-K matrices U and V :








 ...
.
.
.
...
Uk,i

 ...
.
.
.
Vk,j .
.
.
...
In this initial MF setting, we do not leverage user and item features; hence, we let Ux and Uy pick out the respective xth and yth columns of U and V such that U T x Vy acts as a measure of a nity between user x and item y in their respective K-dimensional latent spaces Ux and Vy.
However, there remains the question of how we can learn U and V given that R is incomplete (i.e., it contains missing entries since D is generally non-exhaustive).
The answer is simple: we need only de ne a reconstruction error objective we wish to minimize as a function of U and V and then use gradient descent to optimize it; formally then, we can optimize the following MF objective [16]:
 (x,y) D (Rx,y   U T
 x Vy)

 (4) While this objective is technically bilinear, we can easily apply an alternating gradient descent approach to approximately optimize it and determine good projections U and V that (locally) minimize the reconstruction error of the observed responses Rx,y (see e.g.
[16]).
In this work on social CF (SCF), we focus on extending MF-based SCF approaches as they allow us to incorporate  exible objective functions that take into account a vast array of social network information.
Additionally, we can learn the parameters of the proposed algorithms from data by using gradient-based optimization.
To date, there are essentially two general classes of MF methods applied to SCF of which the authors are aware.
The  rst class of social MF methods can be termed as social regularization approaches in that they constrain the latent projection of users according to social network information.
There are two closely related social regularization methods that directly constrain Ux and Uz for user x and z based on evidence Sx,z of interaction between x and z.
The  rst class of methods are simply termed social regularization [19, 6] where (cid:6) , (cid:7) denotes an inner product:

 x z friendsx (Sx,z   (cid:6)Ux, Uz(cid:7))


 (5) The second class of methods are termed social spectral regularization [12, 8]:X
 x z friendsx x,z(cid:8)Ux   Uz(cid:8)2



 (6) We refer to the latter as spectral regularization methods since they are identical to the objectives used in spectral clustering [13].
The idea behind both variants of social regularization should be apparent: the larger Sx,z or S+ x,z, the di erent metrics) in order to minimize the given objective.
The SoRec system [11] proposes a slight twist on social spectral regularization in that it learns a third N   N (n.b., I = N ) interactions matrix Z, and uses U T z Zz to predict user-user interaction preferences in the same way that standard CF uses V in U T x Vy to predict user-item ratings.
SoRec also uses a sigmoidal transform  (o) = 1
 Sx,z restricted to the range [0, 1] (e.g.,  Sx,z =  (Sx,z)):

 z z friendsx (  Sx,z    ((cid:6)Ux, Zz(cid:7)))


 (7) The second class of SCF MF approaches represented by the single exemplar of the Social Trust Ensemble (STE) [10] can be termed as a weighted friend average approach since this approach simply composes a prediction for item y from an  weighted average (    [0, 1]) of a user x s predictions as well as their friends (z) predictions (as evidenced by the additional
 z in the objective below): (Rx,y    ( U T x Vy + (1   )

 (x,y) D

 z friendsx

 x Vz)) (8) As for the MF CF methods, all MF SCF methods can be optimized by alternating gradient descent on the respective matrix parameterizations; we refer the interested reader to each paper for further details.
Having surveyed previous CF work, especially MF-based CF and SCF methods, we now present the major conceptual contributions of the paper.
We begin by introducing a uni ed matrix factorization framework for optimizing all MF objectives evaluated in this paper   old and new.
We take a composable approach to MF-based (S)CF, where an optimization objective Obj is composed of sums of one or more objective components:
 Obj = i  iObj i (9) Because each objective may be weighted di erently, a weighting term  i   R is included for each component.
In the cur-
rent work, we manually tuned each  i, except for the  rst i i, which can be set as  i = 1 without loss of generality.
in Most target predictions in this paper are binary ({0, 1}), therefore a sigmoidal transform  (o) = 1 1+e o of a prediction o   R may be used to squash it to the range [0, 1].
Where the   transform may be optionally included, this is written as [ ].
While   transforms are generally advocated for real-valued regressor outputs when used in a classi cation setting, we note that our experiments showed little variation in results whether including or omitting it, although including it tended to slow the convergence of gradient optimization.
Nonetheless, where appropriate, we include the possibility of a   transform since it may prove useful in other settings.
For completeness, we  rst cover a number of known objective components that are used in the objectives evaluated and extended in this paper.
A discussion of gradient optimization along with all necessary derivatives for these objectives is provided in Appendix A.
In Section 2.3.2, we discussed an MF objective (4) that did not make use of user or item features.
However, if we do have user feature vector x and item feature vector y, we can respectively represent the latent projections of user and item as (U x)1...K and (V y)1...K and hence use (cid:6)U x, V y(cid:7) = xT U T V y as a measure of a nity between user x and item y.
Substituting the feature-based xT U T V y for the featureless
 x Vy in (4), we arrive at the form of the basic CF objective function used in Matchbox [17]   although Matchbox used Bayesian optimization methods, we can easily express its main objective in the following log likelihood form: Obj pmcf =
 (x,y) D (Rx,y   [ ]x T U T V y)
 (10)


 To help in generalization, it is important to regularize any free matrix parameters U and V (e.g., from Section 3.2.1) or vector parameters w (e.g., from Section 2.2) to prevent over tting when dealing with sparse data.
This can be done with a simple L2 regularizer that models a spherical Gaussian prior on the parameters.
This regularization component can be speci ed for U , V , and w as follows: Obj ru = Obj rw =



 (cid:8)U(cid:8)2 (cid:8)w(cid:8)2 Fro = tr(U T U ) Obj rv =

 tr(V T V )



 w w

 (11)
 Now we return to our observations concerning the de cien-cies of existing SCF MF methods as outlined in Section 1 and propose new objective functions to address these issues.
Gradient-based optimization for these new objectives and all necessary derivatives are covered in Appendix A.
Our previous discussion of SCF methods in Section 2.3.3 covered three di erent methods for social regularization   that is, constraining users to be similar based on evidence from the social network.
However, none of these previous three SCF social regularization methods exploited user features in the learning process; more precisely Ux and Uz were regularized, but not the feature-based latent spaces U x and U z.
Hence if a gender di erence in x and z was the crucial factor to di erentiating the latent spaces of each user, this could be learned if we had a way of socially regularizing U x and U z directly.
To address this, we provide two variants of feature-based social regularization.
The  rst new objective is an extension of simple social regularization [19, 6] that incorporates user features:

 Obj rs = x z friends(x)

 (Sx,z   (cid:6)U x, U z(cid:7))


 (12) = x z friends(x) (Sx,z   x T U T U z)


 Alternately, we could extend social spectral regularization [12, 8] by incorporating user features into its objective:

 x z friends(x)

 x,z(cid:8)U x   U z(cid:8)2



 (13) = x z friends(x) x,z(x   z)
 T U T U (x   z)

 While we note these extensions are straightforward, they have the simple property that they allow the system to learn the latent user projection matrix U as a function of user features in order to minimize the social regularization penalty.
Just as the Matchbox objective in Section 3.2.1 allows us to exploit user and item features in MF-based CF, these new social regularization objectives permit more  exibility in exploiting user features in learning user similarity.
One major weakness of MF methods is that they cannot model direct joint features over user and items   they must model user and item features independently in order to compute the independent latent projections U x and U z.
Unfortunately, this prevents standard MF objectives from modeling direct user-to-user information di usion [3]   the unidirectional  ow of information (e.g., links) from one user to another.
This is problematic because if user x always likes what z has posted or liked, then we would like to shortcut the latent representation and simply learn to recommend user z s liked or posted items to user x.
We  x this de ciency of MF by introducing another objective component in addition to the standard MF objective, which serves as a simple linear regressor for such information di usion observations.
The resulting hybrid objective component then becomes a combination of latent MF and linear regression objectives.
For the linear regressor wT fx,y, we make use of the same weight vector w and feature vector fx,y mentioned in Section 2.2; fx,y is fully de ned for our empirical evaluation in Section 4.2.3.
As previously noted, fx,y includes joint user and item features from the social network, in particular binary information di usion [3] features for each friend z   friends x indicating if z liked (or disliked) y.
As a consequence, learning w allows the linear regressor to predict in a personalized way for any user x whether they are likely to follow their friend z s preference for y.
Formally, to de ne our hybrid information di usion plus SCF objective, we additively combine the output of the linear regression prediction with the Matchbox prediction: (Rx,y   [ ]w


 fx,y   [ ]x T U T V y)
 (14) Obj phy =
 (x,y) D
 A crucial aspect missing from other SCF methods is that while two users may not be globally similar or opposite in their preferences, there may be subareas of their interests which can be correlated to each other.
For example, two friends may have similar interests concerning technology news, but di erent interests concerning political news.
Co-preference regularization aims to learn such selective co-preferences.
The motivation is to constrain users x and z who have similar or opposing preferences to be similar or opposite in the same latent item space relevant to item y.
We use (cid:6) , (cid:7)  to denote a re-weighted inner product.
The purpose of this inner product is to  mask  enforcement of la-Figure 1: The Facebook LinkR App showing two link recommendations to a user.
The  rst link recommendation is from a non-friend and hence only shows the link description.
The second link recommendation is from a friend and includes the friend s commentary on the link as well as the link description.
Users have the option of liking or disliking each recommendation as well as providing feedback.
tent space similarities or dissimilarities between users to be restricted to the same latent spaces as the co-preferred items.
To this end, the objective component for co-preference regularization along with its expanded form is
 Obj cp = = (x,z,y) C
 (x,z,y) C (Px,z,y   (cid:6)U x, U z(cid:7)V y)
 (15) (Px,z,y   x

 diag(V y)U z)



 We might also de ne a social co-preference spectral regularization approach, but our experiments so far have not indicated this works as well as the above objective.
In contrast to social regularization de ned previously, co-preference regularization does not require knowledge of friendships or user interactions to determine co-preferences and hence can enforce regularization constraints between all users.
Next we discuss our Facebook Link Recommendation App (LinkR), data collected, and our evaluation methodology.
To evaluate existing and newly proposed (S)CF methods discussed in this paper, we created a Facebook application (i.e., a Facebook  App ) that recommends links to users every day, where the users may give their feedback on the links indicating whether they liked it or disliked it.
Figure 1 shows our Facebook LinkR App as it appears to users.
The functionalities of the LinkR application on a daily basis are as follows:
 Interaction Data
 dation algorithms on the latest collected data.
C and D from Section 2.1 are populated from all explicit likes and dislikes observed via the Facebook LinkR App and all  likes  observed via the Facebook interface.
cording to their assigned recommendation algorithm.
or disliked the recommendations as well as any additional commentary the user wishes to provide.
Details of (S)CF link recommendation algorithms and user assignments will be discussed shortly;  rst we cover data collected by the LinkR App and used by the recommenders.
At its peak membership, 111 users had elected to install the Facebook App developed for this project.
From this user base, we were able to gather data on over 37,626 users and 605,847 links in total by the end of the evaluation period.
Data that are collected and used to de ne the user feature vector x introduced in Section 2.1 for the LinkR Facebook App are de ned as follows:   [xid = id ]   {0, 1}, id : every unique Facebook ID (user) recorded in the App was assigned its own binary indicator in x; all id indicators are mutually exclusive.
  gender   {0(female), 1(male)}.
  age   N.
We note that the indicator of friendships for x is stored in the friends x set de ned in Section 2.1 and used in various previous objective de nitions, but not explicitly stored in x.
Data that are collected and used to de ne the item feature vector y introduced in Section 2.1 for the LinkR Facebook App are de ned as follows:   [yposter = id ]   {0, 1}, id : binary indicator feature for the id of the user who posted the link; all such binary indicator features are mutually exclusive.
  [ywall = id ]   {0, 1}, id : binary indicator feature for the id of the user on whose wall the link was posted; all such binary indicator features are mutually exclusive.
  Count of total link  likes  on Facebook.
  Count of total link shares on Facebook.
  Count of total link comments posted on Facebook.
Joint User and Link Data The feature vector fx,y used in Sections 2.2 and 3.3.2 for the LinkR Facebook App is de ned as the concatenation of x, y (above) and the following additional social network information di usion features:   z liked x   {0, 1}, z   friends x: for every friend z of user x, we have a binary information di usion feature indicating whether user z liked item y (recall that fx,y is built w.r.t.
a speci c user x and item y).
We de ne # interactions between user x and user z in Section 2.1 as follows (all interactions are equally weighted):

 video, or message) on a user s wall.
gether, working together for a company or on a project.
LinkR users were randomly and blindly assigned one of four algorithms in each of two live trials (algorithm details in Section 5).
The rationale for assigning a single recommendation algorithm to a user was to obtain survey feedback from a user on their assigned algorithm to understand qualitative recommendation issues from a holistic algorithm perspective not necessarily obvious from quantitative measures alone.
Figure 1 shows the LinkR App interface, which displays both friend and non-friend link recommendations and allows the user to rate each link as like or dislike and provide optional feedback.
LinkR recommended three links per day to avoid position bias and information overload.
In early testing, users commented that many links older than two weeks were outdated or broken so LinkR only recommends links posted in the past two weeks that the user has not already posted, liked, or disliked.
Based on  rst trial feedback, in the second trial we avoided recommendations of (i) non-English links and (ii) links lacking a text description.
Here we analyze results collected during two LinkR trials.1
 In our  rst trial, we evaluated four (S)CF algorithms:


 Obj pmcf +  Obj ru +  Obj rv
  3,  =102, K=5) regularized Matchbox SCF ( rs =10 Obj pmcf +  rs Obj rs +  Obj ru +  Obj rv Objectives for (Soc.)
Mbox were given in Section 3 and optimized via gradient descent as in Appendix A.  s for (Soc.)
Mbox were tuned prior to the start of the trial by a systematic line (grid) search over 10n for n   { 5, 4, .
.
.
, 5} to maximize accuracy on 25% held-out data, training on the other 75%.
This was repeated for K   {3, 5, 7, 10, 15, 20, 30} to  nd the best K. N and C were tuned similarly via line search over N   {1, 2, .
.
.
, 250} and C   [10
 //code.google.com/p/social-recommendation/.
The conditions of our ethics approval #2011/142 from the Australian National University for conducting human trials on Facebook require our privacy policy (http://dmm.anu.edu.
au/linkr/website/pp.php) to prohibit public sharing of data collected during these experiments.
 4, 104].
Users All Users   10 Users   30 Ratings All Ratings   10 Ratings   30 Clicks All





























 Total






 Trial 2   Oct. 14, 2011 to Feb. 10, 2012 Users All Users   10 Users   30 Ratings All Ratings   10 Ratings   30 Clicks All SMB Sp.MB Sp.CP SHyb.
Total


































 Table 1: Number of users assigned per algorithm in the  rst and second trials.
  10 (  30) indicates data for the subset of users with at least 10 (30) ratings.
Data from non-rating users (and their friends) was important for the performance of all algorithms.
First trial details are provided in Table 1 (top); algorithm performance is shown in Figure 2 (top).
95% binomial proportion con dence intervals (using the asymmetrical Wilson score interval method [18]) are shown for the combined data for all users of each algorithm.
While user usage varies, this method of combining all user data for CF system performance analysis is a standard evaluation approach for CF systems; notably, RMSE over all combined ordinal user ratings was used for determining the winner of the Net ix prize2.
Except for Mbox, most algorithms performed comparably on non-friend recommendations.
For friend recommendations, Soc.
Mbox performed best, where it appears that social regularization helped it e ectively  nd latent representations of friends with similar interests; it performed better than Mbox without social regularization and SVM which attempted to explicitly model information di usion from friends.
While KNN had low usage, it would be statistically unlikely to match Soc.
Mbox s performance on friend recommendations   to do so if the amount of KNN data were doubled, nearly all new ratings would have to be  like .
For the second trial, Soc.
Mbox was included as a baseline since it was the top performer from the  rst trial.
The remaining three algorithms were all relatively orthogonal Soc.
Mbox extensions or variants based on the three novel objective functions de ned in Section 3.3 (all used K = 5):

  3,  =10) Obj pmcf +  rss Obj rss +  Obj ru +  Obj rv
  3;  =104) Obj phy +  rs Obj rs +  Obj ru +  Obj rv +  Obj rw
  4;  =10) Obj pmcf +  cpObj cp +  Obj ru +  Obj rv
 http://www.netflixprize.com/ All objectives are de ned in Section 3 and optimized via gradient descent as in Appendix A.   and K parameters for Soc.
Mbox were left unchanged from the  rst trial in order to use it as a  xed comparative baseline across both trials.
We chose K = 5 for all other recommendation algorithms to provide a controlled comparison with Soc.
Mbox.
With K = 5  xed, all other   parameters were tuned prior to the start of the second trial using the same systematic grid search methodology as described for the  rst trial.
Second trial details are provided in Table 1 (bottom); on the start of the second trial, users were noti ed that they would be randomly assigned to new algorithms and encouraged to reengage with the LinkR App if they had not been using it.
Two email reminders were sent during the trial.
Second trial results using the same evaluation methodology as described for the  rst trial are shown in Figure 2 (bottom).
Following are key observations from this trial:   Soc.
Mbox did not perform as well in the second trial as it had in the  rst trial.
We hypothesize that Soc.
Mbox may have performed better if  rs and   were better tuned for the amount of data in the second trial.
To evaluate this hypothesis, in the following table, we show the accuracy of Soc.
Mbox at predicting link likes/dislikes on second trial data, training on 75% of the data and testing on the remaining 25%:  rs =10  =101 0.325  =102 0.306  =103 0.297  1 =10


  2 =10


  3 =10


  4 =10


  5 Here we show results for the second trial parameter settings in bold that achieve prediction accuracy of 0.300; however if both   and  rs are reduced, we note a substantial improvement to 0.436 and 0.540.
It appears less regularization of U and V is needed in the presence of the additional data in the second trial and the accuracy di erential here suggests the need to periodically re-tune parameters to maintain optimal performance.
  Spec.
Mbox performed exceedingly well in the second trial and this suggests that our novel feature-based spectral social regularization is likely a better method of regularization for U than the social regularization of Soc.
Mbox.
Even when considering the best achievable performance of Soc.
Mbox (54%), this would still fall well below Spec.
Mbox s impressive 65%.
  Soc.
Hybrid statistically ties Spec.
Mbox at recommending friend links (where it can learn user-to-user information di usion), but performs less well on non-friend links (where there is no such di usion).
These results suggest that the space and compution-e cient low-dimensional learning of Spec.
Mbox can recommend friend links just as well as Soc.
Hybrid s modeling of explicit user-to-user information di usion.
  Given that each LinkR user shared co-preferences with 535.1 other users on average (indicating that this data is far from sparse), it would appear from the performance of Spec.
CP that co-preferences serve as a somewhat noisy social regularization constraint compared to social regularization based on interactions between friends as exempli ed by Spec.
Mbox s performance.
of likes is displayed above the fraction of dislikes.
Results are also broken down by link type: (left) all, (center) friend only, (right) non-friend only.
95% binomial proportion con dence intervals are shown.
Overall, users had a general bias to like links recommended by friends more than non-friends; importantly, we note that users could see the names and comments of friends whose links were recommended, indicating the importance of context in recommendation.
Next we brie y analyze other user behavior and data collected during both trials of the LinkR App that can be helpful in building future SCF systems.
In Figure 3(a), we observe the ratings of links that users clicked on.
The most important thing we notice here is that even though users clicked on a link, they were somewhat likely to rate it as a dislike (roughly 2 3 like to 1 3 dislike).
One might hypothesize that perhaps users clicked on links more often with no description to  nd out what they were and most often disliked them   this might explain the high number of dislikes for clicked links.
However, examining both Figures 3(b) and (c), we observe that whether a description was present had a relatively minor impact on whether a link was clicked or liked, so we cannot infer that the disliked links were simply the ones lacking a description.
Then the insight from this analysis is extremely important for SCF recommendation design because it states that click data is a somewhat weak indicator of likes and that even if one could predict clicks with perfect accuracy, this would only yield roughly 2 3 accuracy for likes prediction.
In Figures 3(d) and (e) we analyze the impact of global link popularity (in terms of total shares on Facebook) on how much LinkR App users liked a link.
The trend is clear for both friend (d) and non-friend (e) links: users tend to like the most popular (top quartile) links the least compared Individual Link Comments Comment Type # not interested

 wrong language
 really liked it!
bad YouTube
 seen it already problem / dead

 outdated miscellaneous
 %







 User Survey Comments want more control over recommendations made (music, blogs, news) want option to see > 3 recommendations links need description / context or explanation of recommendation more variety, diversity Table 2: Individual link comments (aggregated) and notable user survey requests (paraphrased).
to all other quartiles.
In general, users tended to most prefer links that were somewhat popular (middle quartiles).
From this we can infer that while the most popular links may be liked by the most people, they are not liked by everyone on average; this suggests that link popularity should not be weighted too heavily in determining link recommendations.
We collected individual link recommendation comments in the LinkR App as shown in Figure 1 and we also ran a user survey toward the end of both trials to collect qualitative feedback on the overall LinkR user experience.
Due to space limitations, we brie y summarize this data in Table 2.
Table 2 (left) shows link comments classi ed into general classes and ranked by frequency.
Users were easily annoyed (i) if they could not read the language of the link   this issue was addressed with a language  lter in the second trial, (ii) if a YouTube or other link was inaccessible   YouTube links were some of the most popular links on Facebook and were also frequently removed for copyright violations, (iii) if a user had seen a similar link topic already   e.g., users quickly (b) (c) (d) (e) Figure 3: Stacked bar graphs for rating and click data collected during both trials.
The fraction of likes (or clicks) is displayed above the fraction of dislikes (or non-clicks)   and above the fraction of not-rated links for (a).
95% binomial proportion con dence intervals are shown.
(a) ratings for clicked links, (b) clicks vs.
description, (c) ratings vs. description, (d) ratings vs. quartile of popularity for friends, and (e) non-friends.
got tired of repeated news links on Steve Jobs death during the second trial even though the links had di erent content, or (iv) if links were deemed to be outdated   e.g., a news article had been superceded by more recent information.
On the other hand, if a user was pleased with a recommendation that they were not otherwise aware of, they often indicated this.
In Table 2 (right) we show four notable user survey comments requesting modi cations to the LinkR experience.
In this paper, we evaluated existing algorithms and proposed new algorithms for social collaborative  ltering via the task of link recommendation on Facebook.
Importantly, we outlined three main de ciencies in existing social collaborative  ltering (SCF) matrix factorization (MF) techniques and proposed novel objective functions that (a) extended existing social regularization SCF approaches to incorporate user features by drawing on ideas from Matchbox [17], (b) modeled direct user-to-user information di usion, and (c) modeled restricted common interests among all users (friend and non-friend) with social co-preference regularization.
We evaluated existing baselines and then evaluated algorithms based on optimization of these new objectives in Section 5 via live online user trials taking place over  ve months with over 100 Facebook App users and data from over 37,000 Facebook users.
Results show that our novel feature-based social spectral regularization extension of Matchbox achieves an overall correct  likes  prediction rate of 65%   performance far exceeding that of all other algorithms trialed.
User feedback has opened up many new possibilities for further improving the SCF user experience.
Future work can include: providing explanations for recommended content; incorporating genre features to provide a  ne-grained model of user preference among di erent content; and enforcing diversity among recommendations to prevent redundancy.
This work was partially funded by a Google Research Award.
NICTA is funded by the Australian Government as represented by the Department of Broadband, Communications and the Digital Economy and the Australian Research Council through the ICT Centre of Excellence program.
