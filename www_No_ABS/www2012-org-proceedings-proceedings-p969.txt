In Service-Oriented Architectures (SOA), service providers o er services that in many cases perform the same task but with varying Quality-of-Service (QoS) levels.
QoS-aware service selection algorithms can be used to optimize the QoS of a given work ow during runtime.
These algorithms select for each task one service, by taking, e.g., the price and reliability of the resulting work ow into consideration.
Moreover, the user may also specify constraints on the QoS of the work ow.
Since the search space is exponential, heuristic algorithms are employed to compute solutions in a feasible amount of time.
Our main goal is to support the human decision maker in selecting a service composition that best  ts his/her needs in an open service environment.
We intend to compute QoS optimized compositions that can sustain a certain number of service failures.
For that purpose, we need an extended QoS model that takes services failures into account.
In the following, we outline the resulting subgoals in more detail.
Suf cient reliability (Goal G1) Services failures may occur for various reasons, e.g., hardware failures or obsolete registry information.
As the number of services in a work ow grows, the reliability of the work ow decreases signi cantly.
Let us consider, for instance, a  xed reliability of 95% for each service.
A small work ow containing ten of these services has a reliability of less than 60%; a work ow containing 25 such services has a reliability of less than 30%.
The utility of a work ow has often been computed by aggregating the reliability with other QoS attributes, such as the price, by using a simple additive weighting scheme.
Consequently, the algorithms might sacri ce reliability in order to optimize other QoS attributes.
Moreover, even if reliability is the primary objective, the current approaches are not su cient to maintain it at a feasible level.
In particular, selection approaches that use skyline queries to prune the search space [2] exclude potential backup services before the selection phase.
used to replace failed services with backup services.
However, sometimes a service cannot be replaced, e.g., if the constraints are very tight and only this services can be employed at a certain stage of the work ow.
Improved QoS model (G2) Moreover, the current selection algorithms ignore the potential additional costs and longer response times of employing backup services selected by ad-hoc replanning algorithms.
For that purpose, the QoS model needs to cover the probabilistic nature of the QoS of the work ows in order to facilitate computations to predict the expected outcome as well as the outcome in the best and worst cases.
Support of functionally diverse services (G3) It is unlikely that services sharing the same purpose will have identical interfaces.
Similar services developed and o ered by di erent service providers would naturally have slightly di erent functional interfaces; one may have more input parameters, while another may have output parameters with a di erent type.
Moreover, we expect that the number of publicly accessible web services will increase dramatically from current approx.
28,0001 due to the emergence of Cloud Computing.
By including functionally diverse services, selection algorithms would have more services to choose from and more potential backup services would be able to be employed.
For the above reasons, we claim that selection algorithms must take the functionality of the services into consideration.
Consequently, certain links between services might be invalid in a work ow composition, and selections would be unusable if they included such a link.
Moreover, local optima are more likely in this scenario, leading to poorer results from heuristic algorithms that explore the search space in a more or less random manner.
Since multiple valid solutions might be computed, the user should be able to choose among them intuitively.
By comparing solutions with each other, their impact on the other attributes should be visualized when one QoS attribute is increased.
To reach these goals, we devised a multi-objective optimization algorithm that leverages background knowledge to discover robust QoS-optimized service selections in an open service environment.
The algorithm takes the costs of potential service failures into account and ranks solutions on the basis of the risk preferences of the decision maker.
Speci cally, we present the following contributions in this paper:
 In address-diverse services in the selection process.
ing Goal G3, we evaluate and compare state-of-the-art multi-objective optimization algorithms.
on a genetic algorithm.
It leverages background knowledge on the functionalities of the services to  nd robust valid service selections e ciently (Goal G1 and G3).
account and enables to compute the expected outcome of adding backup services to a composition.
For each service we introduce the expected QoS values and the QoS in the best and worst case.
This way, the user may choose a service selection based on his/her risk preferences (Goal G2).
to  nd a service selection that best  ts his/her needs.
The user inputs QoS and risk preferences, and the tool ranks the sorted solutions and provides a means to compare them (Goal G4).
In our previous work [21], we evaluated the bene ts of employing background knowledge on service functionality for QoS-aware service selection with single objectives.
We compared our algorithm with a genetic algorithm in a different problem setting from the one of the current study.
In this paper, we describe an advanced repair operation, provide a detailed description of the algorithm and introduce a new QoS model to consider possible repair costs.
Moreover, we compare our algorithm with various multi-objective optimization algorithms.
In [20, 22], we evaluated functional clustering in the context of service planning.
The clustering algorithm could only be applied to scenarios where the background type hierarchy is known.
Moreover, in the following we present ways to merge clusters.
The rest of the paper is structured as follows: in the next section we present the preliminaries of service composition and multi-objective optimization.
Section 2 covers related work.
We present our approach in Section 4 and evaluate it in Section 5.
Section 6 concludes this paper.
First, we describe QoS-aware service composition in the context of functionally diverse services.
Next, we discuss multi-objective optimization and describe some of the related approaches.
Services A service S provides a reusable functionality that is spec-i ed in a service description document.
These descriptions de ne the required input and provided output parameters of the service, abbreviated as S.I and S.O.
Usually, the interface descriptions are written in WSDL.
Semantic annotation languages such as SA-WSDL can be used to further specify the parameter types of the service in order to facilitate logical reasoning on the parameters.
Apart from that, service-level agreements (SLA) documents that are published by the service provider describe the QoS attributes of a service.
They include, for instance, the price, response time, and claimed reliability of the service, written as Sprice, Stime and Srel.
For a detailed clas-si cation of QoS measures, please refer to [17].
Service Compliance In order to connect a service S to a service S  , S has to provide an output parameter S.O that can be further processed by S  .
If semantic annotations are provided, a logical reasoner exploits a background type hierarchy to check whether an output o   S.O is compatible with an input i   S  .I.
In If only the WSDL documents are given, the check is done on the data-structural level by comparing names and basic types.
On the basis on the above considerations, we de ne a relation combinable as follows
 In contrast to SOO algorithms, multi-objective optimization (MOO) algorithms treat every component of Q as an objective.
Consequently, only a partial-ordering on the solutions exists and it is de ned by the dominates relation.
Definition 1 (Functional compliance).
Two services S and S   are combinable, written as S   S   i .
Definition 2 (Dominate relation).
A solution W dominates solution W  , written as W   W  , i  W :  o   S.O .
 i   S  .I .
o   i where the relation   denotes type compatibility.
To execute a service, all inputs have to be provided by other services or the user.
A work ow provides a control  ow for two or more services.
A work ow template contains service tasks instead of actual services.
A task describes an abstract functionality that can be performed by an actual service.
To associate services to a task, either the functional interface of the services is compared with the functional requirements of the task or the services are collected based on e.g.
informal descriptions.
The authors of [3] propose that providers register their services at service communities.
In this way, they indicate which functionality is to be carried out by their services.
In the end, a set of functionally related services, each having its own QoS attributes, is associated with the task.
Selection algorithms select for each task of a work ow one actual service such that the QoS of the work ow are optimized.
The set of selected services is called service selection.
Figure 1 shows an example work ow template and a possible service selection.
Task T3
 Task T1 Task T2 Task T5

 Task T4 Figure 1: Work ow template with service tasks (white circles) and a corresponding selection (dark grey circles) Services can be executed in parallel by using either an AND fork or a XOR fork.
The QoS vector Q of the work ow is computed on the basis of the types of QoS attributes and the control  ow of the work ow.
A detailed description of this aggregation can be found in [4, Table 1].
Many related approaches simplify the QoS optimization problem by treating it as a single-objective optimization problem (SOO).
For that purpose, the components of the obtained QoS vector Q are aggregated into a single value   by applying e.g.
a weighted sum.
SOO algorithms optimize   and try to meet the QoS constraints.
i=1W.Qi   W  .Qi    k .
W.Qk > W  .Qk  n In the QoS-aware service selection scenario, a selection W dominates another selection W   in two cases: either W violates fewer QoS constraints than W   or it violates as many constraints and yields better or equal results in all QoS dimensions and yields one better result than W   in one dimension.
The outcome of a MOO algorithm is a set of non-dominated solutions, also called pareto-optimal solutions: Definition 3 (Pareto optimality).
Given a solution set W. The solution set WP   W is called pareto-optimal with respect to W i :
 The algorithm cannot judge whether one solution from the pareto-set is better than another one.
Instead, the user ultimately selects a solution that best  ts his/her preferences.
If any constraint is violated, the solution is invalid.
Several possible indicators exist to compare MOO algorithms; we shall use the hypervolume HV [27].
The HV of a solution set W means the hypervolume in the objective space that is dominated by W (cf.
Fig. 2).
Figure 2: The hypervolume (grey area) of the pareto front {W1, W2, and W3}, dominating solution W4 In order to compare multiple algorithms, we merge the non-dominated fronts of all algorithms into a maximum front Wmax.
The solutions of this front are not dominated by any solution computed by the algorithms.
The HV ratio of W is then computed by:
 HV (Wmax) If optimization algorithms are used to solve the service selection problem, each task becomes a decision variable, having the index of the currently selected service as a value.
A na ve approach to compute a solution is to reduce the MOO problem to an SOO problem.
The SOO algorithm solves the modi ed problem multiple times, using various weights, with the goal of computing a huge variety of solutions.
In the following, we will discuss in brief several algorithms that are customized to the MOO problem.
For details, please refer to the original studies.
The presented algorithms yield the best results in our problem setting, as shown in Section 5.
The non-dominated sorting genetic algorithm II (NSGA-II) [5] employs a fast sorting algorithm to assign genomes to the right front.
Genomes of the  rst front are not dominated by any other genome, genomes from the second front are only dominated by genomes from the  rst front, etc.
After identifying all fronts, the algorithm tries to preserve the diversity among genomes by using a crowded comparison approach.
Zitzler and K unzli describe the indicator-based evolutionary algorithm (IBEA) in [26].
It uses a binary quality indicator to compare two potential solutions sets, providing an extension to the original dominates relation.
The  tness of an individual is computed by using the indicator to compare it with the rest of the population.
The Generalized Di erential Evolutionary [10] algorithm (GDE3) provides an MOO extension for the DE algorithm.
It uses an initial random seed and applies select, mutate, and crossover operations.
The magnitude of the mutate operation decreases as the evolution proceeds.
It also uses the notion of crowdedness in a slightly modi ed version than is used it the NSGA-II algorithm.
The particle swarm optimizer OMOPSO [18] de nes an extended notion of leader.
In SOO, a leader dominates the other particles of a PSO, in uencing their motion through the objective space.
Since multiple leaders may exist in MOO, the authors also employ the crowding factor in order to decide which leaders are kept in case too many exist.
QoS-aware Service Selection.
Since the problem of  nding the optimal service selection [25] is NP-hard, heuristic algorithms [4] have been investigated as a means of computing near-optimal solutions.
To improve the performance of service selection, some approaches attempt to prune the search space.
In [1], global QoS-constraints are split up into local constraints for each single service task.
Subsequently, the con guration with the locally best services is selected.
In [2], services that are not part of the skyline, which may also include backup services, are removed.
Moreover, their de nition of dominance [2, De nition 3] is not su cient in our setting, since services that are not part of the skyline might be part of the optimal solution, e.g.
especially in cases where only few functionally valid solutions exist.
Multi-objective Optimization in Service Selection.
Genetic algorithms have been successfully used for multi-objective optimization; see, e.g.
[19, 23].
These approaches consider several QoS attributes based on a classical QoS model as an objective function of the optimization problem.
Thus, it is not possible to use the risk pro le of the various feasible compositions.
The authors of [24] employ a multi-objective stochastic program to take probabilistic QoS values into account.
Although they consider the worst-case scenarios of QoS, they do not consider service failures.
Reliability and Replanning.
The previous approaches all rely on ad-hoc replanning when a service failure occurs, as described in for instance [12].
The authors use semantic service discovery on the service registry to compensate service failures, requiring semantic annotation to  nd suitable services.
In [14], a replanning scope is determined and extended to compensate service failures e ciently.
If no suitable service exists or if the QoS attributes of the backup services are not su cient, the execution of the work ow fails.
In contrast to such ad-hoc algorithms, our approach considers service failures beforehand, taking the individual reliability of each service into consideration.
This way, robust work ows are created in the initial planning phase.
Jaeger et al. [8] aggregate redundant services and execute them in parallel in order to optimize the response time and reliability.
For that purpose, they propose three replacement patterns.
In our study, however, we tried to avoid unnecessary service invocations in order to minimize the costs.
QoS Models.
The most common QoS model for service selection is presented in [4, 17].
Several QoS attributes are characterized and methods to aggregate the QoS are provided.
In [9], a probabilistic QoS model is provided to compute the expected case of the QoS values.
The authors apply this model for predicting the average QoS of the work ow when it is executed a number of times.
The computed QoS of both models are only valid if there are no service crashes.
A failure-aware model is presented in [11].
This model takes into account additional failure recovery times.
The authors infer the QoS by collecting past execution logs.
In our study, we incorporate the reliability of a service in the computation of the expected QoS a priori.
Functionally Diverse Services.
Regarding functionally diverse services, the matching quality of the service links is incorporated into the utility function in [13].
The authors balance the compliance with the QoS values, not evaluating whether the computed solution is executable.
In our approach we consider the functional compliance as a hard constraint, requiring selections to fully satisfy the requested inputs of all used services.
In [7] the authors investigate the gap between the conceptual and data-structural level of service composition.
They claim that even if the conceptual types of the parameters of two services are compatible, the WSDL implementation may still be incompatible.
They focus on automatic composition and do not take QoS-attributes into account.
Clustering in Service Composition.
The use of clustering prior to the selection phase is described e.g.
in [15].
The authors use a k-nearest neighbor algorithm to arrange the services in QoS clusters, without taking functional compliance into account.
The authors of the EASY project [16] arrange services in a functionality graph in order to facilitate an e cient service discovery.
They de ne service compliance in a di erent way from ours and do not consider QoS attributes.
Our approach is illustrated in Fig. 3.
First, we describe the method for clustering web services (step 4.1 in the  g-ure).
This method detects backup services for each service by arranging the services in a functionality graph.
Next, we introduce our modi ed QoS model that takes backup services into account (step 4.2).
Finally, we describe our MOO algorithm SHUURI (step 4.3) that employs this graph and the model, and show a graphical interface that helps users to select a service selection that best  ts their needs.
(4.1)




 (4.2) ([pbest, pworst], E[p]) ([tbest, tworst], E[t]) (rel)



 | {z } Task T1 (4.3) Genome:
 Figure 3: Overview of our approach.
The backup services of S12 are contained in the dotted triangle

 Initial Functionality Graph In the  rst phase, we detect services that can be easily replaced and yield a good QoS by arranging services into a directed-acyclic graph o ine.
For that purpose, we detect the services that each service can connect to by examining the connected tasks and the combinable relation.
Subsequently, all services from the same tasks are compared with each other.
Figure 4 shows an example clustering of a service task.
Task T1 Task T2 Cluster C1 (a) Service compliance (b) Clustering of T1 Figure 4: Clustering of the services of Task T1 from Fig. 1 by considering Task T2.
Service S12 can be replaced in every service composition by S11 and S13 since both can connect to S22 as well.
Each service is represented by a node in the graph.
If two services can be connected to the same services, the nodes of these services are merged.
Otherwise, if a service S can be connected to more services than a service S  , then these two services are connected with a directed edge.
Every node has an input list IL and output list OL to keep track of all services its corresponding service S can be connected to.
Moreover, each node has two additional lists SC and OL.
N.SC contains the services of N and all services of its subcluster, i.e. the backup services.
N.OL contains the services that all services from its subcluster can connect to, in other words, the union of the OL sets of the subcluster services.
The functional clustering arranges services in a graph to guide the repair process.
However, in our algorithm, cluster fragments may occur in work ow tasks and these fragments can hinder repairs.
To illustrate this idea, let us add services S14, S15, S24, and S25 to the example shown in Fig. 4.
The set of compatible of the services of Task T1 are shown in Table.
1.
Service S combinable with









 Table 1: Extended scenario of Fig. 1, leading to a scattered cluster In this scenario, the services S14 and S15 become an isolated cluster even though they belong to the same task as S11, S12, and S13 (cf.
Fig. 5a).
In order to merge such cluster fragments, we add virtual services to the repository that subsume the functionalities of the fragments (cf.
Fig. 5b).
In this way, the repair operation can traverse all services from the same task.
In the given example, let us assume that we merge N12 and N14.
We add a service NV whose IL and OL sets are the intersections of the corresponding sets in the child nodes.
We iterate this process until we have only one root node left.
The root nodes are selected with a greedy approach; i.e., the sizes of the uni ed IL and OL test sets are maximized in each node.
Therefore, each virtual service can guarantee that it can be used with a larger number of related services.
In the end, all services are in the same cluster and reachable from each other.
The clustering is performed o ine, so only the repair operation is added to the runtime of the algorithm.
After computing the  nal clusters, a set of backup services is detected for each cluster and sub-cluster root.
If service S fails during execution of the work ow, any service from the subcluster of S can be employed to replace S. In the following, we show how to determine which service is to be executed by computing an execution order for the backup services.
First, the services of each subcluster are arranged in QoS fronts.
Starting with the  rst front, the distance to the cluster root is computed for each service.
The execution order for the backup services is determined by selecting the
 Cluster C11 Cluster C12









 Task T1 Task T1 (a) Two fragmented clusters (b) Uni ed cluster C1 Figure 5: Unifying two clusters C11 and C12 to C1 by introducing a virtual service node NV services with the shortest distance to the original cluster root service.
In our example, the execution order of N12 could be: S12   S13   S11.
If a service fails, the services from the ordering are used to replace the service.
The number of backup services depends on the reliability of services.
Our experiences indicated that three backup services are su cient in most cases.
As discussed in Section 2.1.3 the QoS attributes of the work ow are computed by aggregating the QoS of the employed services.
Since in our approach a list of services is selected instead of single services, we apply a modi ed QoS model.
This model helps us to predict the expected outcome of executing a particular service selection.
For each node, the reliability is computed by taking the reliabilities of the service and the backup services into consideration: N rel = 1   Y (1   Srel) S cluster(N ) For the price and response time, three values are computed: the best-case value, worst-case value, and the value in the expected case.
The best-case refers to the one where the  rst service that was selected at the beginning can be executed successfully.
In other words, the value corresponds to the QoS value of the cluster root.
In the worst-case all services in the execution order except for the last service fail.
In that case, the prices and response times respectively are summed up for all services.
Finally, the expected case takes reliability into account.
For instance, the price of a cluster node is computed using the following formula: E[N price] = Price in case 1
 Sprice | {z } + Sprice {z

   Srel |{z} Probability of case 1  (cid:0)(1   Srel 2 (cid:1)
 } {z | Probability of case 2 + + (cid:1) } Price in case 2 +(cid:0)Sprice
 | + .
.
.
The expected value of the response time of a cluster node is computed in the same way.
We employed seven objectives in the service selection phase:   Price: (cid:0)[pbest, pworst], E[p](cid:1)   Response time: (cid:0)[tbest, tworst], E[t](cid:1)   Reliability: rel Table 2 lists the QoS of the three example services and resulting QoS of the cluster nodes.
We developed a MOO algorithm, called SHUURI, to compute approximate pareto-optimal solutions e ciently.
This algorithm is based on the NSGA-II algorithm (cf.
Sect.
2.2.1), but uses customizations and an additional repair operation that leverages background knowledge to discover valid selections.
First, an initial random population is generated.
Then, mutate, crossover, repair, and select operations are performed in each iteration.
The mutate operation uses functional clustering with a certain probability.
Instead of picking a random service for substituting S, a service from the subcluster of S is chosen.
In this way, valid links to S are preserved after performing the mutate operation.
Apart from that, SHUURI uses a uniform crossover operator.
After applying the mutate and crossover operations, an additional repair operation is applied to genomes that contain an invalid link between two services.
This operation is performed with a probability Prep.
Experiments on MOO problems show that a good balance could be had with a Prep of 33%, as was the case in previous experiments with SOO.
Given the functional clustering, the algorithm searches selectively in order to repair an invalid link instead of replacing services in a more or less random manner.
Algorithm 1 is the pseudo code of the repair operation.
Algorithm 1: Repair operation Set S := c.SC; foreach Service S .
  Service link l = (S, c) do








 end if S 6=   then Set cand :=new Set; foreach Service S     T   where  tl   tlinks .
tl = (cid:0)T  , T (c)(cid:1) do if S   S  .OL 6=   then cand := cand   S  ; end foreach Service S     c.SC do if S   S  .SC 6=   then cand := cand   S  ; end g  := g.replace(cid:0)c, selectSubstitute(cand)(cid:1);










 20 end else if c 6= Root then end end g  := g.replace(cid:0)c, c.getRandomP arent()(cid:1); First, the set S is initialized with the subcluster of an invalid cell of a genome g (line 2).
A cell is invalid if its Aggregated Cluster QoS


 Service Price Time Rel.
Node Price: (cid:0)[pbest, pworst], E[p](cid:1) Time: (cid:0)[tbest, tworst], E[t](cid:1) Rel.
(cid:0)[290, 290], 290(cid:1)ms (cid:0)[240, 710], 481(cid:1)ms (cid:0)[180, 180], 180(cid:1)ms (cid:0)[2, 2], 2(cid:1)$ (cid:0)[3, 10], 5.5(cid:1)$ (cid:0)[5, 5], 5(cid:1)$





 290ms 240ms 180ms


 Table 2: Example QoS values for the scenario of Fig. 1 selected service has an invalid link to another service.
Next, the union of the output lists OL is computed (line 4) for all ingoing links to this service.
As described above, if this intersection is not empty, the link can be repaired by replacing a service with ones found by descending the functionality graph.
We compute the list of candidates by checking whether possible preceding services (line 9) or services from the subcluster (line 12) can be employed.
Finally, a random service is selected in line 14.
If the intersection in line 6 is empty, no child service of c or its connected services can repair the invalid link.
Therefore, we ascend the graph by selecting a random parent node in line 17 and try to repair the genome in the next iteration.
Figure 6 visualizes how the repair operation traverses the functionality graph.
The links of the two incoming services SN   and SN   , represented by nodes N   and N  , are both invalid.
To judge whether the links can be repaired by descending the graph, the union N  .OL   N  .OL = {Si} is compared with the SC sets of the subclusters.
Since only N2.SC contains service Si, the original service SN is replaced by SN 2 N  .OL = {Si, Sj }

 N  .OL = {Si, Sk} .
.
.
.
.
.
N1.SC = {Sk, Sj } N2.SC = {Si, .
.
.}
NM .SC = {Sl, .
.
.}
 
 Figure 6: Selecting a subcluster to repair an invalid link between SN and its two incoming services SN   and SN  
 After the pareto-optimal set of solutions has been computed, the graphical interface is used to select a solution.
The user initially de nes his/her preferences regarding the QoS attributes (price, response time, and reliability).
Moreover, the user may provide a risk value, indicating whether he/she is risk loving, risk neutral, or risk averse, cf.
Fig. 7.
A high risk loving preference favors the best-case values of price and response time.
Otherwise, the ordering focuses on the worst-case values.
On the basis of these selections, the tools present an ordered list of solutions and a spiderweb diagram where the user may compare solutions (cf.
Fig 10).
In this way, the user may balance di erent solutions and mark solutions for later comparisons.
Figure 7: The settings dialog in which the user chooses his/her QoS and risk preferences

 We evaluated how well MOO algorithms perform in the problem setting of functionally diverse services by using our extended QoS model.
We examined the quality of the solutions found, i.e. whether the objectives were optimized and constraints were met.
Hence, this evaluation was of whether the QoS model from goal G2 also reaches goal G3.
Moreover, we were interested in whether the algorithms could achieve su cient reliability depending on the work ow length and average service compliance.
The average service compliance denotes the probability that a service can be connected to another one.
Services with low compliance exhibit high functionally diversity.
This evaluation addresses goals G1 and G3.
We have employed the jMETAL 3.1 framework [6] which provides 15 multi-objective optimization algorithms.
We compared SHUURI these other algorithms on the basis of the hypervolume indicator and reliability they achieved.
For the sake of readability, we shall only discuss the results of the top ve approaches in the following.
The services and work ows were randomly generated and each task had 20 alternative services.
The parameter types i t a r

 y t i l i b a i l e

















 o i t a r












 Work ow length (a) Varying work ow lengths






 Average service compatibility (b) Di erent service compatibilities Figure 8: Comparing the hypervolume ratio




 y t i l i b a i l e













 Average service compatibility (b) Di erent service compatibilities




 Work ow length (a) Varying work ow lengths









 Figure 9: Evaluating the reliability of the computed selection were associated with random concepts of the SSUMO ontology.
The QoS of the services were randomly generated expect for the price, which was partially random and partially anti-correlated to the other QoS parameters.
We evaluated every test case 100 times and limited the runtime of each algorithm to 5000 ms. We applied random constraints on the response time and price.
Depending on the scenario, the algorithms optimized three or seven objectives, had to meet QoS constraints, and compute a functionally valid selection.
In the  rst experiment we computed for each algorithm the ratio between the hypervolume of its computed  rst front and the hypervolume of the merged fronts of all algorithms (cf.
Section 2.2).
All algorithms used the modi ed QoS model of Section 4.2, employing the functionality graph to evaluate the expected reliability of the work ow.
Figure 8a shows the results for various work ow lengths and an average service compliance of 60%.
SHUURI achieved the best results and the di erence to the other algorithms became more apparent as the work ow length increased.
In the next experiment, we compared test sets with varying average service compliance, using a work ow of length
 di cult it became to discover valid selections.
SHUURI yielded the best results regardless of the service compliance.
In summary, SHUURI had a constant HV ratio of approx.
90%, whereas the other algorithms had a decreasing HV ratio as the problem size grew.
We concluded that the random explorations of the search space performed by the other heuristic algorithms were not su cient for computing a good approximation of the pareto-front.
Since our algorithm leveraged background knowledge e ciently, it discovered feasible solutions in a selective way, leading to a better approximation of the pareto-optimal set.
In the next experiment, we evaluated the reliability of the solutions.
Each service reliability was randomly generated in a range between 95% and 100%.
SHUURI employed the modi ed QoS model, whereas the other algorithms used the common one in which the algorithms neglect backup services and replace services ad-hoc; i.e., after computing a selection, backup services are aggregated for each service.
We compared the reliabilities of the top-ten solutions.
As in the previous experiments, we varied the work ow lengths (cf.
Fig. 9a), and the average service compliance was
 had increasingly insu cient reliability.
In the next experiment (cf.
Fig. 9b) we modi ed the service compliance, and used a work ow with a  xed length of
 bility of all algorithms decreased, but SHUURI s selections still had the highest reliability.
On the basis of these results, we concluded that SHU-URI combined with the extended QoS model signi cantly increases the reliability of the selections.
The other algorithms tend to select services having a good reliability but cannot be replaced by other services.
In cases where only few backup services exist, the algorithms compute selections that do not have su cient reliability.
SHUURI, on the other hand, is at least able to sustain a reliability of approx.
80%.
The last experiment evaluated the convergence of the two genetic algorithms, NSGA-II and SHUURI, depicted in Fig. 11.
We used the average HV ratio of the merged front of ten test runs, allowing each algorithm 200 iterations.
The work ow length of was 30, and the service compliance was 60%.
SHU-URI required a few more iterations to achieve the same HV ratio as NSGA-II but it converged to a higher value.
o i t a r












 Generations Figure 11: Convergence of NSGA-II and SHUURI

 We discussed our approach to supporting decision makers in  nding robust, QoS optimized service compositions in an open service environment.
Our approach takes functionally diverse services into account that are a consequence of such an environment.
This results in a larger number of backup services, thus increasing the robustness of the resulting work ows.
We developed a new QoS model that helps to predict the resulting QoS of a work ow by considering service failures during the initial selection phase.
For each service, we compute a set of possible backup services beforehand and evaluate the QoS of this selection.
We compared our selection algorithm, which is based on a multi-objective genetic algorithm with other state-of-the-art MOO algorithms.
The computed solution set of our algorithm contains solutions with higher quality and reliability as the problem size grows.
Finally, we presented a graphical interface that enables the decision maker to compare and choose a solution that best  ts his/her needs.
He/she provides his/her preferences and risk attitude and receives an ordered list of pareto-optimal selections.
As a next step, we plan to apply our approach in service planning [22] that computes work ow templates.
Combining both approaches we can provide a  exible and QoS optimized solution for composing work ows automatically.
Moreover, we intend to extend our approach to consider inter-service-dependent QoS attributes.
In this way, the time and performance of preceding services can be taken into consideration.
