With more than 140 million active users and over 340 million messages posted per day, Twitter has become one of the most in uential media for spreading and sharing breaking Copyright is held by the International World Wide Web Conference Committee (IW3C2).
IW3C2 reserves the right to provide a hyperlink to the author s site if the Material is used in electronic media.
news, personal updates and spontaneous ideas.
In Micro-blogging systems like Twitter, users tweet about any topics within the 140-character limit and follow others to receive their tweets.
Furthermore, with retweeting (forward a tweet), information can be e ectively relayed beyond adjacent neighbors, virtually giving every user the power to spread information broadly.
However, recent studies [2][31][37] show that the di usion power of tweets from di erent users varies signi cantly: 0.05 percent of Twitter users attract almost 50 percent of all attention within Twitter and the spread of a tweet from an ordinary user is rather limited, with an average retweet rate of 0.11.
This suggests a very limited di usion for most tweets.
Fortunately, as a new feature in Micro-blogging systems, Mention can help ordinary users to improve the visibility of their tweets and go beyond their immediate reach in social interactions.
Mention is enabled in a tweet by adding  @username .
All the users mentioned by a tweet will receive a mention noti cation (e.g.
by an email ) and are able to retrieve the tweet from their personal mention tab.
By using Mention, one can draw attention from a speci c user, or highlight a place or organization anytime.
Properly using mention can quickly help an ordinary user spreading his tweets:
 non-follower may retweet it to his followers and spread the tweet to a new group of users, which usually leads to further cascade di usion.
serves as a useful noti cation, especially when the follower follows a large number of other users and a tweet can be easily swamped in the enormous number of tweets.
It s also critical for a tweet to be viewed promptly as 25% replies to a tweet happen within 67 seconds, 75% within 17 minutes and 75% message  ow lasts less than an hour [35].
So, without proper noti cation, a tweet may easily be neglected as one s followers fail to read it in time.
Despite the signi cance of the mention feature, to the best of our knowledge, Mention Recommendation is seldom studied in previous works.
To better help an ordinary user spreading their thought in Micro-blogging systems, we propose in this paper a novel Mention Recommendation algorithm named whom-to-mention, in which we help a tweet to reach more 1331people by recommending proper users to be mentioned be fore publishing it.
The recommendation task can be formulated as a ranking problem.
Traditionally, one can rank users based on the similarity between a tweet and a user s pro le (e.g.
the aggregation of all the tweets posted by a user) and recommend the top ranked users to be mentioned.
However, there are several challenges which make the traditional recommendation methods fail: Information Di usion Based Relevance: In classic information retrieval tasks (e.g.
TREC adhoc retrieval tasks), relevance is usually interpreted as topical relevance, which stands for to what extent the topic of a result matches the topic of the query.
However, the goal of mention recommendation is to  nd candidates who can help spread a tweet.
Instead of topical relevance, the information di usion power should be considered in the relevance judgement.
Content-dependent User Relationship Model: In traditional social network recommendation, user relationship is usually modeled as a weighted graph with edges indicating the bonds between two users based on explicit social relationship.
The interactive functions (e.g.
retweet, reply, mention) in micro-blogging systems allow us to adopt the implicit network derived from user s interactive behaviors to achieve more precise user relationship predictions.
Moreover, it brings in new features for modeling user relationship, as users  interactions are usually content (topic) related, which makes the user relationship model content-dependent.
For instance, a user may selectively retweet sport news from another user while ignoring other contents such as movie comments from the same user.
Modeling the content-dependent user relationship based on the implicit network of user interactions thus remains as a challenge.
Recommendation Length Restriction: Due to the strict length restriction of a tweet, only a small number of users can be mentioned in a tweet.
Moreover, a tweet mentioning a lot of users is likely to be treated as a spam tweet, which will decrease others  interest in retweeting it.
Thus, to accomplish the mention recommendation task, the algorithm needs to be optimized for mentioning only a small number of users.
Recommendation Overload Problem: Traditional recommendation systems such as those used in Amazon may recommend one item to large numbers of users, which results in popular products.
However, in the mention recommendation system, a user being recommended too many times will su er from the severe mention overload problems.
Tons of mention noti cations will not only interrupt user s daily use of mi-croblogs, but also result in frustration and decrease user s interest in retweeting.
To cope with all the above mentioned challenges, whom-to-mention is proposed in this paper.
We use a machine learning approach to train a ranking model which consists of three parts: ranking features, relevance and a ranking function [10]: We adopt a series of new features to deliver more precise mention recommendation, including: the match of the given tweet and interest pro les of the recommended users, the user relationship between the recommended users and the author of the tweet, and the in uence of the recommended users.
Furthermore, we manage to model user relationship based on the implicit network derived from user retweet interactions, which we name as user social ties model.
We take advantage of the content-dependent feature of user social ties and make use of the content feature of the tweets one user has retweeted from another in a user social tie.
Instead of the classic topical relevance model, the relevance in whom-to-mention is rede ned as the potential d-i usion a user may bring to a tweet, estimating by the expectation user coverage, which will be further explained in section 4.2.
A Support Vector Regression (SVR) based ranking function is then trained to calculate the relevance of a candidate user to a tweet and ranks the most relevant candidates on the top of the recommendation list.
Constraints are carefully designed in the ranking process to avoid the recommendation overload problem.
It is worthwhile to highlight the following three aspects of our whom-to-mention recommendation scheme in this paper.
ture in microblogs by resolving the most essential problem of whom to mention.
Instead of passively waiting to be retweeted by others, our novel recommendation scheme allows users to improve the di usion of their tweets by reaching out to the right person with the help of mention recommendation.
ing problem and to  nd the most proper users to be mentioned, a ranking function is learned with a novel information di usion based relevance, incorporating with new features including user interest match, user social ties and user in uence.
We model user relationship based on the implicit network derived from user s retweet interactions and take fully exploit of its content-dependent features.
Whom-to-mention algorithm is proved highly e ective compared against a large number of baselines.
We analyze how di erent features a ect the recommendation performance with aborative designed comparison experiment.
New issues like recommendation length restriction and recommendation overload problem is careful evaluated and discussed.
Using information retrieval approaches to recommend documents, users or items has been a fertile area of research.
Content-based recommendation systems like [25][27], recommend items similar to those that a user liked in the past.
Though the use of information retrieval on recommendation has been studied for a long time, new studies keep emerging to solve all kinds of new challenges [33].
For instance, Diaz et al. make the  rst in-depth study of information retrieval 1332approaches applied to matchmaking systems and study u nique problems like two-sided and subjective relevance[10].
In our work, the information di usion based relevance, new features like user social ties , new challenges like the recommendation length restriction and overload problem all make our whom-to-mention di erent from previous information retrieval approaches.
Most of the prior work on social network recommendation mainly focuses on recommending interesting users or contents [11].
Hsu et al. address the problem of link recommendation in weblogs and similar social networks by proposing an approach based on collaborative recommendation using the link structure of a social network and content-based recommendation using mutual declared interests [17].
Chen et al. study people recommendations designed to help users  nd known, o ine contacts and discover new friends on social networking sites [7].
Guy et al. study personalized recommendation of social software items and make a comparison between recommendations that are based on the user s familiarity network and his similarity network[13].
None of previous works can be directly applied to whom-to-mention task and solve all the new challenges.
Learning to rank has been a popular research area.
Existing approaches can be roughly divided into three categories: pointwise approaches[21][26] in which the learning-to-rank problem can be approximated by predicting the score of a single query-document pair and various regression and ordinal regression algorithms can be adopted in this kind of approaches; pairwise approaches [4][5], in which the ranking problem is reduced to pairwise classi cation and the goal is to minimize average number of inversions in ranking; list-wise approaches [28][36], in which the value of the evaluation measures is optimized directly, averaged over all queries in the training data.
The ranking algorithm from our work belongs to the pointwise approaches.
With the launch of Twitter in 2007, microblogs become highly popular and large numbers of researches have been done.
Our research is involved with structure and user relationship analysis of microblogs, user interest modeling, recommendation, information di usion and in uential users i-denti cation on micro-blogging systems.
The characteristics of network structure and user relationship of microblogs have attracted much attention in the past few years.
Kwak et al. make the  rst quantitative study on the information di usion on Twitter by studying the topological characteristics of Twitter and provide lots of statistic details of Twitter[20].
Besides the network based on user s explicit following network of Twitter, analysis of the users  interactions in the implicit network of Twitter has been an emerging area [30][18].
Sousa et al. analyze replies of a speci c Twitter dataset and a slight tendency for people selectively choosing whom to reply based on the topic of the tweets is found [30].
Jang et al. propose an egocentric semantic social network based on user reply interactions on Twitter, but the strength of user relationship is not considered and user bonds from di erent user pairs are incomparable[18].
A lot of works have been done on user interest modeling, Michelson et al. discover users  topics of Twitter by categorizing the entities in the tweets and developing a user pro le by adopting the categorization result[23].
Hong et al. evaluate how the restricted length of the tweets can limit the potential of traditional topic models and the authors also show that training a topic model on aggregated messages can help to signi cantly enhance the experiment performance[16].
Information di usion and in uential user identi cation on Twitter have been extensively studied.
Ye et al.  rst explore the propagation patterns of general messages on Twitter and how to measure social in uence on Twitter [35].
Bakshy et al. study the attributes most relevant to the in uence of Twitter users [3].
Cha et al. make an in-depth comparison of three measures of in uence: indegree, retweets, and mentions and investigate the dynamics of user in uence across topics and time [6].
Bakshy et al.  nd that predictions of which particular user will generate large cascades are relatively unreliable and word-of-mouth di usion can only be harnessed reliably by targeting large numbers of potential in uencers [2].
Romero et al. model the global in uence of a node on the rate of di usion through the network based on a Linear In uence Model [34].
Several researches have focused on recommending who to follow or what to read on Twitter.
Hannon et al. recommend Twitter users to follow using content and collaborative  ltering approaches [15] and Chen et al. recommend interesting content from information streams on Twitter considering features including content sources, topic interest models for users, and social voting [8].
To the best of our knowledge, recommendation on whom to mention in Twitter has never been studied in previous work.
We formalize whom-to-mention into a retrieval scenario consisting of a set of users, U , each of whom maintains a user interest pro le and a user in uence pro le.
For a user u   U , a user interest pro le ru, consists of a set of descriptive attributes and tf-idf features extracted from a modi ed bag of words model used on u s recent tweets.
A user in uence pro le su is made up of attributes related to user s in uence on Twitter.
For users u, v   U , there exists a social tie tieu,v based on the retweeting interactions between u and v, which includes a scalar attribute indicating the strength of bonds between u and v and tf-idf features extracted from the tweets u retweets from v. A query q consists of tf-idf features extracted from a speci c tweet.
For each query (tweet) q from user u, we would like to rank all the other users v   U  u based on features including user interest match, user social ties and user s in uence, so that the relevant candidates occur above non-relevant candidates.
The key of whom-to-mention is to rank the candidate users given a speci c tweet and we use a machine learning approach to train a ranking model for our recommendation task, which is made up of three parts: ranking features, relevance and a ranking function[10].
Ranking features include all the attributes which may in uence the score of a candidate match.
Based on our recommendation task, relevance refers to the potential di usion a user could bring to a spe-ci c tweet.
A ranking function is a machine learning model 1333which predicts the relevance given observable ranking fea- tures.
We will discuss the details of the three parts in this section.
The match of a tweet and the candidate s interest is an intuitively important feature for whom-to-mention.
When mentioning a candidate in a tweet, a candidate interested in it is more likely to retweet it.
To calculate the match, the largest challenge is to generate the user interest model on micro-blogging systems, which di ers from traditional user interest models because users  tweets are limited to only 140 characters in length, covering a wide variety of topics, as well as often presented with shorthands and special formats such as hash tags.
Moreover, the nature of our recommendation task requires capturing more detailed aspects of interest.
For instance, a football fan may be assumed interested in sports based on topic modeling technics like LDA.
However, it is not a good interest match, if we mention the football fan in a tweet talking about a basketball match (because the tweet is also considered talking about sports, which makes a match for the tweet and the candidate).
Based on previous studies [16] , topic modeling techniques like LDA may not  t the short-length, ambiguous, noisy data feature in Twitter.
Consequently, we use a modi ed bag-of-words model to generate the user interest model.
To begin with, we aggregate a user s recent tweets.
For a candidate user u, we de ne du as the set of recent tweets for u; in this work, we will assume that du is u s 1000 most recent tweets.
We also extract the words from the hash tag topics, which we name as hu and they are important because they are usually used to identify a topic or an event.
Besides the tweets, we also consider all the attributes from the user pro le page, including user s full name, the location, a short biography and tags.
For a user u, we choose the short biography feature fu and tag feature tagu for the interest modeling.
A user interest pro le ru is then de ned as ru = {du, hu, fu, tagu} and R = {ru|u   U}.
In this way, R provides us the basis for user interest modeling.
To cope with the short noisy text , we  rst analyze around 50,000 hot short queries (popular words or phrases) based on a latest search engine query log covering a lot of new words and words in shorthand format and we denote these words as Dict.
In this way, popular phrase like  Big Bang Theory  is considered as a word in Dict.
We  lter the text in R, eliminating all the stop words, only keeping a word if it s either identi ed as a noun or a word from Dict.
The name entity recognition for tweets is conducted with the help of ICTCLAS 1 (a toolkit used for word split and name entity recognition) and the query log is provided by Sogou 2 (a leading search engine company in China).
Given a query (tweet) qu from user u, we apply the same word parsing strategy as mentioned above and represent qu and R as tf.idf-based term vectors, which are further used to estimate the user interest match.
With the help of Lucene, a proven, robust and scalable indexing and retrieval platfor-

http://ictclas.org/ http://www.sogou.com/labs/dl/w.html m, the match score between a query qu and a user interest pro le rv can thus be de ned as: iscore(qu, rv) = coord(qu, rv)   queryN orm(qu)  (tf (t   rv)   idf (t) 2   norm(t, rv)) (cid:2) t qu The tf (t   rv) correlates to the term s frequency : tf (t   rv) =   nt,rv (1) (2) where nt,rv is the frequency of term t in rv and normalization of the document length is de ned in norm(t, rv) for e ciency consideration.
idf (t) stands for the Inverse Documentary Frequency de- ned as: idf (t) = 1 + log(
 |r : t   r| ) norm(t, rv) is a normalization factor de ned as: norm(t, rv) = lengthN orm(rv)   boost(t) (3) (4) where lengthN orm is a length normalization factor which ensures short document contributes more to the score.
We also consider boost factors that terms from di erent sources own di erent weights (e.g.
a term from tagu is more important than one from du).
According to evaluation on training data, we set the boost boost(t) as: (cid:3) boost(t) =

 if t   hu, fu, tagu if t /  hu, fu, tagu (5) coord(qu, rv) is a score factor based on how many query terms are found in document rv and queryN orm(q) is a normalization factor used to make scores between queries comparable.
They are implemented using Lucene s function which details can be found here 3.
User relationship plays an important role in whom-to-mention task, an acquaintance is usually more likely to retweet compared with a total stranger.
Previous studies [20][19] mainly study explicit social connections based on the follow relationship of Twitter.
However, according to a study of Facebook [1], people only communicate with a few of their explicit declared friends.
So modeling user relationship based on some implicit networks can be better indicators of the actual social relationships between users.
In our work, user relationship model is based on implicit connections derived from users  retweet activities in micro-blogging systems, which we name as user social tie model.
Though lots of work on retweet behaviors have been done, they are usually in the information di usion perspective instead of modeling user relationships [2][3][6].
We make two assumptions in modeling user social ties.
First, user social ties can be derived from the retweet interactions between two users and frequency of interaction can be used to quantify the strength of a social tie.
Second, the social tie between two users is content-dependent.
Thus in our model, a user social tie consists of three parts: nodes
 http://lucene.apache.org/core/old_versioned_docs/ versions/3_0_0/api/core/org/apache/lucene/search/ Similarity.html
 Denotation Follower(u) (6) (7) Avg retweet(u) Avg reply(u) Avg coverage(u) Explanation The number of followers of user u, one of the most popular metrics on estimating a user s in uence.
The average number of retweets for each tweet from u.
The average number of replies for each tweet from u.
The average number of users a tweet from u can reach.
The coverage of a tweet is de ned in details in section 4.2.
including the two users of a tie, a strength score indicating how strong two users are bonded in a tie and a content vector indicating topics the user interested in retweeting.
The details are explained as follows.
For users u, v   U , we de ne tweet set rtu,v as: rtu,v = {tw|tw is a tweet u retweets from v} We de ne the social tie strength as stru,v stru,v = |rtu,v| We  lter rtu,v with the same method mentioned in section 4.1.1 and de ne user social tie between user u and v as: tieu,v = {rtu,v, stru,v} (8) It is important to notice that tieu,v (cid:4)= tiev,u.
Given a query qu from user u, we can calculate the user relationship score by multiplying the strength of the social tie with the similarity between qu and rtu,v: tscore(qu, rtu,v) = stru,v   coord(qu, rtu,v)   queryN orm(qu)   (tf (t   rtu,v)   idf (t) 2   norm(t, rtu,v)) (cid:2) t qu (9) All the factors in formula (9) are de ned the same as in formula (1).
Intuitvely, user in uence is also important to the performance of our recommendation task.
If two users are both likely to retweet the tweet, the more in uential one could help it reach more people by initiating a larger cascade of retweet.
Given a user u, we summarize a series of statistical indicators which may indicate his in uence in Tabel 1.
We can de ne u s in uence pro le su as: su = {Follower(u),Avg retweet(u), Avg reply(u), Avg coverage(u)} (10)
 In traditional text retrieval tasks (e.g.
search engine retrieval tasks), relevance always refers to the topical match between the query and the document[10].
When interpreted in this way, we can always rely on editors to manually assess the relevance based on their experience and expertise.
However, when it comes to our recommendation task, editors have to compare a query (tweet) with user pro les made up of thousands of tweets and analyze hundreds of content-based user relationship bonds, which makes the process time-consuming and result inaccurate.
Instead, we can calculate the relevance based on user behavioral information.
Our recommendation scheme aims to spread a tweet to more people by mentioning proper users in it.
So we can de ne the relevance between a query (tweet) and a user as the di usion the user brings to it.
Intuitively, the di usion can be easily estimated by how many retweets a user initiates by retweeting the tweet.
However, for ordinary users, the retweet cascades of their tweets are usually very small.
For instance, given a tweet, if one user can results in 3 retweets each by a user with 100 followers and another user brings it 2 retweets each by a user with 1000 followers, the latter user obviously helps it to reach more people (2000 vs. 300).
Thus, it s more accurate to estimate the relevance based on the number of users a candidate helps the tweet to reach, which we name as coverage.
We denote the relevance of query q and user v as rel(q, v) and de ne it as: (cid:2) u   the retweet cascades initiate by v} (11) rel(q, v) = { Follower(u)|
 Many machine learning models can be used as a ranking function for our whom-to-mention recommendation task.
We adopt a machine learned ranking function based on support vector regression (SVR) , because it is a sophisticated proven regression algorithm which is adaptive to complex systems, robust in dealing with corrupted data and with a good generalization ability [32].
Given a query qu from user u and a candidate match v, we use SVR to compute a score to serve as the relevance rel(qu, v).
We de ne xqu,v as the feature vector corresponding to the pair (qu, v).
xqu,v = {iscore(qu, rv), tscore(qu, rtv), sv} (12) The set of training data is as {(x1, y1), ..., (xn, yn)}, where xi   Rm stands for the feature vector for a pair of query and candidate in which m is the number of feature dimensions, and yi   R stands for the corresponding relevance value.
A generic SVR estimating function is with the form as: f (x) = (w    (x)) + b (13) w   Rm,b   R and   stands for a nonlinear transformation from Rm to high-dimensional space.
The core goal of SVR is to learn the value of w and b to minimize risk of regression.
L(f (xi)   yi) + ||w||2 i=0 Risk(f ) = C (14) L( ) is a loss function and C is a constant used to determine penalties to estimation errors which is determined with grids search and cross-validation techniques.
We experiment the performance of di erent kernel functions and choose kernel function with best performance (RBF kernel).
Details of SVR can be found in [29].
One new issue of our whom-to-mention task is that the recommendation may concentrate on a few popular users, which causes mention overload (users get too many mention noti cations from the recommendation system).
Moreover, di erent users may respond di erently to the overload.
For n(cid:2) 1335instance, some users may not want to receive any mention noti cation from the recommender at all, while some others may feel okay even if mentioned 100 times in a day.
In our recommendation framework, we carefully cope with this problem by allowing users to freely set an up-limit of recommended times per day.
After ranking phase, all the candidates with recommended times up-limit reached are eliminated and the top k of the remaining candidates are then recommended.
In real application, within a day, our recommendation scheme follows a  rst publish,  rst to choose policy and recommend the next best candidate once a user s recommendation up-limit is reached.
In our evaluation, since our test tweets are published over a period of time, we set the up-limit for mentioning at 25, which as a matter of fact, is a quite strict constraint.
We design the experiment with 4 goals:(1) To evaluate how our proposed algorithm performs compared with other baseline algorithms;(2)To test how di erent features we considered a ect the recommendation performance;(3) To examine how di erent ranking functions a ect the result-s;(4) To consider how new challenges like the recommendation length restriction and recommendation overload a ect the performance of our algorithm.
The key challenge of the experiment design lies in evaluating the information di usion (coverage of users) resulted by mentioning a user in a tweet.
Instead, we make an approximate estimation using the user s retweet behavior.
For example, if user A retweets a tweet t and helps t reach 500 people, it s reasonable to assume that A will retweet it if we mention A in t. So in our evaluation, by mentioning A in t, the user coverage A brings to t is 500.
If user B has never retweeted t, we assume B will not retweet t when mentioning him in t and the user coverage B brings to t thus is considered to be 0.
We collected data from Sina Weibo, a Twitter-like micro-blogging system in China with more than 400 million registered users and over 100 million messages posted per day.
Di erent from Twitter s API, which is restricted in retrieving mention and retweet timelines, Weibo s API allows us to get all the tweets from a user s di erent timelines.
Moreover, we obtained authorizations from over 5000 real Weibo users, who grant us full access to all the authentication-protected user data, including user pro les, tweets, the retweet time-line, the reply and mention timeline, and accurate reply and retweet number for each tweet.
We parse 48,000 tweets published by the authorized users, only keeping tweets being retweeted more than 5 times, which leaves us 132,796 retweet records and 7800 tweets to serve as the training and testing tweets.
Based on the retweet records, 52,468 users participate in retweeting and are considered as our recommendation candidates.
We collect the most recent 1000 tweets from these users (around 46 million in total) and record their personal information including the full name, the location, user biography etc.
Average retweet rate and relpy rate for each user are calculated based on the most recent 200 tweets (around 11 million in total).
97,164 user social ties are established based on retweet interactions.
In our experiment, we split the parsed tweets into training and testing data set with an 80/20 proportion and cross-validation is used.
We evaluate the results using both standard information retrieval metrics[14][9] and metrics featuring on measuring information propogation[35].
In particular, we use the following metrics: precision (P ), average precision at K (AP @K), retweet times (RT ), user coverage (Cov) and normalized user coverage (Cov N ), which are de ned as,
 Nhit m (cid:4)K i=1(P (i)) Nhit
 |t| |t   Tt,u} (cid:2)
 (cid:2) (cid:2) u R f ollower(v)|v   Ut,u} (cid:2) (cid:2) Cov = { u R Cov N = {arctan( (f ollower(v)))|v   Ut,u} u R (15) (16) (17) (18) (19) where m is the size of the recommendation list, Nhit is the number of users in the recommendation list belonging to the top m relevant matches and P (k) means the precision at cut-o  k in the recommendation list.
For a user u, a tweet t and the recommendation list R, we de ne Tt,u as all the retweets from the retweet cascades initiated by u retweeting t and Ut,u as all the users from the retweet cascades initiated by u retweeting t.
Retweet times stands for the number of hops in a tweet propagation and each hop increases the chance for the tweet to reach more users.
User coverage is a more intuitional metric which is the cumulative number of users that a tweet has reached due to the mention recommendation.
In the normalized user coverage, we normalize the coverage with an arctan() function, to make the coverage number from di erent algorithms more comparable.
Due to the length restriction, only a limited number of users can be mentioned in a tweet and thus we set the length of recommendation list as 5 in our evaluations.
We also test how the algorithm performs when we only recommend 1 4 users to mention.
To the best of our knowledge, no previous studies have been done on the whom-to-mention task.
Though the task is with lots of new challenges, we try our best to adapt several classic recommendation algorithms to this new problem to serve as baseline comparison algorithms.
  Content-based Recommendation (CR).
A content based recommendation algorithm similar to [12] is carefully designed.
User pro le are based on the content of tweets and attributes from user pro le page.
A spe-ci c tweet is considered as an item, illustrated by its content.
Both the user pro le and item are modeled as tf.idf-based vectors and we recommend users by ranking the cosine similarity scores of user pro le and item.
dation (CCFR).
For our task, recommendation is conducted before a tweet is published and there thus exist no user interaction behaviors like retweet and reply to serve as ratings, so the recommender is always in a cold start state.
We choose Content-boosted Collaborative Filtering Recommendation[22] which copes with the cold start problem of traditional Collaborative Filtering.
A tweet is viewed as an item and a candidate is regarded as a user.
When a new item (tweet) needs recommendation, we  nd 5 most similar items from training data based on content similarity and recommend users by combining the recommendation results from the similar items.
  Bonds-based Recommendation (BR).
In BR, we recommend candidates to a tweet based on the social bonds between candidates and the tweet author, which means the closer a candidate is linked to the author, the more likely he will be recommended.
The social bond is modeled based on users  retweet interactions.
  In uence-based Recommendation (INFR).
In INFR, we recommend candidates based on their in uence, which is a linear combination of in uence features mentioned in section 4.1.3.
We try to recommend the most in uential users to mention given a tweet.
  Random Recommendation (RR).
In RR, 5 users are randomly chosen from the candidates to generate the recommendation list.
  Whom-to-mention with di erent Ranking function.
To evaluate how di erent ranking functions a ect the recommendation result, we compare the performance of WTM by using three di erent ranking algorithms as the ranking function, including using Support Vector Regression (WTMSV R), using Linear Regression (WTMLR) and using Gradient Boosted Decision Trees
   Twitter and Weibo.
Based on statistics from previous studies[2] [37], we get the average retweet rate and coverage of a tweet in Twitter.
With the help of the data we collect for user in uence modeling (11 million tweets from Weibo), we calculate the average retweet rate and coverage for a tweet from Weibo.
These numbers show the general average di usion of a tweet in a Micro-blogging system.
As shown in table 2 and  gure 1, our whom-to-mention approach (WTM) signi cantly improves the di usion of a tweet in all the metrics.
We draw the following conclusions from these results.
First, Random Recommendation (RR) barely shows any e ect, which makes it clear that simply mentioning some users has little e ect in improving the di usion of a tweet.
Second, the poor performance of In uence-based Recommendation (INFR) is because in uential users may be neither interested in the tweet, nor share any social ties with
























 Precision
 Retweet Times Normalized Coverage Figure 1: Performance Comparison of WTM and Baseline Algorithms the author.
Moreover, mention noti cations may be easily neglected by the in uential users since they usually receive thousands of mention noti cations per day.
Third, Content-based Recommendation (CR), although e ective, is not as good as those based on user relationships like BR and C-CFR; this is partly attributed to the noise and ambiguity existing in the tweet-based user pro les and item pro les.
Fourth, the performance of Bonds-based Recommendation (BR) shows users who share strong social ties with the author are more likely to help him retweet the tweet and it is in accordance with our daily experience.
Furthermore, Content-boosted Collaborative Filtering Recommendation (CCFR) shows the best performance in all of our comparison algorithms, owing to both its adoption of sophisticated CF recommendation scheme based on the implicit retweeting interaction network and the incorporation of content-based features during the recommendation.
Finally, our SVR based whom-to-mention recommendation (WTM) outperforms all the comparison algorithms.
Even comparing with CCFR, it shows 70% increase in precision, a 94% increase in AP @5, an 72% increase in retweet rate and a 51% increase in normalized coverage of users.
Our algorithm bene ts from the exploitation of all the new features, a careful design of relevance model and a ranking function based on machine learning techniques.
Moreover, our algorithms results in a 2821% and 389% increase of retweet rate and a 338% and 523% increase of coverage compared with an ordinary tweet from Twitter and Sina Weibo,
 Precision
 Retweet Times Normalized Coverage

























 Twitter Weibo





 ----

--Table 3: Comparison on How Di erent Features A ect the Performance of WTM
 NO Interest No In uence No Ties No ContentInTie Twitter Weibo Precision
 Retweet Times Coverage



















 ----



which further con rms the e ectiveness of our algorithm on boosting the di usion of a tweet.
To analyze how features used in our proposed algorithm contribute to the learned model, we design this contrast experiment by eliminating one feature at a time and observe how the performance of our model changes.
Furthermore, since we assume user social ties in micro-blogging systems are content-dependent, we design a contrast algorithm by eliminating all the content information from our user social ties, leaving only the number of interaction times to indicate the strength of social ties.
All the results are listed in Table
 We note that when eliminating user interest match score (No Interest), AP @5 su ers from a 2.0% decline and the coverage of users su ers from a 2.0% decline.
Similar to user interest, the coverage of users decreases 3.4% after excluding user in uence features (No In uence) from our model.
When we eliminate the user social ties feature (No Ties), the model su ers a 60% decline of AP @5 and a 41% decline of coverage.
This result is in accordance with the results in section 6.1, which shows although user interest match and user in uence help to improve the recommendation result, content-dependent user social ties play a much more significant role in the recommendation.
It s worth noting that AP@5 exhibits the best performance after eliminating the in uence features, indicating that not all in uential users are interested in the tweet and many pay little attention to mentions since they may receive hundreds, or even thousands per day.
However, the in uence features do help to expand the retweet rate and user coverage because the in uence brought by in uential users outweighs the precision loss.
Furthermore, after removing all the content feature from the social ties (No ContentInTie), a 14% decline in AP @5 and a 13% decline in coverage prove that content feature in social ties plays an important part in the recommendation and user social ties are content-dependent.
Various machine learning models can be used as ranking functions for our task and we explore three most commonly used ones.
The result is listed in Table 4.
We can see that our SVR based model(WTMSV R) outperforms the linear regression (WTMLR) and GBDT (WTMGBDT ) based models Table 4: WTM with Di erent Ranking Functions
 Precision
 Retweet Times Normalized Coverage











 Table 5: WTM and CCFR with 1 or 3 Users Recommended Precision AP@k (k=1 or 3) Retweet Times Normalized Coverage























 WTM_Precision WTM_Normalize_Coverage CCFR_Precision CCFR_Normalize_Coverage


 The Number of Recommended Users
 Figure 2: Results with Limited Recommended Users and we attribute it to the kernel function feature used in SVR which helps us to map the data from the input space into a higher dimensional space.
The tweet-length limitation makes it hard to mention many users at the same time and moreover, mention too many users may results in the tweet looking suspicious as a spam tweet.
We choose to recommend 5 users in our evaluation 1338i s e m
 d e n o i t n e














 Figure 3: Recommendation Density Comparison Between WTM and CCFR (200 most recommended users) because we believe 5 is the up-limit of mentioning users in one tweet and in practice use, a user can choose a subset of the 5 users to mention.
We also test the performance of our algorithm when only mention 1 4 users in a tweet and compares it with our best comparison algorithm CCFR, which are shown in table 5 and  gure 2.
Our algorithm outperforms CCFR based on all metrics.
For instance, when only mentioning one user, our algorithm shows a more than 200% remarkable improvement on all the metrics.
Furthermore, compared with CCFR, the performance decline rate of our algorithm is much less than CCFR s when reducing the number of recommended users.
For instance based on normalized coverage user metric, the average decline rate of our WTM is 31%, while the average decline rate of CCFR is 51%, which con rms our WTM performs much better when only a few users are recommended.
The precision drops slightly when recommending fewer users, showing that expanding the retweet is a quite di cult task and recommending only few users will incur higher miss rate, leading to the slight precision drop.
If everyone uses the whom-to-mention system, recommendation overload may occur and a popular user may receive tons of mention noti cation from the recommendation system which will result in a severe interruption.
We show how many times a user is recommended in our evaluation in a descending order in  gure 3.
From the  gure the recommendation distribution of WTM is more smooth compared with our best comparison algorithm CCFR.
It is also worth noting that in CCFR, there exist users recommended hundreds of times which may lead to potential mention overload while our algorithm avoids the overload problem by setting the constraints based on user s free will.
fect recommendation match in real world may be regarded as a miss in the evaluation as a result of lack of retweet log given the tweet.
However, by comparing our algorithm with a set of carefully designed comparison algorithms, we believe our algorithm performs well based on the remarkable improvement on all metrics.
On the other hand, attracting others to retweet is not an easy job and comparing with the average retweet rate 0.11 on twitter (0.78 on Weibo), our average 3.1 retweet rate shows a notable improvement.
Based on our comparison evaluation, it shows the content-dependent user social tie feature plays a much more important role compared with user interest match and user in u-ence.
We proposes 3 reasons for this phenomenon: First, though with careful pre-processing, the ambiguity and noise in the tweets still decrease the accuracy of user interest match.
As a matter of fact, even though both are content features derived from user s tweets to model user s interest, the content feature from user s social ties shows more e ectiveness compared with content feature from user s interest model, because the former feature is with less noise (users usually prefer to choose a well written tweet with a clear topic to retweet).
Second, though intuitively in uen-tial users can lead to a larger di usion of the tweet, they are usually mentioned by large numbers of people everyday, which makes them more easily to ignore the mention noti- cations.
Third, the content-dependent retweet social tie is a strong indication.
A user retweeting another user s tweet usually indicates a close user relationship and people who are close are more likely to retweet a tweet from each other.
Moreover, retweet shows a strong interest on the topic of the tweet, so the user will be very likely to retweet the tweet with the same topic again in the future.
We o er the  rst in-depth study on Mention Recommendation and propose a new recommendation scheme to expand the di usion of tweets by recommending proper users to mention.
We formulate this new problem as a ranking problem and use new features, new relevance and a machine learned ranking function to solve it.
We  nd that the best performance of the algorithm is achieved when all the new features, including user interest match, user social ties and user in uence, are used.
A relevance de ned by the coverage of users and an SVR based ranking function also help to improve the performance.
Based on our comparison experiment, we also  nd that user relationship based features play a more important role than the content based features.
Furthermore, we con rm that the content-dependent feature in user relationships is of high e ectiveness in our recommendation model.
Many future works can be further explored.
For instance, we use a post-processing step to solve the recommendation overload problem while constrained optimization can be tried to address this issue in the future.
It s also interesting to study on how the proportion of strangers and friends in the recommendation list a ect the tweet di usion.
The experiment results may seem a bit low, which is in accordance with our expectation.
On one hand we ascribe it to we performing an o line evaluation by using user s retweet log to estimate the possible information cascade and a per-This work was supported by the National Basic Research Program of China (973 Program) under Grant 2013CB336500, National Nature Science Foundation of China (Grant Nos:

 Zhejiang Province Key S&T Innovation Group Project (Grant No.2009R50009), Program for New Century Excellent Talents in University (NCET-09-0685).
An explorative study.
In Sixth International AAAI Conference on Weblogs and Social Media, 2012.
[19] A. Java, X.
Song, T. Finin, and B. Tseng.
Why we twitter: understanding microblogging usage and communities.
In Proceedings of the 9th WebKDD, pages 56 65, 2007.
