Online social networks allow people to connect with each other, forming a network.
In most online social networks, only positive links between people are allowed such as friendship, trust and the following relationship.
Relationships between people however may also be of a negative type, for instance enmity as opposed to friendship, and distrust as opposed to trust.
A very small number of online social networks actually do allow such negative links.
Among them Copyright is held by the International World Wide Web Conference Committee (IW3C2).
Distribution of these papers is limited to classroom use, and personal use by others.
is Slashdot, a technology news website that lets its users tag other users as friends and foes, as well as the product review site Epinions that allows users to trust and distrust each other.
In both cases, the negative link feature results in directed signed links between users that can be interpreted as approval and disapproval links, and that are used in the user interface of the two websites to decide which content is shown to users.
On Slashdot, the posts of users tagged as foes are given a lower score, and may thus be hidden.
On Epinions, the trust and distrust information is used to determine the reviews shown, using an undisclosed algorithm.
The negative links are thus used on both sites to enhance the site s content, and a negative link feature could similarly enhance he content shown on many websites.
Since many online social networks are however reluctant to implement a negative link feature, as shown by the very small number of sites featuring them, the question arises whether negative links have an added value for the network or whether their purpose can be replaced by a prediction algorithm that determines the negative social links automatically from the known, positive links.
Such an algorithm could be applied to any online social network that does not want to allow explicit negative links, and would increase the accuracy of news streams, content  lters and recommender systems embedded in these online social networking sites.
Based on these premises, this paper investigates the following research question: Can the negative links allowed in Slashdot and Epinions be inferred from the positive links only?
To answer this question, we make the following contributions:   We introduce a general methodology for how to evaluate the redundancy of additional link types in online social networks in addition to the regular positive links, under the assumption that a link type is redundant if it can be inferred by links of another type.
  We de ne and evaluate the machine learning problem of learning negative from positive links in a signed network.
This problem is related to the link prediction problem consisting of predicting future edges in an unweighted network.
  In the two social networks with negative links Slashdot and Epinions, we study to what accuracy negative links can be inferred by positive links.
  We propose a function that has high accuracy at the 727described link prediction problem, based on the obser- vation that link prediction functions can be grouped into centrality-based and proximity-based functions, depending on their behavior for the negative link prediction task using the data of Slashdot and Epinions.
The paper is structured as follows.
Section 2 describes the problem settings studied in this paper, in Section 3 we perform an initial analysis of standard link prediction functions at the task of predicting negative links.
Then, Section 4 introduces our methodology, Section 5 gives the results of our experiments using Slashdot and Epinions data, and Section 6 concludes the paper.
Social networks provide their users with a variety of functionality for connecting with other users.
Examples of these features are friends on Facebook, circles on Google Plus and followers on Twitter.
Explicitly created connections in social networks can be displayed in the user pro le and some users might want to boost their status by collecting as many visible contacts as possible.
Besides consequences for the status of these users, these explicit social connections deeply in u-ence the user experience within the social networking platform and the ability to interact with other users.
The nature of an explicit link between two users is therefore dependent on its platform-speci c implementation.
In this paper, we limit our investigation to links between users that are intended to be permanent and therefore describe a long-lasting connection.
This excludes links between users and other entities that form bipartite networks, e.g., ratings of movies, articles, comments, etc.
Ratings of persons in dating sites [8] fall in this category too, since the rating and rated users have di erent roles.
The same holds for onetime events such as elections, e.g., the elections of administrators in Wikipedia [12].
Permanent social links between two users can be divided into two types according to their functionality, that can be described as positive and negative.
It can be observed that large social networks such as Facebook and Google Plus provide positively connotated linking functionality called friend, contact, or multiple circles with user-de ned labels.
These links are the de ning concept for social networks, and they are crucial for them since they determine the visibility of user-generated content for the creator and for potential readers.
It is this functionality that makes the platform social since the user is supported in his interaction with selected other users.
In the following, we de ne links that increase the visibility of users and content or which increase the ability to interact as positive links.
Consequently, the links that decrease visibility of content or which decrease the ability to interact are called negative links.
Negative links are associated with disapproval for another user.
Labels for explicit negative links in social networks are for instance enemy, foe, distrust, ignore, hide and block.
As negative aspects of a community are rarely advertised, these negative links are much less used and known than positive links.
This might be one reason why only few social networks with negative links are publicly available for study and research.
However, two available social networks that contain positive and negative links are Slashdot and Epinions.
Table 1: The two signed social network datasets used in our evaluation.
In both networks, all edges are directed.
Dataset Vertices Edges (pos.
+ neg.)
Slashdot Zoo [9] Epinions trust [17]



 Slashdot1 is a technology news platform where users can post and read other users  news articles and comments [9].
On Slashdot, users can create two types of explicit and directed social links between themselves and other users.
These are labeled friend and foe.
Both link types allow the user to change the visibility of the content the linked user has created.
Although the e ect of a link is not predetermined but user con gurable the convention is that the friend link increases the content visibility, the foe link decreases content visibility of the target user.
Therefore the friend link is a positive link, while the foe link is a negative link.
The friend and foe link types are also called fan and freak from the point of view of the targeted user.
The signed social network of Slashdot is called the Slashdot Zoo on Slashdot itself, and can be considered an extension to Slashdot s sophisticated moderation system [10].
Epinions2 is a site that collects community-created product reviews [17].
Two types of links can be created by one user to a target user.
One link is labeled trust the other link is labeled block (or formerly, distrust).
These links in u-ence the visibility of product reviews that are authored by the target user.
The user who has created the trust link sees the reviews of the trusted user at a higher position in the list of all relevant reviews.
Therefore this link is considered to be a positive link.
Reviews by users that are blocked are not presented to the user, making it a negative link.
The positive and negative links on Epinions are also used to predict a global trust score for individual users.
Table 1 summarizes the two datasets.
Both datasets are available on the authors  website34.
Both networks have both positive and negative links between users, forming a directed, asymmetric signed network.
Although the functionality that lies behind the link types is not fully identical between Slashdot and Epinions, it is very similar according to our de nition of positive and negative links.
Based on this similar functionality we assume similar properties of the two networks, and will use both datasets for experiments in the rest of the paper.
A major model of network analysis is preferential attachment, i.e., the rule that new edges are more likely to be attached to nodes with high degree [2].
Another important model is that of a high clustering coe cient, i.e., the rule that typical networks contain a much higher number of triangles than predicted by a random graph model, and thus edges tend to connect nodes that have a high number of common neighbors [20].
A high clustering coe cient is one 1slashdot.org 2epinions.com 3konect.uni-koblenz.de/networks/slashdot-zoo 4konect.uni-koblenz.de/networks/epinions 728component of the small-world network model, and can be generalized to signed graphs to give balance theory, stating that triangles are likely to be balanced, i.e., to contain an even number of negative edges [4].
The preferential attachment model can be used to derive link prediction functions based on centrality measures, such as the degree of nodes and PageRank, whereas the clustering model leads to link prediction functions that compare the immediate proximity of two nodes, such as the number of common neighbors and the cosine similarity.
In the case where negative edges are allowed in a network, the problem of predicting the sign of new edges, given the known positive and negative edges is called the link sign prediction problem, and has been extensively studied [9, 13, 14].
In the link sign prediction problem, the known network contains both positive and negative edges, and thus sign information can be used for prediction.
For instance, the multiplication rule the enemy of my enemy is my friend can be used [9], a comparison of the number of adjacent edges of any positive/negative pattern [13], or a di usion process [3].
These types of methods can however not be applied in the problem studied in this paper, since in our case only positive edges are known.
A related problem is that of predicting the sign of new links, given both positive and negative links in a network [21].
In addition to the network itself, the method described in that work uses interaction information to achieve its prediction, as well as a small sample of signed edges.
Thus, the method cannot be applied to our scenario, since we assume no negative links are possible in the network.
Let G = (V, E, w) be a social network (Slashdot or Epin-ions) with V the set of users, E the set of directed links between users, and w : E    1 the edge sign function, with w((i, j)) = +1 denoting that user i approves of user j and w((i, j)) =  1 denoting that user i disapproves of user j.
The fact that two nodes i, j   V are connected (in either direction) will be denoted by i   j, and the fact that i and j are connected by a directed edge (i, j) by i   j.
The degree of vertex i   V , i.e., the number of vertices connected to i (in either direction) will be written as d(i).
The outdegree of node i, i.e., the number of nodes pointed to by i is denoted as dO(i).
At the task of ordinary link prediction, in which future positive links must be predicted from current positive links, both centrality and proximity measures are used.
A link prediction function is de ned to take as input a node pair (i, j), and returns a numerical score indicating how likely a new edge is to appear between i and j.
The returned scores need not be probabilities, and are higher when the probability of edge formation is higher.
Examples of link prediction functions are the PageRank product and the cosine similarity.
PageRank [19] is a centrality measure in a directed network de ned as the solution PR(i), i   V of PR(i) = 1     n +  Xj i PR(j) dO(j) where   is a parameter set to 0.85 [11].
The PageRank values are all positive by construction.
The PageRank product link prediction function is then de ned as the product of the two nodes  PageRanks.
fPR(i, j) = PR(i)PR(j) (1) The cosine similarity is de ned as the cosine between the




 s o c f
  7  6




 s o c f
  8  7 Positive edges (P ) b Negative edges (N) Non edges (O)  3  2  1  5  4 (f
 log )
 (a) Slashdot Positive edges (P ) b Negative edges (N) Non edges (O)  3  2  1  6  5 log  4 )
 (b) Epinions (f
 Figure 1: Scatter plots of the cosine similarity and the PageRank product with points colored according to their inclusion in the set of unknown positive edges Pb, the set of unknown negative edges N and the set of non-edges O.
The plots are best viewed in color.
two adjacency vectors of i and j, where the adjacency vector of a vertex is the 0/1 vertex-vector indicating to which vertices a given vertex is connected.
The cosine similarity can be expressed in the following manner: fcos(i, j) = |{k | i   k   k   j}| pd(i)d(j) (2) Let P be the set of positive edges and N the set of negative edges, i.e., E = P   N .
To perform an initial analysis of the datasets, we split5 the set of positive edges P randomly into two sets Pa and Pb such that |Pa| = 3|Pb|.
We then consider Pa the set of known edges (all positive), Pb the set of unknown positive edges, N the set of negative edges to predict, and  nally a randomly sampled set O of node pairs not in E with size |O| = |Pb|.
We can now compute the PageRank product and the cosine similarity for all node pairs in the sets N , Pb and O, based on the known edges Pa.
Figure 1 shows the scatter plot of the nodes pairs of the three unknown sets plotted in function of their PageRank product and cosine similarity values.
Two observations can be made:
 diction literature, the standard size of the test set is 25% of the total set of edges.
similarity of zero, and a small value of the PageRank product.
is randomly generated to be the false test set, denoted by Efalse, consisting of links not belonging to any of Etraining or Etrue.
We formalize a link prediction problem P as   Node pairs in the positive edge set Pb have high cosine similarity and high PageRank product values (compared to non-edges).
  Node pairs in the negative edge set N have low but mostly nonzero cosine similarity values and high Page-Rank product values (compared to non-edges).
These observations are true for both the Slashdot and Epin-ions datasets.
We can conclude that negative edges can be identi ed from the cosine similarity and PageRank product in the following way:   Negative edges connect nodes with high PageRank product values.
  Negative edges connect nodes with low but nonzero cosine similarity values.
Thus, we expect a combination of a positively weighted centrality measure with a negated proximity measure to solve our problem of predicting negative links, giving a combined prediction measure that takes into account both preferential attachment and balance theory.
In this section, we describe our method for testing whether the negative links of a signed social network can be predicted from its positive links.
This is a variant of the link prediction problem in which two link types exist.
We will review the link prediction problem itself, give suitable link prediction functions adapted to the problem at hand, and will describe two experiments, one for measuring the achievable accuracy of the prediction problem, and one for computing an upper bound on that accuracy.
As de ned in the previous section, the set of edges E can be divided into the set of positive edges P and the set of negative edges N .
The problem can then be rephrased as the problem of evaluating whether the negative links N can be predicted from the positive links P .
The general methodology we introduce for this kind of problem consists in predicting links of one type using only links of another type in the network.
This problem extends the ordinary link prediction problem in which only a single link type is present.
Given the set of links Ea present at a particular time, how can the new links in the set Eb that emerge later be predicted accurately?
This problem is called the link prediction problem [15].
Typically, the link prediction problem is solved by link prediction functions, i.e., functions that map node pairs to numerical scores, based on the known edges in the set Ea.
Examples of link prediction functions are the number of common neighbors and the product of node degrees.
To compare the prediction accuracy of multiple link prediction functions, the set of links in a network is split into two sets: the links in the training set Etraining that are assumed to be known, and the links in the true test set Etrue set that must be predicted.
Additionally, a set of node pairs P : Etraining   Etrue | Efalse, (3) which denotes that links from the training set Etraining are used to distinguish links from the true test set Etrue against those from the false test set Efalse.
This notation is novel; we choose to use it due to the variety of the encountered link prediction problems in our problem setting.
Using this notation, we are able to formulate the general link prediction problem of using edges of a given type X to predict edges of another type Y:
 where O is a randomly sampled set of node pairs disjoint from EX and EY of the same size as EY.
If X and Y are two link types supported by a social networking site, this problem can be used to predict whether the link type Y is necessary, or whether it can be predicted from the edges of type X.
To solve a link prediction problem, one uses link prediction functions.
A link prediction function is a function f : V   V   R that, when applied to the training set, gives edges in the true test set higher values than edges in the false test set.
The result of a link prediction function will be called the link prediction score.
Multiple link prediction functions can then be compared to  nd a function that solves the link prediction problem to a satisfying accuracy, for instance using the area under the curve as described later.
Link prediction functions can be divided into proximity-based and centrality-based functions, based on whether they include only vertex-based features of vertex-pair-based features.
In the following, we list the link prediction functions used in our experiments, which correspond to the most common general link prediction functions used in the literature, and can be found for instance in [15] and [16].
The two nodes for which a link prediction score is to be computed will be called i and j.
These link prediction functions are based on comparing the neighboring nodes of i and j.
In addition to the cosine similarity de ned in Equation (2), we use the following proximity-based link prediction functions.
The number of paths of length two between i and j is de ned as fP2(i, j) = |{k | i   k   k   j}|, (4) which equals the number of nodes that are adjacent to both i and j, i.e., the number of common neighbors.
Analogously, the number of paths of length three between i and j is de ned as fP3(i, j) = |{(k, l) | i   k   k   l   l   j}|, (5) where the sequence (i, k, l, j) forms a path of length three from node i to node j.
neighbors divided by the number of neighbors of either vertex [15]: fJac(i, j) = |{k | k   i   k   j}| |{k | k   i   k   j}| (6) The measure of Adamic and Adar counts the numbers of common neighbors, weighted by the inverse logarithm of each neighbor k s degree [1]: fAA(i, j) = Xk i k j
 log(d(k)) (7) The  nal two common proximity-based link prediction methods are graph kernels.
They can be either de ned as functions of the adjacency matrix A of the network, or as sums over all paths from i to j.
The symmetric adjacency matrix A of the graph G = (V, E) is de ned as the |V |   |V |
 otherwise.
Both graph kernels have a parameter  , which we set to the value 0.85/kAk2, i.e., slightly less than the inverted spectral norm of the adjacency matrix.
The exponential graph kernel is de ned as the exponential function of the adjacency matrix [7] fEXP(i, j) = he Aiij = Xp P (i,j)  |p| |p|!
.
(8) The Neumann graph kernel is de ned using matrix inversion [6] fNEU(i, j) = (cid:2)(I    A) 1(cid:3)ij = Xp P (i,j)  |p|.
(9) These expressions make use of the notation P (i, j) for the (generally in nite) set of all paths in the network from node i to node j, and of the notation |p| for the length of a path p   P (i, j).
Centrality-based link prediction functions are de ned as products of centrality measures of the two vertices i and j; di erent choices of centrality measures lead to di erent link prediction functions.
In addition to the PageRank product de ned in Equation (1), we use the preferential attachment value.
The preferential attachment model states that the likelihood of a new node i to connect to node j is proportional to the degree of node j [2].
Thus, the preferential attachment score is de ned as fPA(i, j) = d(i)d(j).
(10)
 To measure the accuracy of a link prediction function, we use the area under the curve (AUC), de ned as the area under the receiver operating characteristic (ROC) curve.
The ROC curve re ects the accuracy of a link prediction function and is constructed as follows.
Let f be a link prediction function.
All node pairs in the combined true and false test set Etrue  Efalse as de ned in Equation 3 are sorted by their value of f .
Starting from the best-ranked position, for every position in the ranking the false positive rate is plotted against the true positive rate.
The true positive rate equals the number of observed node pairs from the true test set divided by the overall number of node pairs in the true test set.
Analogously, the false positive rate is computed as the number of observed node pairs of the false test set divided by the overall number of node pairs in the false test set.
The ROC curve is always contained in the square [0, 1]   [0, 1].
The AUC is then de ned as the area under the ROC curve, and is thus a value in the interval [0, 1].
For a random predictor, the ROC curve approximates the diagonal connecting the points (0, 0) and (1, 1), giving an AUC value of 0.5, whereas a perfect predictor would yield an AUC value of one.
When a link prediction function f is inverted to give  f , its AUC value x is replaced by 1   x. and its new ROC curve is obtained by rotating the ROC curve of f by 180 degrees.
Alternative measures of accuracy, which we do not use in this paper, are the mean average precision [18] and the normalized discounted cumulative gain [5].
We choose the AUC in this paper since it is robust with respect to changes in the size of the split.
In the following, we describe two experiments to measure how well the negative links can be predicted from the positive links in a signed social network.
The purpose of the  rst experiment is to  nd good link prediction functions at that task, and to compute their accuracy.
The second experiment consists in comparing this link prediction problem to the task of predicting negative links in networks where both positive and negative links are known.
Since this task includes more information in the training set (i.e., negative links), the achieved accuracy of that problem is higher and gives an upper bound on the accuracy that can realistically be attained at the problem of predicting negative links when only positive links are known.
The goal of this experiment is to measure the accuracy of link prediction functions at the task of predicting negative links in social networks containing only positive links, and to observe which particular functions are well suited for that task.
In our scenario, we want to predict negative links from known positive links.
Since we want to compare the scores of link predictions functions applied to node pairs connected by a negative link with the scores of node pairs that are unconnected or connected by a positive link, we split the set of positive edges P randomly into two sets Pa and Pb.
We use the sizes |Pa| = 3|Pb|, corresponding to a test set containing 75% of all edges.
The training set is thus Pa and the true test set is N .
The false test set can be chosen in three di erent ways to emphasize di erent features of the tested link prediction functions:   (Pb) Other known positive links in the false test set force a good distinction capability between negative and positive links.
  (O) Only including non-edges in the false test set will emphasize the ability of a link prediction function to distinguish negative edges from non-edges.
  (Pb   O) Using both positive and non-edges in the false test set evaluates a link prediction function at the task of distinguishing negative edges from both positive edges and non-edges.
lems: Pa   N | Pb Pa   N | O Pa   N | PbO (11) (12) (13) Although it may seem su cient to use the third, combined false test set, our experiments will show that the relative accuracy of individual link prediction functions at the three problems may be radically di erent, and thus it is a requirement that a good link prediction method is good at all three problems.
To assess whether the accuracy of link prediction achieved in Experiment 1 can be considered accurate enough to recommend against the introduction of explicit negative links in online social networks, we compare the results with the results of the related link prediction problem in which negative links are known.
This related link prediction function gives an upper bound for the accuracy attainable using the previous methods, and the di erence in accuracy between both problems will thus characterize the added value that the negative link feature brings to a social networking platform.
We will assume that a part of the negative links in the social network are already known, and include them in the training set.
We thus compare the two following link prediction problems: Pa   Nb | PbO Pa, Na   Nb | PbO (14) (15) The set of negative edges N is thus split into the two sets N = Na  Nb.
The split of N is made in the same proportion as the split of P , i.e., |Na| = 3|Nb|.
The  rst link prediction problem is the same as link prediction problem (11) in Experiment 1 up to the necessary replacement of N by Nb; the second one includes additional negative edges Na in the training set.
Note that any link prediction function that has a high accuracy in the  rst problem can be transformed into an accurate link prediction function for the second problem by simply ignoring the negative edges.
Thus, the accuracy of link prediction functions at the second problem are upper bounds for the accuracy of link prediction functions at the  rst problem.
The tightness of this bound can then be interpreted in terms of the added value of the negative edges.
If the di erence is high, negative edges contain information that is not recoverable using only the positive edges, and a negative link feature will increase the accuracy of news stream  lters and recommender systems based on the social network.
If the di erence is small, negative links do not give such an added value.
For the second problem, the link prediction methods must be modi ed to work on signed edges.
We follow the methods described in [9], which de ne the degree d(i) as not depending on edge signs, and essentially replace the number of common neighbors |{k | i   k   k   j}| with the di erence of positive and negative paths Xi k,k j w(i, k)w(k, j),
 x 10


 t n u o



 log(P2)


 x 10
 t n u o






 log(P3)




 t n u o

  10  5
 log(cos)
 (a) log(P2) (b) log(P3) (c) log(cos)
 t n u o


 x 10



 t n u o




 log(PA)

  20  15  10 log(PR)  5
 (d) log(PA) (e) log(PR) Figure 2: The distribution of feature values for a subset of  ve link prediction functions, applied to the Slashdot dataset.
We use the logarithm of the functions as features for learning an ensemble link prediction function since the logarithmic values are nearer to a normal distribution.
(a) (c) proximity-based functions, (d) (e) centrality-based functions.
which reduces to the number of common neighbors in the unsigned case.
As shown in Section 3, neither centrality-based link prediction functions such as the PageRank product, nor proximity-based functions such as the cosine similarity are expected to predict negative links from positive links well.
Instead, combinations of them are needed.
Therefore, we propose a method for combining centrality-based and proximity-based link prediction functions into an ensemble.
To combine several link prediction functions, we use logistic regression applied to the logarithms of individual prediction functions.
The reason to take the logarithm is that the values of the computed functions are all distributed in a logarithmic way, i.e., the logarithm of the values are nearer to a normal distribution than the values themselves.
Some functions such as the number of common neighbors fP2 may be zero, and thus their logarithm is not de ned; in this case we use the logarithm of the lowest possible value instead.
As illustrations, the distribution of feature values is shown for the main link prediction functions, applied to the Slashdot dataset in Figure 2.
Also, since the behavior of the PageRank product is di er-ent when the cosine similarity is exactly zero (as illustrated in Figure 1), we include as a feature the PageRank product multiplied by the indicator function of the cosine similarity being zero.
We call this feature the conditional PageRank.
Table 2 summarizes all features used in the evaluation.
We propose two ensemble link prediction functions, based on the basic link prediction functions of Table 2.
Since the basic features f1, .
.
.
, f9 correlate among each other (for instance, the Adamic Adar measure and the common neighbor count have Pearson correlation p = 99% for the Slashdot dataset), we restrict regression to the  ve best-performing individual link prediction functions.
  Logistic regression based on the  ve logarithmic features f1, .
.
.
, f5.
Feature f1 = log(P2) f2 = log(P3) f3 = log(cos) f4 = log(Jac) f5 = log(AA) f6 = log(Exp) f7 = log(Neu) f8 = log(PA) f9 = log(PR) Name Ref.
Common neighbors Paths of length three Cosine similarity Jaccard coe cient Adamic Adar Exponential kernel Neumann kernel Preferential attachment Eq.
(10) PageRank product Eq.
(4) Eq.
(5) Eq.
(2) Eq.
(6) Eq.
(7) Eq.
(8) Eq.
(9) Eq.
(1) f10 = (cid:26) log(PR) min(log(PR)) if cos = 0, otherwise.
Conditional PageRank   Table 3: The regression link prediction functions used in our evaluation.
Regression Used features fall fPR-cos f1, f2, f3, f4, f5, f6, f7, f8, f9 f3, f10   Logistic regression based on the conditional PageRank f10 and the cosine f3 = log(cos).
The two logistic regression-based functions must be trained on the training set.
Given a set of features f1, .
.
.
, fn, logistic regression  nds weights  1, .
.
.
,  n and   such that freg = [1 + exp{ (  +  1f1 + .
.
.
+  nfn)}] 1 approximates the value 1 when a node pair is in the true test set and 0 when a node pair is in the false test set.
Regression is performed using the least squares optimization function.
Table 3 shows the two regression features.
The ensemble link prediction methods are only used for Experiment 1, as using them in Experiment 2 to derive an upper bound on link prediction accuracy will skew the results, i.e., we expect that other, more complex link prediction methods may perform better for some datasets.
In this section we apply the methodology described in the previous section to the two signed social networks of Slashdot and Epinions.
We perform the two experiments (Experiment 1 and Experiment 2) described in the previous section.
We perform Experiment 1 as described in Section 4.4.
The AUC values for all link prediction functions for all three link prediction problems are shown in Figure 3.
The corresponding ROC curves for the link problem using Pb  O as the false test set are shown in Figure 4.
The weights learned for logistic regression are given in Table 4.
Observations.
A  rst observation from Figure 3 is that all individual link prediction functions f1 to f9 perform well (AUC > 0.5) at the problem Pa   N | O, while their inverses (AUC < 0.5) perform well at the task Pa   N | Pb.
Thus, none of these
 a
 a
 a
 b
 b
 
 
 b )


 ( e v r u c e h t r e d n u a e r
 )


 ( e v r u c e h t r e d n u a e r


















 all PR cos P2
 Jac AA cos Exp Neu PA PR (a) Slashdot all PR cos P2
 Jac AA cos Exp Neu PA PR (b) Epinions Figure 3: The AUC of the link prediction functions at the three link prediction problems of Experiment 1.
The two leftmost functions are ensemble functions; the other functions are the basic link prediction functions.
A suitable link prediction function at the task of predicting negative links must have an AUC larger than 0.5 for all three link prediction problem.
the respective regression type.
Dataset Regression log(P2) log(P3) log(cos) log(PA) log(PR) Slashdot Epinions fall fPR-cos fall fPR-cos  0.5411  0.4866  3.9434  6.113    
    0.8587  0.3827  5.0360  0.0105      1.5103  
  
   f10  
  





 e t a r e v i t i s o p e u r



 False positive rate (a) Slashdot




 e t a r e v i t i s o p e u r
 all PR cos

 Jac
 cos Exp Neu

 all PR cos

 Jac
 cos Exp Neu




 False positive rate (b) Epinions Figure 4: The ROC curves of all link prediction functions at the link prediction problem Pa   N | PbO for both datasets.
Well performing methods in this experiment have a ROC curve that is higher on the plot than other curves.
A high steepness of the curve at the point (0, 0) indicates a high precision for the top-k items, implying a good performance at recommendation tasks.
functions taken by itself is suited to solving our problem.
Instead, ensemble methods must be used.
Our tests show that the only set of functions that perform well (AUC > 0.5) when combined include the conditional PageRank f10, i.e., regression type fPR-cos.
Note that the regression weights in Table 4 cannot be interpreted individually.
The regression weights learned for fPR-cos for both datasets have the same signed and relative weights, and suggest the prediction function f =  (cid:18)(cid:26) log(PR) if cos = 0, min(log(PR)) otherwise.
(cid:19)     log(cos), in which the weights  ,   > 0 must be determined experimentally.
Figure 4 also shows that this method (fPR-cos) also has the steepest ROC curve at the point (0, 0), implying that this method is best at predicting the top-k unknown negative links for small k. This property is important for the application of recommender systems, in which only the top-k results are used and the rest ignored.
We perform Experiment 2 as described in Section 4.5.
In this experiment, the performance of algorithms at the problem PaNa   Nb | PbO serve as an upper bound for the performance of methods at the problem Pa   Nb | PbO.
Thus, the results of this experiment can be used to assess how much information is lost when negative links are not recorded in a social network.
The results of the experiment for both datasets are shown in Figure 5.
Observations.
The experimental results show that the best method when negative links are known performs by about 0.05 AUC points better than the best method when no negative links are known.
Thus, allowing negative links in an online social network does have an added value for the network, although that added value is small, because the di erence in AUC values from one link prediction function to the next are larger than the observed di erence of 0.05, suggesting that speci c functions adapted to any dataset may be able to close that gap.
The experimental results derived in the two experiments show that the problem of predicting negative links in a social network, using only positive links is a variant of the link prediction problem that can only be solved by combining both centrality-based and proximity-based functions, using positive weights for centrality-based functions and negative weights for proximity-based functions.
This result is congruent with the intuition that the existence of an edge (regardless of its sign) correlates positively with centrality-based



 ( e v r u c e h t r e d n u a e r
 )


 ( e v r u c e h t r e d n u a e r















 a
 a
 b
 a


 b
 b b
  P3  Jac  AA  cos  Exp  Neu

 (a) Slashdot Upper bound Maximum AUC
 a
 a
 b
 a


 b
 b b
  P3  Jac  AA  cos  Exp  Neu

 (b) Epinions Upper bound Maximum AUC

 Figure 5: Comparison of the accuracy of link prediction with and without Na in the training set.
The bars show the AUC values of the link prediction problem in which no negative edges are known.
The thick black lines represent the AUC values at the task in which some negative links are known.
For the proximity-based prediction functions, the plot shows the AUC values of the inverted prediction functions, since they have AUC values of over 0.5 and are better suited to predict negative links.
As expected, the best method when negative edges are known performs better than the best method when negative edges are not known.
The observed di er-ence, of about 0.05 AUC points, suggests that allowing negative edges gives an added value to a social network, but much less than expected, as that difference is smaller than the di erence from one link prediction function to the next.
functions, showing that models such as preferential attachment, which predict a higher probability of edge attachment for nodes with high degree centrality, is valid independently of edge sign in networks where negative links are allowed.
On the other hand, signed networks follow balance theory in that triangles in them tend to have an even number of negative edges, explaining why the proximity-based methods correlate negatively with the presence of negative edges.
We have shown that in the online social networks Slashdot and Epinions, the foe and distrust feature is used by users in a way that can be predicted to high accuracy from the friend and trust links.
Thus, with regards maximizing the utility of news stream  ltering and social recommendation, the negative link features of these two sites are redundant to a large extent.
However, it does not follow that these features are useless.
Quite the contrary is true; the foe feature of Slashdot is used as a personal organization tool (remembering who is considered a troll ), or simply to let another user know one s disapproval of them.
In Epinions, the distrust feature is likewise central to the Epinions s Web of Trust.
As a solution to the generic learning problem of predicting one link type from another one, we showed that the usual link prediction methodology can be applied, but only with the caveat that individual link prediction function may have inverted performance, e.g., the cosine similarity measure in the example of disapproval links.
Finally, as an application of our methods to online social networks that do not allow foe or distrust links, we propose that a link prediction function learned using regression with Slashdot and Epinions data may be applied.
The only way however to ascertain the accuracy of these predictions is to perform the evaluation described in this paper, which by nature of the problem is only possible when negative edges are known.
Acknowledgments We thank Paolo Massa for providing us with the Epinions dataset.
The research leading to these results has received funding from the European Community s Seventh Frame Programme under grant agreement no 257859, ROBUST.
