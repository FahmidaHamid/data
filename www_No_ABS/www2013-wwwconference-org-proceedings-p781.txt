By suggesting information (from a huge volume of information pool) that is likely to interest users, recommender systems have become a promising tool to handle information overload in many online application scenarios like e-commerce (e.g., Amazon, Net ix), social networks (e.g., Lin-kedIn, Fouthsquare) and review sites (e.g., Movielens, Epin-ions), to name a few [23].
Most recommender systems rely Copyright is held by the International World Wide Web Conference Committee (IW3C2).
IW3C2 reserves the right to provide a hyperlink to the author s site if the Material is used in electronic media.
on collaborative  ltering techniques [2, 25], which predict a user s interest in an item by mining the patterns from the past rating information of other similar users and/or items.
Although collaborative  ltering has become the standard method for the recommendation problem, traditional rec-ommender systems only use ratings of relevant users/items to make recommendations without taking into account any other information.
This trait, when information volume becomes larger and larger, poses crucial challenges such as data sparsity (i.e., insu cient similar users/items can be found), low recommendation quality (due to data sparsity, as well as homogeneity of the information source), etc.
In order to handle the issues of traditional recommendation models, recently, two trends in the community of recommender systems have attracted a lot of attention: (1) Contextual information (e.g., time, location, mood, weather, etc.)
has been recognized as an important factor that in uences the accuracy of recommendations.
For instance, Bill may prefer watching action  lms with his brothers, but would rather choose a romance  lm with his girlfriend.
In this case, the companions (brothers vs. girlfriend) is the key contextual information for movie recommendation.
Several context-aware recommender systems have been proposed [5, 22, 30] to incorporate contextual information into existing recommendation frameworks, e.g., matrix factorization models [13].
(2) The fast growth of online social networks has brought another trend of so called social1 recommendation which relies on the opinions of the target user s friends who are assumed to share similar interests [18, 19, 28].
In theory, social recommendation can help to mitigate the issues of data sparsity (i.e., a user s preference for an unrated item can be inferred from his/her friends) and recommendation quality (i.e., friends are normally have similar preference for the same items).
However, existing context-aware recommender systems either cannot e ciently combine di erent types of contextual information (e.g., the contexts with discrete values versus the ones with continuous values [11]) or su er from high computational complexity (e.g., matrix factorization model is impractical for extremely large dataset, or multiple matrix factorization operations are needed [30]).
More impor-
a type of contextual information.
However, given their dynamics and complexity, it is nontrivial to combine social relationships with other contextual information such as time, location, etc.
So in this work, we decouple social relationships from other contexts and process this type of information di erently.
781tantly, to the best of our knowledge, no social network based recommender system systematically incorporates rich, diverse types of contexts, which are essential to make personalized and accurate recommendations2.
For instance, some recent attempts only consider group-aware friendship [28, 27], or only speci c contextual information such as time or user mood when an item is rated is considered for social recommendation [16, 17].
Therefore, a more sophisticated recommendation mechanism (than the state-of-the-art approaches) that is able to systematically and e ciently combine di erent types of information (i.e., contextual information and social relationships) to further improve recommendation quality is desired.
In this paper, we propose SoCo, a novel context-aware rec-ommender system incorporating elaborately processed social network information.
The main contributions of SoCo are summarized as follows: (1) We  rst extract diverse contextual information which is expected to be associated with user preference.
Then we apply random decision trees algorithm to partition the given user-item-rating matrix (see Fig. 1(a) as an example) taking into account various contextual information (i.e., features that are associated with each node of a decision tree).
The generated sub-matrices (i.e., leaves of a decision tree) contain  similar  ratings3 which impose higher impacts on each other.
In other words, the missing ratings inferred from the sub-matrices are more accurate and personalized than those directly derived using the original rating matrix.
Note that since random decision trees induction is applied, SoCo is able to integrate diverse types of contextual information that may have di erent value domains (e.g., discrete value versus continuous value).
(2) We employ matrix factorization model [13], which is one of the most successful approaches for recommendation, to predict missing preference of a user for an item using the generated sub-matrix.
On the basis of a matrix factorization model, we introduce an additional social regularization term to improve recommendation quality considering the in uence of a user s friends.
Instead of employing all available social information, we select friends who share similar tastes with the target user by investigating their past ratings.
A context-aware Pearson Correlation Coe cient is proposed to measure user similarity.
(3) We conduct experiments on two real datasets to demonstrate SoCo s performance.
Experimental results show that, in terms of Root Mean Square Error (RMSE), SoCo improves the performance of basic matrix factorization model, social recommendation model and context-aware recommender systems by 25.4%, 12.2% and 15.7% respectively.
The rest of this paper is organized as follows: In Section 2, we provide background information about matrix factorization model and review related context-aware and social recommendation models.
In Section 3, we present SoCo, a social network aided context-aware recommender system.
Speci cally, in Section 3.1, the recommendation problem is formalized along with notation de nition.
Then
 sonalized recommendation considering both social networks and contexts.
However, the paper does not reveal any details about how di erent types of information are combined from an algorithmic perspective.
information, i.e., two ratings are similar means they are generated in the similar contexts.
random decision trees based context-aware matrix partition mechanism is described in Section 3.2, followed by an enhancement leveraging social network information in Section
 Section 4.
In Section 5 we conclude this paper and outline future research directions.
Before presenting SoCo, we  rst provide background knowledge about matrix factorization and discuss how a matrix factorization model can be applied to predict a user s preference for an item.
Then, we review related works from two areas: (1) context-aware recommender systems that integrate contextual information to improve recommendation quality, and (2) social recommender systems that rely on social network information, i.e., social recommendation.
Basically, the goal of matrix factorization is to factorize a matrix into two (or more) matrices such that by multiplying the factorized matrices, the original matrix can be reconstructed or approximated.
In the context of recommendation problem, a matrix factorization model factorizes a user-item-rating matrix R   Rm n (m is the number of users and n is the number of items) into one user-speci c matrix U   Rl m and one item-speci c matrix V   Rl n:
 (1) where l is the dimension of a latent factor vector which characterizes a user or an item.
For a user a, the elements of U (i.e., Ua) measure a s interest in items which have high values on the corresponding latent factors; for an item b, the elements of V (i.e., Vb) measure the strength of correlation between b and the corresponding latent factors.
Accordingly, the resulting U T a Vb captures the correlation between user a and item b, i.e., a s preference for b, taking into account all latent factors.
In order to approximate R, the following objective function is de ned, considering sparseness of the user-item-rating matrix (i.e., a huge portion of rating values in R are missing): arg min
 m n Xi=1 Xj=1 Iij (Rij   U T i Vj)2.
(2) where Iij is 1 if user i has rated item j, and 0 otherwise.
Furthermore, in order to avoid over tting, a regularization term is added to the equation: arg min
 m n Xi=1 Xj=1 Iij (Rij  U T i Vj )2 + (k U k2 F + k V k2
 F (A is a X   Y matrix) is the Frobenius norm, y |Axy|2.
The parameter   controls where k A k2 calculated by qPX x PY the extent of regularization.
Equation 3 can be solved (i.e., minimized) using two approaches: (i) stochastic gradient descent (SGD), which iter-atively updates user-speci c latent factors and item-speci c latent factors [9] and (ii) alternating least squares (ALS) that  xes U (or V ) and optimizes V (or U ), and then rotates, iteratively [32].
Contextual information has proved to be useful for providing more accurate prediction in various application domains [21] including recommender systems.
Contexts can be obtained in several ways, such as by explicitly gathering from relevant users/items, by implicitly deriving from data or environment, or by inferring using statistical methods, or data mining/machine learning, etc.
[3].
Adomavicius et al. [1] presented a multidimensional recommendation model based on multiple dimensions, i.e., user/item dimension as well as various contextual information.
Before being used, contextual information is preprocessed by utilizing various statistical tests such that only the contexts that are truly impactful are chosen for recommendation [27].
Recent works have focused on building models that directly integrate contextual information with traditional user-item-rating relations.
For instance, Karatzoglou et al.
[11] proposed a multiverse recommendation model by modeling the data as a user-item-context N-dimensional tensor.
Tucker decomposition is applied to factorize the tensor [26].
However, this model is only applicable for categorical contextual information.
A further improvement was proposed to cater to all types of contexts [22].
However, although the authors claims that the proposed model is able to bring down computational complexity, if the original user-item-rating matrix is huge, the model may still su er from scal-ability issue.
One possible solution to alleviate scalability issue is to partition the original matrix before applying any factorization models.
Zhong et al.
[30] proposed a contextual collaborative  l-tering algorithm (called RPMF) to support context-aware recommendation.
The assumption behind this model is that contextual information is encoded in or re ected by the user-speci c and item-speci c latent factors.
Based on this, tree based random partition is applied to split the user-item-rating matrix by grouping users and items with similar contexts, and then apply matrix factorization to the generated sub-matrices.
Although our proposed SoCo employs a similar tree based method, they are still signi cantly di er-ent: (1) RPMF implicitly handles contextual information by dealing with values of latent factors (i.e., the contexts are assumed to be embedded in latent factors), while SoCo explicitly processes contexts.
(2) RPMF applies matrix factorization to each node of a tree, while SoCo only works on the leaf node (i.e., only one matrix factorization operation for each tree).
Another key point that makes RPMF and SoCo di erent is that RPMF does not take into account any social network information.
We will compare SoCo with RPMF in the evaluation section to demonstrate the advantage of the way we handle contextual information.
Using social network information to recommend items has become another hot topic in the area of recommender systems.
In [18], the authors proposed probabilistic matrix factorization based approach to fuse user-item-rating matrix and users  social network information.
In [14], a neighborhood-based approach is developed to generate social recommendations.
A set of experiments were conducted to compare social based and nearest neighbor based recommendations.
Ma et al.
[19] introduced the social regularization on the basis of matrix factorization to constrain the taste di er-ence between a user and his/her friends.
Two variants are proposed: (1) average-based regularization that targets to minimize the di erence between a user s latent factors and average of that of his/her friends; (2) individual-based regularization that focuses on latent factor di erence between a user and each of his/her friends.
This work also compared the performance of di erent similarity measures, i.e., Vector Space Similarity and Pearson Correlation Coe cient.
However, most existing social recommendation models largely ignore contexts when measuring similarity between two users.
For instance, even if a friend has very similar tastes with a user, her rating on a movie may be greatly in uenced by other factors, for instance, her mood, or with whom she watched the movie.
Recent works have started looking at contexts when handling social network information.
For instance, Xu et al.
[27] proposed to cluster users and items such that like-minded users and their items are grouped.
Subgroup information (i.e., a type of context) is then utilized by applying collaborative  ltering to improve top-N recommendation quality.
Yang et al. [28]  rst argued that a user may trust di erent subsets of friends regarding di erent domains, and then proposed a category speci c circle-based model to make context-aware recommendation.
However, these works only consider very basic contextual information (e.g., category/group).
Akther et al. [4] proposed an architecture to collect contexts and social network information for personalized recommender systems.
The authors focused on how relevant data is collected and stored but ignored how such data is e ciently combined from an algorithmic perspective.
Jiang et al.
[10] proposed to integrate social contexts (individual preference and interpersonal in uence) into a matrix factorization model.
However, such contextual information is only related to social relationships, so nonsocial contexts are largely ignored.
In contrast, by applying machine learning techniques and matrix factorization, SoCo incorporates a variety of contextual information without the restriction on information type from two aspects: (i) contexts are explicitly considered to partition the rating matrix, (ii) a context-aware Pearson Correlation Coe cient is proposed to improve the accuracy of user similarity measure.
In this section, we present SoCo, a social network aided context-aware recommender system.
We  rst formalize the context-aware social recommendation problem and de ne notations in Section 3.1.
Our context-aware recommendation approach and its social network based enhancement are elaborated in Section 3.2 and Section 3.3 respectively.
Traditional recommender systems normally only consider the user-item-rating matrix to make recommendations (see Fig. 1(a)).
However, in many systems, rich contextual information is available, providing a new information dimension for recommendation (see Fig. 1(b)).
We classify contextual information into two categories: (1) static context, which describes characteristics of a user, e.g., age, gender, membership, role, etc.
or an item, e.g., category, cost, physical properties, etc.
; (2) dynamic context, which represents instantaneous information that is associated with a rating (e.g., a user s mood or location when he/she rates an item).
On the other hand, online social networks have brought another information source by which a user s preference for an item can be inferred from his/her friends who are expected
 (b) Context-aware rating matrix.
user-item-(c) Social network graph.
Figure 1: Context-aware social recommendation.
to share similar tastes (see Fig. 1(c)).
Therefore, in this work, we endeavor to systematically integrate contextual information and social network information into a matrix factorization model to improve recommendation quality.
We denote the user set by U = {U1, U2, ..., Um}, and the item set by V = {V1, V2, ..., Vn}.
Any user can rate any item based on his/her preference.
We assume that the value of a rating is a discrete variable in a range L = {L1, L2, ..., Ll}.
For instance, many recommender systems, e.g., MovieLens, employ  ve-point likert scale (e.g., [1, 2, 3, 4, 5]).
A rating provided by user Uu on the item Vv is denoted by Ru,v, and all ratings R = {Ru,v|Uu   U, Vv   V} construct a user-item-rating matrix (see Fig. 1(a) as an example).
As mentioned before, we also assume a set of contextual information that is associated with each rating Ri, denoted by Ci = {c1, c2, ...}.
Note that all ratings have the same contextual information vector and we have no restriction on the value domain of each type of contextual information, i.e., both discrete values and continuous values are acceptable.
Regarding the social network, we de ne a directed graph G = (U, E ), where edge set E represents the relations between users (U).
We denote the friend set of a user Uu by Fu   U.
We  rst discuss how to incorporate contextual information to improve recommendation quality without taking into account social relationships.
In order to e ciently combine di erent contextual information, we apply a random decision trees algorithm, which is one of the most accurate learning algorithms to construct multiple decision trees randomly [8].
The rationale behind this approach is to partition the original rating set R (i.e., user-item-rating matrix) such that ratings with similar contexts are grouped.
Since generated in similar contexts, ratings in the same cluster are expected to be better correlated among each other than those in original rating matrix (i.e., the missing ratings can be inferred more accurately).
When constructing each decision tree, at each level of the tree, we randomly select one contextual information cr from the set C to partition the rating matrix (see Fig. 2 as an example).
Speci cally, the rating matrix is partitioned according to the value of cr.
For instance, if we assume contextual information cr is day-of-week, the rating matrix can be meaningfully partitioned accordingly to which day (i.e., from Sunday to Saturday, or weekday versus weekend) the items are rated.
On the other hand, if the value of cr has no semantic meaning (e.g., a user s average rating when he/she rates a speci c item), we  rst normalize every rating s cr Figure 2: Random decision trees (one tree).
value into a certain range, e.g., [0,1], and then choose a random threshold value (e.g.,   [0, 1]) to partition the ratings.
Once rating partition at one level is completed, the randomly selected contextual information cr is removed from the contextual information set: C = C \ cr such that one contextual information is processed only once in a path.
Note that in a speci c application scenario, any contextual information can be identi ed, some of which is closely correlated with a user-item-rating interaction, while some other contexts are not.
It is thus important to select the most relevant contextual information before partitioning the ratings.
Machine learning, data mining and various statistical methods [12, 15] can be applied to preprocess diverse contextual information, however, detailed discussion on context selection is out of the scope of this paper4.
The partition process continues until one of following requirements is met: (i) all contextual information is processed; (ii) the limitation on the height of a tree has been reached; (iii) there are not a su cient number of ratings to split at the current node.
After partitioning, the ratings R are classi ed based on diverse contextual information (i.e., leaves of a tree in Fig. 2).
Note that in di erent decision trees, the training ratings are classi ed di erently, given that contexts (and their values) are selected randomly at each level of a tree.
When predicting a missing rating Rm, we assume T decision trees, and in each decision tree, Rm is classi ed to the rating subset (i.e., user-item-rating sub-matrix) Rs i   R according to Rm s contextual information.
For each Rs i (e.g., R10 in Fig. 2), we decompose it and
 investigate the relevance/usefulness of di erent contexts.
i and V s i , which can be used to predict the missing rating Rm (see Eq.
4 and 5): L1 = arg min U s i ,V s i |U s i | |V s i | Xj=1 Xk=1 Ijk(Rs i,j,k   (U s i,j )T V s i,k)2+  (k U s i k2 F + k V s i k2
 Rm,i = (U s i )T V s i .
(4) (5) Finally, the predictions from T decision trees are combined to generate the  nal prediction for Rm.
i=i Rm,i Rm = PT
 (6) By combining multiple predictions from di erent decision trees, all contextual information is comprehensively investigated, generating personalized and accurate context-aware recommendations.
Moreover, by removing less-relevant (in terms of context) ratings, the generated sub-matrix is sig-ni cantly smaller than the original rating matrix, which is normally very huge in practice, indicating that the computational complexity is greatly reduced.
One important factor that in uences the complexity of our approach is the number of decision trees.
We will show in the evaluation section that in real application scenarios, only a small number of trees are su cient to achieve high quality recommendation, demonstrating practicability of our approach.
It is worth mentioning that by partitioning the rating matrix, the target user and/or the target item may have no past ratings in the generated sub-matrix (i.e., removed due to di erent contexts with the missing rating Rm), thus causing more cold-start issues.
This can be partially solved by introducing a small amount of the removed ratings (available in the original rating matrix) that are provided by the target user and/or on the target item.
Such ratings can be selected based on context similarity, i.e., the ratings that have more similar contexts with the missing rating Rm will be selected with higher priority5.
In case the target user and/or the target item are completely new in the system, i.e., no single rating is available in the original rating matrix, the algorithms that are particularly designed for addressing cold-start issue may be applied [31], but this is beyond the scope of this paper.
tionships On the basis of our context-aware recommendation model that is presented in the previous section, in this section, we describe an enhanced version of SoCo taking into account social network information to further improve recommendation quality.
The assumption of this model is intuitive: in real world scenarios, when we decide whether or not to buy a product, e.g., book, CD, movie ticket, we often ask for suggestions from our friends, whose tastes are expected to be similar with ours.
By combining opinions from multiple friends, we are able to make wise decisions.
formation vector (see Section 3.1), and we apply Pearson Correlation Coe cient to measure context based similarity.
Although friends  opinions provide valuable information to help in making high quality recommendation for users, most existing works either utilize/mix all available social network information without  ne grained information  lter-ing [18] or do not deeply investigate how to precisely measure taste similarity between two users [14].
In order to address these issues, following the approach proposed in [19], we introduce a new social regularization term to constrain taste di erence between a user and his/her friends.
In the real world, a user may have hundreds or even thousands of friends, it is thus meaningless to treat all friends (and their information) equally because some friends may have quite similar tastes with the user, while some others may have totally di erent tastes.
In order to address such social taste heterogeneity, the introduced social regularization term takes into account taste similarity between a user and each of his/her friends: S(j, f ) k Ui,j   Ui,f k2
 (7)  Xj=1 Xf  Fj where   is a constant controlling the extent of social regularization.
S(j, f ) indicates the taste similarity between user uj and one of his/her friends uf based on their past rating patterns.
A large similarity score means based on past commonly rated items, uj and uf have very similar taste, while a small similarity score means uj and uf  s tastes are quite dissimilar.
It is worth mentioning that in di erent social networks, the friend relationship may be symmetric or asymmetric.
We denote F + j as a set of users with whom uj actively makes friends, and F   j as a set of users who actively make friend with uj .
In some social networks like Facebook, F + is equal j to F   j and
 j are not identical.
In this work, when we mention uj  s friend set Fj, we refer to F + j .
j , but in other social networks like Twitter, F + From Eq.
7 we can see that an e ective way to incorporate social network information is to accurately weight each friend s opinion by investigating similarity between the user and this friend, which can be measured based on their past rating patterns, i.e., characteristics of the items that both users have commonly rated.
There are many similarity calculation methods, among which Pearson Correlation Coe -cient (PCC) [6] has been proven to be more accurate than other methods like vector space similarity in many scenarios [19].
So in this work, we apply PCC to measure similarity between uj and his/her friend uf : S(j, f ) = (Rj,v   Rj )(Rf,v   Rf ) Pv V(j) T V(f ) r Pv V(j) T V(f ) (Rj,v   Rj)2  r Pv V(j) T V(f ) .
(Rf,v   Rf )2 (8) where V(j)T V(f ) is the set of items that uj and uf have commonly rated, Rj and Rf are the average ratings of uj and uf respectively.
One advantage of PCC (by considering average rating) is that it takes into account the fact that some users tend to give high ratings (e.g., 4 or 5 in  ve-point likert scale) to most items, while some more serious users may generally issue low ratings (e.g., 2 or 3 in  ve-point likert scale).
However, this classic similarity measure only utilizes the values of the ratings, without taking into account any contexts, 785which are another class of useful information for similarity estimation [20, 7].
In order to further improve the accuracy of user similarity calculation, we propose a context-aware version of Pearson Correlation Coe cient:

 In this section, we conduct comprehensive experiments to evaluate the performance of SoCo by comparing with the state-of-the-art recommender systems.
wv(Rj,v   Rj )(Rf,v   Rf )/
 wv(Rf,v   Rf )2).
Sc(j, f ) = Xv V(j) T V(f ) wv(Rj,v   Rj )2s Xv V(j) T V(f ) (s Xv V(j) T V(f ) (9) where c indicates context-awareness.
The weight wv of each item Vv is calculated by: wv = N (pccv) Pv0 V(j) T V(f ) N (pccv0 ).
(10) where the function N (.)
normalizes the given value to the range [0,1], and pccv represents the PCC between uj s rating Rj,v and uf  s rating Rf,v on the same item Vv.
Note that this PCC is measured by a contextual information vector that is associated with each rating6 (see contextual information vector de ned in Section 3.1).
Clearly, large weight (wv) means that a user and his/her friend rate the same rating in similar contexts, thus imposing high impact on overall similarity measure.
We normalize the context-aware similarity score Sc(j, f ) from the range [-1,1] to [0,1] before applying it to the recommendation model.
Using Eq.
7 and Eq.
9, Eq.
4 is reformulated as: |U s i | |V s i | Ijk(Rs i,j,k   (U s i,j )T V s i,k)2+ L2 = arg min U s i ,V s i Xk=1 Xj=1  Xj=1 Xf  Fj Sc(j, f ) k Ui,j   Ui,f k2
 (11)  (k U s i k2 F + k V s i k2
 Eq.
11 can be solved by performing gradient descent in i,j and V s i,k, which are iteratively updated.
U s U s i,j   U s i,j +   V s i,k   V s i,k +  
 U s i,j .
V s i,k .
(12) (13) where   is the learning rate.
The in uence of the number of iterations on the performance will be studied in the evaluation section.
It is worth noting that in certain cases, the generated sub-matrix may not contain su cient opinions from a user s friends (i.e., his/her friends have few ratings that are in the similar context with the missing rating).
In order to address this issue, based on context similarity, we select a set of past ratings provided by the user s friends and add them to the sub-matrix such that the recommendation model is able to bene t from social network information.
We leave as a future work a more detailed discussion on selection of the friends  ratings, and the tradeo  between the useful social information and the introduced noises.
is computable for Pearson Correlation Coe cient.
Douban7 is one of the largest Chinese social platforms for sharing reviews and recommendations for books, movies and music.
Each user can provide ratings (ranging from one star to  ve stars) to books, movies and music, indicating his/her preference on the item.
A timestamp is associated with a rating.
A user, although has not consumed an item (i.e., no rating is provided), may still express his/her interest by indicating  wish  (e.g., wish to read the book).
A social network is provided, where one user can follow another user whose reviews are considered to be interesting and useful.
Table 1 demonstrates the statistics of the dataset.
Note that we only use explicit ratings, i.e., the  wish  expressions are not considered to be ratings.
Table 1: Statistics of the Douban dataset # of items



 # of ratings



 # of users



 Book Movie Music All We choose the Douban data8 because it contains not only time/date related and other inferred contextual information, but also social relationships information, thus is suitable for evaluating the performance of SoCo, which utilizes various types of information.
In contrast, in some application scenarios such as MovieLens9 and Net ix10, social network information is not available.
So in order to demonstrate the advantages of SoCo without social information, we use MovieLens-1M data11, which is collected from a movie rec-ommender system.
The dataset consists of about 1 million ratings of approximately 3900 movies made by 6040 users.
Ratings are also made on a 5-star scale, and each user has at least 20 ratings.
For both Douban and MovieLens datasets, we randomly select 80% of the ratings to train recommendation models and compare their performance using the rest 20% of the ratings.
To the best of our knowledge, no existing work systematically combines contextual information and social network information to make high quality recommendations.
Nevertheless, we compare SoCo with the state-of-the-art context-aware recommender system and social recommender system, as well as a basic matrix factorization model and item/user-based collaborative  ltering algorithms: 7www.douban.com
 9http://movielens.org 10www.net ixprize.com 11http://www.grouplens.org/node/12






















 Book data Movie data Music data




   (a) MAE.
Book data Movie data Music data




   (b) RMSE.
Figure 3: Impact of parameter   (  = 0.1, dimensionality = 10, iteration # = 20).
Book data Movie data Music data














 Book data Movie data Music data



 Number of decision trees


 Number of decision trees (a) MAE.
(b) RMSE.
Figure 4: Impact of number of decision trees (  = 0.1,   = 0.01 dimensionality = 10, iteration # = 20).
RPMF [30], short for Random P artition M atrix F actorization, is a contextual collaborative  ltering model based on a tree structure constructed by using random partition technique.
Speci cally, the ratings generated with similar contexts are partitioned onto the same node of a decision tree.
Then matrix factorization is applied to the current rating matrix at each node to predict the missing ratings.
Multiple predictions at di erent nodes and trees are combined to produce the  nal recommendation.
Signi cantly di erent from SoCo, RPMF does not explicitly handle contextual information, but assumes it is encoded in the latent factor vector of each user/item, which means RPMF partitions the ratings based on the values of latent factors, instead of the values of real contexts (refer to Section 2.2).
SoReg [19] is a social network information based recommendation model.
On the basis of a basic matrix factorization model, the authors added a new social regularization to control friends  opinions.
Two variants are proposed: (1) average-based regularization, which constrains the di erence between a user  taste and average of his/her friends  tastes; (2) individual-based regularization that constrains the di erence between a user s taste and that of each of his/her friends individually.
In the experiments, we only compare SoCo with individual-based variant which is proved to be more accurate.
BMF uses basic matrix factorization technique to predict missing ratings without considering any contextual information and social network information (see Section
 and Item-based collaborative  ltering algorithm [24]  rst  nds a set of the most similar items (with the target item) that the target user has rated and then predicts the rating on the target item by taking a weighted averaging of the ratings on these similar items.
User-based collaborative  ltering algorithm aggregates ratings from a set of  neighbors  who share the similar rating patterns with the user in question.
Note that for all context-aware recommender systems, based on available information from the datasets, we extract  ve types of contextual information: (1) hour-of-day, i.e., which hour a rating is given; (2) day-of-week, i.e., what day a rating is given; (3) number of  wish  on the target item when a rating is given (for Douban data only); (4) average value of the ratings provided by the target user when he/she rates a certain item; (5) category of the target item.
We use two standard metrics to measure and compare the performance of various recommendation models: Mean Absolute Error (MAE) and Root Mean Square Error (RMSE) are de ned using Eq.
14 and 15 respectively:



 Xr=1
 |Rr   R r|.
(14) RM SE =vuut


 Xr=1 (Rr   R0 r)2.
(15)










 Book data Movie data Music data
 Tree height (a) MAE.
Book data Movie data Music data
 Tree height (b) RMSE.
Figure 5: Impact of volume of contextual information (  = 0.1,   = 0.01 dimensionality = 10, iteration # =
 where N is the total number of predictions, Rr is the real rating of an item and R0 r is the corresponding predicted rating.
Note that Each experiment was repeated ten times.
Since low variance is observed in all experiments (i.e., 95% con dence interval), we do not show error bars to avoid cluttering.
All comparison related results are statistically sig-ni cant, proved by two-tailed, paired t-test with p-values <


 We  rst use the Douban dataset to demonstrate the impact of various parameters of SoCo.
We set the regularization constant   = 0.1, which is determined by cross-validation.
Fig. 3 shows that when di erent subset of the dataset (i.e., book data, movie data and music data) is applied, how the performance of SoCo varies with di erent values of parameter  , which controls how much social network information is incorporated into SoCo.
Note that we set latent factor vector dimensionality and the number of iterations for solving a matrix factorization model to 10 and
 rameters in uence the performance of di erent matrix factorization based recommendation models.
We observe that when   increases, both MAE and RMSE  rst decrease, and then become relatively stable (but slightly increase) when   reaches a certain threshold, i.e., around 0.01.
We thus conclude that social network information is able to e ectively improve recommendation quality and   = 0.01 is a suitable threshold that nicely balances the user-item-rating matrix and social network information.
Another parameter that impacts the performance of SoCo is the number of decision trees that are employed to predict a missing rating.
Fig. 4 shows that a small number of decision trees (e.g., 2 or 3) can achieve high quality of recommendation.
This result also demonstrates that SoCo s computational complexity (in terms of random decision trees based rating partition) is reasonable in practice.
In the following experiments, we set the number of decision trees to 3 for SoCo.
We then evaluate the impact of volume of contextual information.
To do so, we control the height of the decision trees.
That is, if we set the height to 1, only one type of contextual information is used in each tree; if we set the height to 4, all contextual information is employed for recommendation.
From Fig. 5 we observe that in all cases, more contextual information produces higher performance, i.e., lower MAE and RMSE.
This demonstrates, on one hand, contextual information greatly improves recommendation quality, on the other hand, the selected contexts (see Section 4.1.2) are quite useful.
We also conduct experiments to study the impact of the similarity function (see Eq.
8 and 9) and  nd that our proposed context-aware PCC reduces MAE/RMSE (compared to original PCC) by around 4.25%/5.46% on average (book data, movie data and music data).
Finally, we compare the performance of SoCo with that of other recommender systems using the Douban dataset.
Before comparison, we determine two important parameters, i.e., latent factor vector dimensionality and the number of iterations for matrix factorization based models.
We  rst  x the iteration number to 10, and show MAE and RMSE with varying dimensionality of latent factor vector (see Fig.
ing dimensionality, which means larger dimensionality produces higher accuracy.
However, when the dimensionality increases to around 10 (even 8 for some cases), improvements on recommendation quality become negligible.
We thus conclude that even a small number of latent factors are su cient for matrix factorization based models (on the Douban data).
For the following experiments, we set the latent factor vector dimensionality for SoCo, SoReg, RPMF and BMF to the threshold values that achieve stably low MAE/RMSE (i.e., [8,10]).
Similarly, as shown in Fig. 7, we set the threshold numbers of iterations (i.e., [20,30]) for all matrix factorization based models because more iterations incur higher computational overheads without evidently lowering down MAE and RMSE in return.
Once the parameters are determined, we compare the performance of various recommendation models using book data, movie data, music data and entire Douban data respectively.
Table 2 summarizes comparison results.
We notice that in all experiment scenarios, SoCo is more accurate than other recommendation models.
All matrix factorization based models signi cantly outperform traditional item-based and user-based collaborative  ltering algorithms, demonstrating the advantage of matrix factorization technique in the area of recommender systems.
These results also show that considering both contextual information and social network information provides higher recommendation quality than the models that only take into account one type of this information (i.e., SoReg and RPMF).
The fact that

















 Latent factor dimensionality (a) SoCo.
Book data Movie data Music data




















 Latent factor dimensionality (b) SoReg.
Book data Movie data Music data
















 Book data Movie data Music data




















 Latent factor dimensionality (d) BMF.
Latent factor dimensionality (c) RPMF.
Figure 6: Impact of latent factor dimensionality (iteration # = 10).
Book data Movie data Music data




 Iterations
















 Book data Movie data Music data




 Iterations
















 Book data Movie data Music data




 Iterations
















 Book data Movie data Music data


 Book data Movie data Music data




 Iterations




 (a) SoCo.
(b) SoReg.
(c) RPMF.
(d) BMF.
Figure 7: Impact of number of iterations.
SoReg is slightly better than RPMF indicates that carefully processed social network information contributes more to a recommendation model (at least on the Douban dataset).
To sum up, when the entire Douban dataset is used, in terms of MAE, SoCo improves the performance as high as 16.0%,
 respectively.
In terms of RMSE, the corresponding improvements are 12.2%, 15.7% and 25.4% respectively.
Experiments conducted on the Douban dataset demonstrate that combining contextual information and social network information greatly improves recommendation quality.
However, in some application scenarios, no social functionality is provided (e.g., Net ix).
In order to evaluate the performance of SoCo when only nonsocial contextual information is available, we conduct another set of experiments on MovieLens-1M dataset.
Note that the social recommendation model SoReg is not involved in the comparison due to lack of essential social information.
From Fig. 8 we observe that the results share the similar trends with Douban data based experiments.
User-based collaborative  lter algorithm incurs highest MAE and RMSE, while item-based algorithms performs much better.
All matrix factorization based models outperform traditional memory based algorithms, which again demonstrates the advantage of the latent factor models.
Both SoCo and RPMF outperform BMF, proving that incorporating a variety of contextual information can achieve higher recommendation quality.
The advantage of SoCo indicates that the way we structure and incorporate contextual information imposes higher impact on the improvement of recommendation quality.
This is mainly because SoCo explicitly processes contextual information, but RPMF assumes that the contextual information is embedded into latent factors and partition the ratings based on latent factors instead of the contexts themselves.
Moreover, the fact that RPMF runs matrix factorization at each level of each tree greatly increases computational overheads, i.e., under the same experiment setting, one running of RPMF is much (around 5 ) slower than other matrix factorization based models12.
Overall, SoCo improves the performance (MAE/RMSE) as high as 2.7%/2.6%, 7.4%/6.9%, 10.6%/11.0% and 24.2%/25.4% in contrast to RPMF, BMF, item-based and user-based collaborative  ltering algorithms respectively.
In this paper, we propose SoCo, which systematically combines contextual information and social network information to improve quality of recommendations.
SoCo  rst partitions the original rating matrix based on various contexts using random decision trees algorithm.
The generated sub-matrix contains ratings with similar contexts thus imposing higher impact on each other.
Matrix factorization is applied to the sub-matrix to predict the missing ratings.
In order to e ciently incorporate social network information, SoCo introduces an additional social regularization term to infer a user s preference for an item by learning his/her friends  tastes.
To identify friends with similar tastes, a context-aware version of Pearson Correlation Coe cient is proposed to measure user similarity.
Experiments conducted on two real datasets show that SoCo evidently outperforms the state-of-the-art context-aware and social recommendation models.
Moreover, even if in some scenarios where social network information is not available, SoCo still outperforms other context-aware approaches by e ciently organizing and incorporating various contextual information.
In the future work, we intend to apply SoCo to some real-world application scenarios.
For instance, in our RecON-CILE project13, SoCo can be integrated into a web content credibility evaluation system where rich contextual information collected from web contents and the associated social connections can be utilized by SoCo for e cient credible web content recommendation.
ments.
13http://lsir.ep .ch/research/current/reconcile/
 SoCo SoReg

 Item-based CF User-based CF Book Movie Music All










































































 SoCo

 Algorithms (a) MAE.
Item based CF User based CF SoCo

 Algorithms (b) RMSE.
Item based CF User based CF Figure 8: Performance comparison on MovieLens-1M dataset.
This work was partially supported by the grant Reconcile: Robust Online Credibility Evaluation of Web Content from Switzerland through the Swiss Contribution to the enlarged European Union.
