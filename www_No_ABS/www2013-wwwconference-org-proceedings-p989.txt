The Domain Name System plays a crucial role in the world wide web.
It transparently converts domain names, i.e., hierarchical user-memorable strings of text, to routable, machine-friendly IP addresses.
Users are instructed to trust the domain names shown in their browsers  address bars and to always consult them before divulging sensitive information, making them indicators of the familiarity and legitimacy of any given web site.
As with many popular technologies, their ubiquitous nature has made them an attractive target for malicious individuals seeking to exploit users.
Copyright is held by the International World Wide Web Conference Committee (IW3C2).
Distribution of these papers is limited to classroom use, and personal use by others.
In the early days of the web, people would register domain names associated with known companies and trademarks and later sell them back to their rightful owners at a much higher price.
This practice was named cybersquatting, and it is well-known that cybersquatting pioneers made large pro ts from buying domains early and selling them when the demand was high [13].
When the web grew in popularity and large companies had already bought the appropriate domains for their business, the cybersquatters based their model on a new type of squatting, namely typosquatting.
Typosquatting is based on type-in navigation, which is the act of a user manually typing a URL in her browser s address bar instead of relying on a hyperlink in an existing site.
In the process of typing the URL of a familiar web site, a user may accidentally mistype a character in the desired domain, e.g., paypap.com instead of paypal.com, and have her browser request the page without realizing her mistake.
Typosquatters started registering such mistypes of popular authoritative domains and o ered them for sale.
In the meantime, the domains were used for displaying ads (even of competing companies), and in some cases, conduct phishing and drive-by download attacks [9].
Even today, the act of typosquatting is so popular that entire companies have been formed, who o er  domain-parking services  and automate the display of relevant ads on a typo-squatting domain.
Popular legitimate companies whose domains were typo-squatted, in an e ort to protect their customers and trademarks, buy common mistypes of their sites and redirect the visiting users back to their main authoritative domains.
For instance, the domain microspft.com is owned by Microsoft and redirects users to microsoft.com.
Unfortunately, this action exacerbates typosquatting since it drives typosquat-ters to register even more similar domains in hope that they will be able to sell them to the company for pro t.
In 2011, Dinaburg presented a new type of cybersquatting which he named, bitsquatting [6].
In bitsquatting, a cyber-squatter registers a domain name which has a character that di ers for one-bit from the same character in the targeted authoritative domain.
Dinaburg postulated that hardware errors could cause a random bit error, speci cally a bit ip, in the bytes of memory storing a domain name and thus route requests towards a di erent domain, even if the user typed the correct domain.
To test this theory, Dinaburg registered 30 bitsquatting domains that were targeting popular authoritative domains, e.g., mic2osoft.com, a bitsquatting domain for microsoft.com.
Over a period of eight months, Dinaburg s monitors recorded more than 52,000 requests, 989originating from all types of operating systems and browsers, even the ones of handheld gaming devices.
In this paper, we study the in uence of Dinaburg s  nd-ings on the domain-squatting community.
While it would certainly be interesting for researchers to independently verify Dinaburg s claims, we chose not to focus on whether bit-squatting happens but on whether cyber-squatters are convinced that it does.
Following Dinaburg s report, we construct a crawler for bitsquatting domains which, given a list of authoritative domains, automatically computes all possible bitsquatting domains that are one-bit di erent from the binary representation of the original domain.
For each valid bitsquatting domain, the crawler attempts to resolve its IP address and if it is successful, it then visits and records the HTML code of the bitsquatting domain s main page.
Using our crawler, we track the registration of bitsquat-ting domains targeting the Alexa top 500 domains for nine months, and discover ample evidence which suggest that bitsquatting is now the newest addition in the arsenal of domain-squatters.
In a nine-month period, we recorded a total of 5,366 unique bitsquatting domains, showing a 46% increase from the  rst day of our experiment.
We perform a series of automated and manual experiments on the corpus of the downloaded pages of the bitsquatting domains and discover that, while the majority of them are parked and serving ads, others are abusing a liate programs of the authoritative sites, launching drive-by download attacks to unsuspecting visitors and attempting to trick users into installing fake antivirus programs [4] and other rogue software.
The main contributions of this paper are the following:   We present the  rst large-scale analysis of bitsquatting, covering the Alexa top 500 sites over a nine-month time span   We provide detailed statistics of the population of discovered domains and categorize the domains according to their usage and their abuse   We review possible ways of defending against bitsquat-ting ranging from hardware-based solutions to damage-control and solutions based on legislation Organization.
The rest of this paper is organized as follows.
In Section 2, we brie y de ne bitsquatting and summarize Dinaburg s  ndings.
In Section 3, we describe our experiment and present our methodology and results for the discovery and categorization of each discovered bitsquatting domain.
In Section 4, we provide some details about bitsquatting domains clustering around speci c popular web sites, followed by a discussion of possible defenses in Section 5.
In Section 6, we review the related work and we conclude in Section 7.
In this section, we describe how bitsquatting works and introduce the terminology used in the rest of this paper.
We also summarize Dinaburg s empirical validation [6], showing the plausibility of conducting a real-life bitsquatting attack.
st






 nd
 rd


 .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
th






 Domain name paypal.com xaypal.com taypal.com raypal.com qaypal.com 0aypal.com Table 1: All possible and domain-name compatible bit ips on the  rst-character byte of paypal.com errors in the memory of computers, in order to drive traf- c to attacker-controlled destinations.
Corruption of bits can occur due to faulty hardware, memory present in devices operating outside of the expected temperature range (like smartphones and tablets that are commonly operated outdoors) or even cosmic rays.
While bit-errors (speci cally bit ips) are infrequent on the memory of any given machine, the total amount of RAM available to networked computers and smartphones today is substantial.
Moreover, according to Dinaburg, the majority of commodity desktop PCs, laptops and smartphones do not utilize Error-Correcting Code memory (ECC RAM) which could identify and correct erroneous bit ips.
Using conservative assumptions, the researcher calculated the worldwide hourly rate of errors, in devices with non-ECC RAM to
 will be of no use to a remote attacker, there is data in memory that could lead to exploitable scenarios.
More precisely, the data that could be of use to a remote attacker, is data related to URLs and their resolved IP addresses.
This data can be corrupted both at the client and the server-side as well as in-transit.
Here we present a few possible scenarios:   Cached HTML in server memory Whenever a web page is requested from a web server, the hardware of the remote server places the page into the server s cache so as to avoid disk I/O in subsequent identical requests.
If the random bit ip occurs in the memory that holds a URL, then the errors will be propagated to clients requesting that speci c page.
  Caches in DNS servers When a recursive DNS server resolves an unknown domain, bit ips that happen in the rest of the resolving infrastucture can be populated and stored in the server s cache.
These errors are more disastrous than the previous case, since now, all correct requests for a domain name may receive an erroneous cached response.
  Received HTML on the client Similarly to web servers, a web page cached in a user s browser can be a victim of bitsquatting, if a bit ip occurs in URLs of links and remotely-included objects, such as scripts, images, and Cascading Style Sheets.
  Router memory Any networking devices between a user and a server are also susceptible to random bit-errors.
Thus, bit ips can be introduced in a page by the routing infrastructure between the client and the server, both in the actual content of the packets relayed as well as the routing decisions.
In July 2011, Dinaburg presented for the  rst time the notion of bitsquatting [6], i.e., the abuse of random bit-related In all of the above cases, an undetected bit-error in the domain name can cause a user s browser and network-utilizing 990software to connect to a domain that is one-bit di erent from the intended, authoritative domain.
An attacker who registers these bitsquatting domains, can serve ads, conduct phishing attacks, launch browser exploits or even attempt to steal the cookie-stored credentials of the intended domain in the cases where the bit ip occured in the DNS infrastructure.
Consider the case of a random bit-error occurring on the  rst byte of the memory storing the authoritative domain paypal.com, as shown in Table 1.
Several observations can be made based on this example.
First, not all bit ips result in characters that are allowed to be part of domain names.
Thus, even if a bit ip takes place in the memory holding a domain name, it may result in an invalid domain and thus not resolve to an IP address.
Second, some of the bit ips result in neighboring characters and thus could be the result of an accidental mistype, (like 0aypal.com).
At the same time, other characters are  faraway  from the original characters, essentially ruling out mistypes.
We explore the overlap of bitsquatting and typosquatting in Section 3.2.3.
Lastly, there is always a chance that the bit ip will result in a legitimate domain, belonging to another party.
In our example with paypal.com, raypal.com is the home page of  Ray Palla , a radio-broadcaster.
In principle, bit ips can also occur in memory holding IP addresses.
While these errors could also divert tra c to attacker-controlled servers, the acquisition of a speci c IP address is signi cantly more complicated than the registration of a bitsquatting domain.
In order to discover whether bitsquatting is a real issue, Dinaburg registered 30 domains that were bitsquats of popular domains, such as mic2osoft.com (targeting Microsoft), fbbdn.com (targeting Facebook s content delivery network) and do5bleclick.net (targeting DoubleClick, Google s Ad management platform).
In a period of over eight months, his bitsquatting domains received a total of 52,317 requests from
 addresses per day.
According to Dinaburg, requests were received from all over the world, by all popular operating systems and browsers, as well as smartphones and gaming consoles with networking capabilities, showing that all systems are potentially vulnerable to a bitsquatting attack.
Additionally, Dinaburg found evidence of requests that were definitely not user-initiated, such as automatic update requests from  Windows Update , which could only be generated by misbehaving hardware.
Overall, his study showed that bitsquatting is a real possibility and that companies should protect themselves by e.g., proactively registering all bitsquatting domains in the same way as they already do with typosquatting domains [17].
As shown in later sections, attackers are convinced that bit-squatting is a new way to pro t, as evidenced by the constant rise of registered bitsquatting domains since Dinaburg s presentation in 2011.
In this section, we  rst describe our methodology for gathering data about bitsquatting domains and then provide a detailed analysis of the population of the discovered bit-squatting domains.
We study the overlap of bitsquatting with typosquatting and, using a combination of automatic i s n a m o d g n i t t a u q s t i b f o r e b m u










 Total bitsquatting domains Daily resolvable bitsquatting domains


 Day

 Figure 1: Daily counts of discovered bitsquatting domains and manual analysis, we categorize the discovered domains based on their content and purpose.
To identify the prevalence of bitsquatting and its evolution over time, we constructed a fully automated crawler capable of discovering and recording bitsquatting domains.
For each authoritative domain in a given list, the crawler  rst computes all possible one-bit text permutations of that domain that adhere to the allowed syntax for domain names.
More precisely, a bitsquatting result is considered an allowed domain, if it only contains dots, dashes and alphanumeric characters.
For every resulting bitsquatting domain, the crawler attempts to resolve the domain s IP address, and if the resolution is successful, it then requests and records the main page of the site corresponding to that domain.
This process is repeated daily, in order to discover new bitsquatting domains and track the disappearing of old ones.
Our crawler was supplied with the list of the Alexa top 500 domains and allowed to execute for 270 days, starting from August 14, 2011.
In the period of 270 days, we discovered a total of 5,366 di erent bitsquatting domains targeting 491 out of the Alexa top 500 domains.
Moreover, the total number of bitsquat-ting domains shows a 46% increase from the starting date of our experiment.
Figure 1 shows the daily growth of bit-squatting domains over that period.
For any given day, the solid line represents all the bitsquatting domains found till that day.
The graph shows an obviously increasing trend, which means that as days go by, more and more bitsquat-ting domains are purchased and made available online.
The dotted-line in the same  gure, shows the daily number of bitsquatting domains that were resolving to an IP address.
The slope of this line is obviously smaller than the slope of the solid line.
In addition, there are days where the number of resolving domains is smaller than earlier days showing that, while bitsquatting domains are registered daily, many of them are, willingly or forcefully, taken down.
We believe that these domains are taken down after legal action by the authoritative domains who are being bitsquatted.
Given, however, the low cost of .com domains, this doesn t stop 991i s n a m o d g n i t t a u q s t i b f o r e b m u











 Alexa ranking

 Figure 2: Number of bitsquatting domains per legitimate domain, grouped by Alexa rank attackers from merely registering new ones, when their old domains become unavailable.
Figure 2 shows the number of times, each of the Alexa top
 and-whisker  plot to map the data in quartiles.
The graph can be read as follows: The edge of the lower whisker of a box, represents the minimum number of recorded bitsquat-ting domains for any given authoritative domain, within a speci c rank, whereas the edge of the higher whisker represents the maximum number.
The dotted line in each box, represents the median number of bitsquatting domains, whereas the box itself is comprised by the median numbers of the groups of data below and above the central median.
For example, all sites ranking from one to one hundred were targeted by bitsquatters at least once and at most 67 times.
The median number of bitsquatting attacks for all domains of that rank is 14.
The small height of all gray boxes in relation to the range of their whiskers, as well as the positions of their median values show that, even though some web sites are attacked much more than the rest, the majority of sites within the Alexa top 500 receive roughly the same number of attacks.
From an attacker s point of view, this can be interpreted as follows: most authoritative domains within the Alexa top 500 are equally important and thus most are targeted the same number of times.
Before we explore the usage of the discovered bitsquatting domains, we want to focus on the overlap of bitsquatting with typosquatting.
Given that typosquatting is known and practiced for over ten years, the question rises of why the domains discovered in our experiment were registered.
Were the prospective domain-name owners registering them with typosquatting in mind, or were they considering the newly proposed bitsquatting?
A single bit ip in a valid DNS character could be interpreted as a typo depending on the keyboard layout used.
In fact, the characters resulting from most typos on any keyboard are identical with the characters resulting from a single bit ip.
Of the 38 possible characters (a-z, 0-9, dot and dash) that can be present in a valid domain-name, the characters has a Ham-binary representation of about 28


 #Domains QWERTY AZERTY QWERTZ Typo-





yes yes yes no no no yes no no yes no no yes yes no no yes no squatting?
Possibly yes De nitely no Table 2: Number of bitsquatting domains in the experiment that could be confused with typosquatting domains.
The last line shows that 3,854 domains can not be a typo-domain according to the given keyboard layouts.
ming distance of 1 to the binary representation of another character in the valid DNS character set.
We analyzed the bitsquatting domain names in our experiment to determine whether these domains could possibly be typosquatting domains according to any of the popular keyboard-layouts, i.e., QWERTY, AZERTY or QWERTZ.
We consider a domain to be a typosquatting domain when it has a  fat nger  distance of one, from the targeted authoritative domain [14].
The results of this analysis are presented in Table 2 and show that 3,854 or 71.8% of the bitsquatting domains are not typosquatting domains.
This indicates that these domains were registered speci cally with bitsquatting in mind.
To further support our claim that these domains are registered with bitsquatting in mind we hypothesize that registrations for bitsquatting domains saw a sudden increase when the work of Dinaburg appeared.
From the 5,366 discovered bitsquatting domains, we isolated the ones that, given a QWERTY keyboard layout, were not within a  fat nger  distance of one of the original domain.
We limited ourselves to the QWERTY layout since, as shown in Table 2, this layout could be the most responsible for a domain being both a bitsquatting as well as a typosquatting domain.
For these domains, we queried their registration dates, which we plot in Figure 3.
To prove our hypothesis, we build a linear regression model describing the variation in registrations over time up to the coining of the term bitsquatting and R = 0.81).
After the coining of (no variation p < 10 the term, we see a sudden increase of registrations which are signi cantly di erent from the current trend (p <10 ) and indicates that something has abruptly changed the trend established over multiple years.
Intuitively, one can see that while this type of mistyped domains were always registered, the registrations spiked in the second-half of 2011, which is when Dinaburg presented his work at BlackHat [6].
Thus it is reasonable to associate the notion of bitsquatting with the sudden increase in registrations of domains, not commonly associated with typosquatting.
 19  8
 Prior research by Wang et al. [17] has shown that most typosquatting domains are pointing or redirecting their traf- c to domain-parking agencies.
Domain-parking agencies are Internet advertising companies which specialize in the monetization of domains with no real content.
The modus operandi of these agencies is the following: A user registers a domain name and forwards all of the received tra c to the domain-parking agency.
The agency, using information
 Bitsquatting occurs because of hardware problems either on the client-side, the server-side or any of the network infrastructure in between.
The most obvious solution therefore, is to address the problem at its root.
As Dinaburg suggested, data stored in hardware should include data integrity information to ensure that the data has not su ered unexpected modi cations.
Such data integrity validation could be accomplished by using ECC memory and CRC checks.
Unfortunately, this approach will only ensure that local data is not corrupted.
Routers on the network for example, will correctly store and forward any data they receive without corruption, but the corruption might already have occurred.
To stop data-corruption in a networked environment, all parties must use hardware-based data integrity validation in order to be e ective.
Thus, even if all major ISPs and hosting companies would be willing to invest in hardware with error-correction capabilities, a complete migration would require a signi cant span of time.
Another way to avoid random corruption of critical data, is to validate data integrity more frequently in the software.
If the data exchanged between client and server includes data integrity information, then the data integrity can be veri ed at either end, ensuring that there was no corruption along the way.
One option for ensuring data integrity on the DNS level is by using DNS Security Extensions (DNSSEC), which add data integrity information to DNS queries.
However, as with all client-server protocols, this approach requires that both the client and the used DNS infrastructure support DNSSEC.
While modern operating systems ship with builtin support for DNSSEC, the deployment of the security extensions in the DNS infrastructure is still not complete due to unforeseen obstacles [7, 16].
Another option is to use Transport Layer Security (TLS) or Secure Socket Layer (SSL), to ensure that users at least get a warning about being connected to the wrong endpoint, in case DNS tra c has been corrupted.
Incentive-removal In Section 3.2.4, we showed that more than 50% of all registered bitsquatting domains are used to show ads, through the use of dedicated domain-parking agencies.
This means, that for their majority, bitsquatters use a relatively simple, nontechnical and non-intrusive approach to monetize their newly-purchased domains.
Thus, even if there are thousands of individuals purchasing bitsquatting domains, they all eventually cluster to a relatively small number of domain-parking agencies.
If legal control would be applied at these companies, i.e., to be forced to deny their services to domains that are obviously bitsquatting domains, then bitsquatters could no longer utilize them.
It is worth pointing out that there is already legislation in-place which legally protects companies from cybersquatters and could be straightforwardly extended to cover bitsquatting [1].
If bitsquatters can no longer rely on ads, the only safe alternative for making a pro t would be to sell the bitsquat-ting domain to the company owning the corresponding authoritative domain.
While this is still an option, a collective boycott from large companies towards cybersquatters would leave them with useless non-pro ting domains.
Bitsquatters could of course try to monetize their domains through mal-Figure 6: Bitsquatting domain for hu ngton-post.com in Section 3.2.5, in that huffingtonpost.com has no a liate program of its own and thus the attacker needs to  explain  the transition to amazon.com.
All 49 bitsquatting domains were available till the 29th of April 2012, giving the attacker over seven months to capitalize on visiting users.
In addition, we recorded identical pages on bitsquatting domains of zynga.com (a popular game producer), nytimes.com (the New York Times) and reddit.com.
microsoft.com.
In the period of 270 days, we recorded a total of 40 different bitsquatting domains for microsoft.com.
While the majority of them were parked or  for sale  domains, we also discovered more intrusive examples.
micposoft.com is a domain which used the logo of the Microsoft Corporation and their usual blue-and-white color scheme.
The site was supposedly o ering multiple downloads, such as a password recovery utility, Internet Explorer 9 and Windows
 downloaded the executable and submitted it to VirusTotal, an online service that scans user-submitted  les against the signature databases of popular antivirus software.
The executable was  agged as a  packed malware  by 2.3% of the utilized antivirus engines.
Five other domains, e.g., microskft.com and microsogt.
com, were redirecting the unsuspecting user to the domain errorfix.com.
That site was o ering an  Advanced Registry Repair tool , which was  agged as a fake antivirus by
 com, was o ering products,training and services, abusing the similarity and name of their trademark with Microsoft s.
In the previous sections, we presented ample evidence showing that cybersquatters are actively bitsquatting popular Internet sites and attempt to monetize, in a variety of ways, the visits of unsuspecting users.
In this section, we brie y describe some possible solutions for the protection of users and companies against bitsquatting.
996ware installations, but this assumes signi cantly more legal risk than the simple hosting of ads.
A more immediate way for a company to protect its trademark and users, is to accept that data corruption can occur and prevent its exploitation by rogue parties, through the preregistration of all possible bitsquatting domains when registering the master, authoritative domain.
This  x has a substantial cost overhead, as the following example shows: The most common domain-name length among the top one million Alexa domains, is 9 characters, not counting the top-level domain (TLD); the most common top-level domain is .com.
Consider a company wishing to register mycompany.com, a 9-character domain name under the .com TLD, and all the bitsquatting variations of this domain-name to be safe from bitsquatters.
In this case, there are 42 .com domain names that would need to be registered, including the authoritative mycompany.com domain.
For some domains which are not under the .com top-level domain, there could be a need to register more domains under a di erent top-level domain authority.
For instance, to register all bit-squatted variations of mycompany.cn, requires the registration of all domains in the .an, .bn, .cf, .cl, .co, .gn, .kn and .sn top-level domains, since a random bit-error can also occur in the TLD part of a domain name.
Unfortunately, some of the resulting TLDs may be very expensive or subject to local regulations.
At the same time, Dinaburg pointed out that bitsquat-ting attacks can be practically exploited only against the companies owning the most popular domains, since these are the ones which get resolved the most and thus have the most chance of a random corruption.
These companies are large enough to be able to a ord the registration and maintenance of additional domains, especially when it comes to protecting their online identity.
To the best of our knowledge, our work is the  rst one that studies the adoption of bitsquatting by the domain-squatting community.
Bitsquatting however, is only the latest instantiation of a series of attacks against the Domain Name System and the web sites relying on it.
Thus, in this section we review prior domain-squatting attacks and relevant surveys.
Cybersquatting refers to the act of registering domains that are trademarks belonging to other persons and companies.
Cybersquatting was popular at the dawn of the world wide web, when there were long-existing brick-and-mortar companies that did not yet have a web presence.
Many opportunists registered their trademarks as domain names before them, so that they would sell the domain back to the company for pro t [11].
Occasionally, the cybersquat-ters would host o ensive or mocking content on the cyber-squatting domains so that they would force the company to buy the domain from them as soon as possible [8].
Today, this type of domain-squatting is not as popular since companies usually register all appropriate domains, well before the company and its trademarks become popular.
There are still cases however, where cybersquatters speculate the name of future products and services and reg-
ister them, before the company marketing the product or .
Coull et al. [3] have studied this phenomenon service, does together with other domain registration abuses, such as domain name tasting and domain-name front running.
Cybersquatting later evolved into typosquatting, i.e., the act of registering domains that are mistypes of popular authoritative domains, with the intention of capturing the traf- c of users that make mistakes while typing a URL in their browsers  address bar.
Such mistakes include missing-dot typos, character-omission typos and character-permutation typos.
This practice can be traced back to over 13 years, since the 1999 Anticybersquatting Consumer Protection Act (ACPA) already mentions URLs that are  su ciently similar to a trademark of a person or entity  [1].
In 2003, Edelman reported on 8,800 mistyped and cybersquatting domains that served sexually-explicit content, which he postulated were registered by the same individual [8].
Wang et al. [17] described a system for automatically discovering and analyzing typosquatting by simulating typing errors.
The researchers also brought attention to the fact that the majority of the discovered typosquatting domains were pointing to domain-parking agencies, which were used to automatically serve ads related to the mistyped domain name.
Banerjee et al. [2] identi ed that typosquatting extends to the abuse of domain su xes, such as registering a typosquatting .org domain, for an authoritative .com.
Moore and Edelman perform a similar experiment to discover typosquatting domains in 2010 [14] and estimated that, at the time, at least 938,000 typosquatting domains targeted the top 3,264 .com sites.
Interestingly, the authors point out that large advertising networks such as Google Ads, willingly cooperate with typosquatters by showing ads on the mistyped domains and should thus be held equally responsible for the damage against the authoritative domains that are being attacked.
Apart from serving ads, there have also been documented cases of typosquatting domains used to serve malware [9].
Nikiforakis et al. [15] recently showed that typosquatting can also occur in remote script inclusions, where developers mistype the domains of remote code providers and thus make their sites susceptible to malicious script injections.
In a domain-homograph attack, an attacker takes advantage of the perceived visual similarity between two or more letters, in order to trick the user into believing that she is interacting with a speci c authoritative web site while she is interacting with the attacker s site.
This confusion may lead up to the user willingly submitting her credentials or other sensitive information.
The main di erence between these attacks and the aforementioned domain-squatting attacks, is that the homographed domains are usually spread-out through spam emails and social networks, instead of relying on user mistakes, since their construction cannot usually be achieved by the mistype of a letter for a neighboring one.
Gabrilovich and Gontmakher were the  rst to bring attention to the possible use of characters from non-Latin character-sets that look like Latin characters and could be substituted to confuse the user of the nature of a given
 Parked domain with ads - www.iphone6.com
 pal.com using the Cyrillic letter p (lower case  r , Unicode U+0440), which looks almost identical to the Latin letter  p .
Dhamija et al. [5], study the reasons which make phishing work, and make special mention of  visually deceptive text , i.e., domains that substitute characters with lookalikes within the same character-set, such as paypa1.com (last letter is the number  one  instead of the letter  l ) and bankofvvest.com (two  v s instead of a  w ).
Holgers et al. [12] performed a large-scale study of homograph attacks by gathering popular domains and searching for homographed ones by substituting up to three characters of each domain, with their confusable counterparts.
They discovered a total of 399 homographed domains, targeting 299 authoritative domains, from a corpus of over 3,000 do mains.
The majority of the discovered homographed domains were used to display ads to the visiting users.
Others were listed for sale and some were even parodies of the authoritative domains that they mimicked.
These results suggest that, while homography is used to construct con-fusable domains, the population of homographed domains is several orders of magnitude less than typosquatting and not exploited as much as it could be.
The importance of domains has made them an attractive target for malicious individuals.
As the web expands, domain names can only become more popular and thus attacks against them are likely to become more frequent and more severe.
Even though today, search engines greatly assist users in discovering web sites, domain names are still the de facto symbol of familiarity of any given web page appearing in a user s browser.
Bitsquatting is the latest instantiation of attacks against domain names, but di ers from its predecessors in that it relies on hardware failure rather than human error.
In this paper, we explored the impact of bitsquatting on the domain-squatting community and showed that domain-squatters have embraced it as the latest way of parasitically pro ting on popular web sites.
Bitsquatters were found to employ all the known ways of domain-squatters as a way of pro ting: parked domains, a liate abuse and malware installations.
We hope that this study, can serve as a reference point for the dangers of bitsquatting and the need for appropriate reaction from companies that wish to protect themselves and their customers.
Acknowledgments: The authors acknowledge the support of EURid, the European Registry of Internet Domain Names.
This research was performed with the  nancial support of the Prevention against Crime Programme of the European Union (B-CCENTRE), the Research Fund KU Leu-ven and the EU FP7 project NESSoS.
