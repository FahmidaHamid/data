Currently, many speci cations appeared that provide different solutions for various e-commerce problems.
As a result, companies tend to support more than one speci cation.
By supporting more than one speci cation, a company will be able to combine complementary aspects of the speci cations to provide better services and the availability of the services supported by the company will be increased (i.e., if implementation of a speci cation is unavailable, the company may use the implementation provided by another speci cation that provide solution for the same problems).
So, there is a need for an engine that will store and serve implementations of these speci cations from a single, central point.
The engine should also be easily customizable to enable addition/removal of these implementations.
EIOP aims to provide implementation of such an engine.
EIOP is extension of ebIOP [1] which provides such an engine for ebXML.
EIOP contains a server that listens to a port and a web based user interface from which one can manage (add/remove/change/list) and use the EIOP Components over the web.
Figure 1 shows the system architecture.
EIOP contains one or more EIOP Components Copyright is held by the author/owner(s).
which are implementations of e-commerce problems or speci cations.
EIOP receives messages with the help of its JAXM (Java XML Messaging) compliant message handler over the HTTP or TCP/IP.
EIOP server (which resides most probably inside the company  rewall) receives messages with the help of its TCP/IP compliant message handler.
The JAXM compliant message handler routes the messages coming from the other EIOP servers (which are outside the  rewall) to the messaging handler that resides in EIOP server using TCP/IP.
Company A
 Component1
 Component2 ......
Component n Web Interface
 or JAXM TCP/IP EIOP Server



  



 EIOP Server Company B Web Interface
 or JAXM TCP/IP
 Component1
 Component2 ......
Component n Figure 1: EIOP Architecture.
EIOP communicates with the web interface and EIOP s of other parties using a standard messaging service called EIOP MS (EIOP Messaging Service).
EIOP MS de nes a set of SOAP Header and body elements with in the SOAP Envelope.
Figure 2 shows an example request message.
As shown in the  gure, the header part contains message identi cation and processing data that explains how the message should be processed at the receipent.
The body part contains the information about the attachments, and the  rst attachement of the message contains the EIOP request or response message.
The message shown in the  gure requests the list of components on the EIOP Server.
EIOP messages are processes by a messaging handler named
 "http://schemas.xmlsoap.org/soap/envelope/"> <SOAP:Header> <pmh:MessageData message.type= platform.info  processor.class= metu.ceng.e102830.iop.
platform.components.pinfo.
PlatformInfoMessageProcessor > <pmh:MessageId>Msg001</pmh:MessageId> </pmh:MessageData> </SOAP:Header> <SOAP:Body> <pmb:Manifest> <pmb:Reference id= Attachment1 /> </pmb:Manifest> </SOAP:Body> </SOAP:Envelope> --boundaryValue Content-ID: <Msg001@sender.com> Content-Type: text/xml; charset= UTF-8  <PlatformRequest> <PlatformServerRequest crq:request.type= LIST > </PlatformServerRequest> </PlatformRequest> Figure 2: An example EIOP Message.
EIOP MSH.
When a message is received by the EIOP MSH, the header part of the message is processed to  nd a suitable message processor for the message type.
Currently the EIOP has two types of messages namely platform.info and platform.component.
The  rst message type requests information or modi cation from the EIOP (e.g., list/add/edit/remove EIOP Components).
The other type of message is targeted to an EIOP Component and it is further processed by the component itself.
An EIOP component is an e-commerce application which is an implementation of an e-commerce problem or speci cation.
In EIOP, the GUI that is used to manage the components in ebIOP [1] is maintained as an option.
Figure 3 shows this GUI.
Speci c user interfaces of the components could be launched by using the Components menu as shown in the  gure.
Figure 3: EbIOP GUI.
One can also use EIOP Components over the web interface as shown in Figure 4.
As shown in the  gure, a user may access more than one EIOP Server from the same interface.
EIOP Components that resides in an EIOP Server is provided in the con guration  le of the EIOP Server.
Each EIOP Component must implement two methods namely initialize() and processMes-sage(PlatformMessage).
The initialize() method is called by the EIOP Server when after the server reads its con guration  le to initialize the component.
This method should read the con guration  le of the component and make necessary initialization speci c to Figure 4: Web Interface.
the component.
The processMessage(PlatformMessage) method is called by the EIOP MSH of the EIOP Server.
When a message targeted to a component is received by the MSH, the component is located from the EIOP Server and processMessage(PlatformMessage) method is called by the MSH.
The message is further processed by the component and result (if any) is returned to the MSH.
EIOP Server communicates with EIOP Servers of other parties and with the web interface using a standard language called EIOP ML.
EIOP ML is an XML based language and contains two message types namely PlatformRequest and PlatformResponse.
User requests are converted into a PlatformRequest message by the web interface and sent as an attachment in a SOAP message to the EIOP Server for processing.
After the message is processed, the result is returned as a Plat-formResponse message to the web interface and the message is converted into suitable format for requesting device (e.g., WML for PDA s, HTML for web browsers, etc.)
by a suitable XSL document.
The conversion process is done by a suitable ResponsePro-cessor at the web interface.
According to the type of the response message and the requesting device, suitable ResponseProcessor is loaded and response document is converted to the desired format.
EIOP provides a common platform for e-commerce applications to make businesses easily integrate and use e-commerce applications from a single central point.
EIOP achieves this by providing a common base class namely EIOPComponent which is an e-commerce application or implementation of an e-commerce speci- cation.
The platform could easily be customized by making a small change in the con guration.
The implementors could replace or add/remove EIOP Components to/from the EIOP easily by using the web interface or by modifying the con guration.
The software is currently being developed using JDK 1.4.2 with generics and jakarta tomcat
 i cations will be integrated into the EIOP as EIOP Components to compare the two standards.
