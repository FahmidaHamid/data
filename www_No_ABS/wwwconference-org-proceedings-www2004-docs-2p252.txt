Today we can get a lot of information from the web, but most of them are not what we are looking for.
So a user adaptation technique is required to locate and present the information for which the user is looking.
Generally, to achieve a user adaptation, it is necessary to collect user pro les.
In previous adaptation systems, there are two major approaches for collecting user pro les: prepro-cessing as is done with a questionnaire, and automatic collection based on the interaction between the user and the system.
However, preprocessing is very expensive for users.
The cost of automatic collection is not higher than the cost of preprocessing.
But when systems use the acquired information only for their own system, a difference of the accuracy of adaptation may occur.
For example, the system which the user frequently uses can achieve an adaptation very well, but the system which the user rarely uses can not.
To solve this problem, the user must repeat a similar procedure for each system.
This is a burden to the user.
To solve these problems, we propose  Adaptation Anywhere & Anytime (A3) , which is a framework for making web sites/ap-plications adaptable to user s needs or interests.
The approach adopted by A3 is automatic construction and sharing of the user ontology.
The user ontology is de ned as a classi ed tree of web resources, and is written by RDF(S)[2, 3] and OWL[6] proposed for Semantic Web[1].
We assume that the user ontology represents the user s knowledge, and we use the user ontology as an user pro le to achieve a user adaptation on A3.
Sharing and automatic construction of the user ontology solves the problem of the cost and multiple Copyright is held by the author/owner(s).
Figure 1: An Overview of A3 Framework required similar procedure, which plagues the conventional system.
That is, the automatic construction of the user ontology reduces the user s cost of answering the questionnaire.
And by sharing the user ontology, the system can achieve an adaptation using the user ontology constructed by another systems, so user must not repeat a similar prcedure.
Figure 1 shows an overview of the A3 framework.
The user browses web sites or uses the web applications using a user in-terface(browser) on terminal devices such as PCs, PDAs, cellular phones, etc.
Web sites/applications built on A3 use the user ontology to enable a user adaptation.
While the user is browsing the site or using the application, a user ontology is automatically constructed based on the interaction between the user and the site/application.
The constructed user ontology is shared by sites/applications.
In sharing a user ontology, each user must have one user ontology, not many ontologies.
For this purpose, the user ontology server is connected to the web.
User Ontology Server (UOS) : The UOS saves the user ontology while the user is not using any web sites/applications.
When the user starts to use site/application on A3, the UOS sends that user s ontology to the user ontology manager.
There, the user ontology is used for achieving a user adaptation and is reconstructed based on the interaction between the user and the site/application.
When the user  nishes using the site/appl-ication, the reconstructed user ontology is returned to the UOS.
Thus, same user ontology is shared between systems, so the user adaptation is achieved based on the same user ontology anytime and anywhere.
Furthermore, sharing the user ontology causes some problems
 ple, if each site/application constructs a user ontology using its own policy, each user ontology won t be consistent from site to site or application to application.
To solve these problems, the user ontology manager performs all actions on the user ontology.
User Ontology Manager (UOM) : UOM has two main task: the construction of the user ontology, and achieving an user adaptation such as selecting the appropriate resource to the user s needs using the user ontology.
To solve the problem which the sharing of the user ontology causes, the direct action such as the construction and the use of the user ontology is performed by UOM, is not performed by sites/applications.
Each site/application can decide when and which action is done, but not how to do it.
According to the decision made by the system, the UOM decides how to achieve each action and actually performs it.
In easily and simply adapting the web site to the user, we decided to develop a method for implementation of the web site using XSLT[5].
In A3, XSLT is used to translate an original XML/XHTML  le written by the author of web sites into XHT-ML  le containing appropriate resources for the user.
A3 offers some new XSLT elements for sorting of resources, construction of the user ontology and so on.
These new elements are achieved using extension elements and extension functions of XSLT.
In the following, it is assumed that the author of the web site wants to sort resources, for example, a book, according to the user s preference and present them on the web page.
The example of XML/XHTML  le is : <?xml version="1.0"?> (cid:1)?xml-stylesheet type="text/xml" href="book.xsl"?
(cid:2)

 <AUTHOR>Asimov</AUTHOR> <TITLE>I, Robot</TITLE> ...
<AUTHOR>Clarke</AUTHOR> <TITLE>2001: A Space Odyssey</TITLE> ...
...
The XML/XHTML  le contains the data of resources.
Generally, the example of such resources are news stories on news sites, merchandise of e-shopping sites and so on.
In this case, resources are books.
 book.xsl  (written by italic) presents XSLT stylesheet of this XML  le.
It is : <?xml version="1.0"?> <xsl:stylesheet version="1.0" xmlns:xsl="http://wwww3org/1999/XSL/Transform"> <xsl:output method="html"> ...
<xsl:template match="/BOOKS">
 ...
<xsl:apply-templates> (cid:1)a3:sort/(cid:2) </xsl:apply-templates> ...
</xsl:template> <xsl:template match="BOOK"> <xsl:apply-templates select="TITLE"/> </xsl:template match="BOOK"> </xsl:stylesheet> This XSLT stylesheet contains an (cid:1)a3:sort(cid:2) element (written by bold).
This element is the additional element by A3 and works like an (cid:1)xsl:sort(cid:2) element.
While an (cid:1)xsl:sort(cid:2) element sorts resources matching to (cid:1)xsl:template(cid:2) element according to one of their attributes of them, an (cid:1)a3:sort(cid:2) element sorts that resources using the user ontology.
When the user starts to use the site having these  les, the XML/XHTML  le and the XSLT stylesheet are sent to the UOM.
The UOM sorts the resources matching (cid:1)xsl:templates match= BOOK (cid:2) element (i.e. books) based on the user ontology, and creates a new XHTML  le.
In this new  le, books appear in order of the result of sorting.
The book which is the most interesting to the user will appear in  rst, the one which is of least interesting will appear in last.
Then, new XHTML  le is sent to the browser and translated into a web page.
The only task the author of web sites has to perform is to write the XSLT stylesheet and XML/XHTML  le.
If the author of web site provides these  les, resources matching (cid:1)xsl:template(cid:2) element are sorted and then presented in this way if it is the  rst time the user uses that site.
And sorting is done even if the author doesn t know how to sort resources.
The sorting of the resources is done described below.
The user ontology consists of category and resources.
Every resource is categorized into one category.
Each category has a restriction.
The restriction is an attribute-value pair to which the resource categorized to that category must satisfy.
The UOM calculates the weight (cid:3) of the attribute-value pair.
The weight (cid:3) is given by (cid:5).
For example,  is the number of resources that were categorized to the category to which the resource being sorted is categorized.
And  is the number of resources that match to the (cid:1)xsl:template(cid:2) element and were categorized to some category of the user ontology.
And the weight of category (cid:7) is given by :   (cid:3)(cid:2).
 is the number of categories between category (cid:7) and the root category.
(cid:3)(cid:2) is the weight of the attribute-value pair which each category between category (cid:7) and the root has.
The weight of the root is (cid:3) (cid:4) and the weight of the Category (cid:7) is (cid:3) .
The weight of the resource is the weight of a category the resource is categorized in.
According to the weight of each resource, resources are sorted.
(cid:3) (cid:2) (cid:2) (cid:2)(cid:1)(cid:2) (cid:2) To construct a user ontology, the resource are added to the user ontology, when the user can be regarded as she/he had acquired information about the resource.
The web system requires the UOM to add the resource to the user ontology.
According to this requirement, the UOM adds a resource using the following three proce-dures:(1) categorizing the resource into an existing category, (2) making a new category and categorizing the resource into the new category, or (3) deleting unneccessary cetegories.
We proposed A3, which is a framework for user adaptation.
In this framework, the automatic construction of the user ontology and the sharing of the user ontology are enabled in achieving user adaptation.
Furthermore, A3 has a method of ensuring the easy implementation of the web site using XSLT.
So A3 is very useful for the web site authors wishing to make their sites adaptable.
But, there is still work that must be done.
The conventional methods of A3 are limited, so we need to enhance them.
Moreover, it is necessary to actually build sites/applications on A3 and verify its functionality, and to improve the adaptation accuracy and so on.
