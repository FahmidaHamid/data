Since the introduction of the PageRank algorithm in 1998, numerous enhancement were made in both implementation and the-orical ef ciency.
Using the stochastic aspect of the PageRank algorithm, the concept of backoff process was introduced by Fagin et al. [3] as an idealized model of browsing the web using both hyperlinks and the back button.
This model allow the history stack to grow unboundedly.
We introduce a bounded history stack, and show that in the special case of a one page history, there is an explicit and fast algorithm for computing the PageRank.
Let G = (V, E) be a web graph, that is a set V of web pages linked to each other by a set E of edges.
If G is aperiodic and strongly connected, it is well known [6] that the iterative process  v   V , n   N, Pn+1(v) = Xw v Pn(w) d(w) , (1) where d(v) is the out-degree of v   V , converges towards an unique probability P for any given probability P0.
Copyright is held by the author/owner(s).
However the web graph is far from being strongly connected [2].
One solution is to introduce a dumping factor d. The principle of the dumping factor is to  dump  the iterative process:  v   V , n   N, Pn+1(v) = d Xw v where S is a given probability on V 1.
Pn(w) d(w) + (1   d)S(v), (2) A dumping factor is equivalent to working on a weighted strongly connected graph.
If G is lea ess, the limit P of (2) exists.
Otherwise, normalization is needed.
We suggest to re ne the PageRank model by inserting the possibility to return.
We choose a bounded history stack, so the PageRank algorithm is equivalent to a Markov chain with  nite memory m.
Potentially, this leads to consider all the possible paths in G of length m. For m = 1, this corresponds to the set E of the hyperlinks.
We introduce two intuitive models for m = 1, one of them collapsing the working space from E to V .
To begin with and for simplicity, we examine our Back button process without dumping.
In this model, we suppose that the web user can click at each state either on the links or on the Back button (the Back button is then considered as an outgoing link like the others).
The probability of using the Back button is the same as that of using a given link.
using Back button brings the user back to the previous state2.
Let P rb n (w, v) be the probability of being in v in the instant n (w, v) is de ned if n coming from w in the instant n   1.
P rb (w, v)   E or (v, w)   E. We can express the probability Pn(v) of being in v at the instant n as follows: Pn(v) = Xw v P rb n (w, v) (3) Note that because of the Back process, we work on the non-directed graph induced by G.
Working on the same principle, we deduce an equation expressing P rb(w, v): if (w, v) /  E (but (v, w) is), going from w to v implies using the Back button; then we were previously in w coming from v. Otherwise, either the Back button or the regular link can be used.
Thus we have:
 be better to  personalize  it [1].
|V | , but some have suggested that it would
 n (v, w)) if (w, v)   E, P rb n+1(w, v) =   
 d(w) + 1 P rb n (v, w) d(w) + 1 otherwise.
(4) Using (3) and (4) gives an iterative process for computing the new PageRank, but if G0 = (V, E0) is the non-oriented graph induced by G, we have to use |V | + |E0| variables instead of |V | for the standard PageRank.
We now consider that the Back button cannot be used twice consecutively.
This model, which seems more complex, as however three important advantages.
First, it signi cantly reduces the stored PageRank by  greenhouse effect  in the end-nodes.
Second, it is more appropriate to the insertion of a dumping factor (see 3.3).
Finally it is less heavy on resource.
For (w, v)   E, let P ib using an hyperlink in w, and  P ib using the Back button.
 P ib n (w, v) be the probability to arrive at v n (v) the probability to arrive at v n+1 can be deduced from P ib n :  P ib n+1(v) = Xw v P ib n (v, w) d(w) + 1 (5) Then we can tell P ib n+1 from P ib n and  P ib n : P ib n+1(w, v) =
 d(w) + 1 Xu w P ib n (u, w) +  P ib n (w) d(w) (6) We can note that P ib v. We can then use P ib departure node.
n+1(w, v) does not depend on the arrival node n on V instead of E, specifying only the Equations (5) and (6) can now be written:  P ib n+1(v) = P ib n (v) Xw v d(v) + 1 Xw v
 P ib n+1(v) =
 d(w) + 1 P ib n (w) +  P ib n (v) d(v)
 For a real graph, insertion of the Back button ensures there is virtually no leaf, but the process may still not be irreducible, so we need to introduce a dumping factor.
We made the choice to deactivate the back button after a crossing3.
We can then merge (2), (7) and (8) to obtain:  P ib n+1(v) = dP ib
 d(w) + 1!
+ (1   d)S(v) P ib n+1(v) = d  P ib n (w) +  P ib n (v) d(v) !
n (v) Xw v d(v) + 1 Xw v

 the V   V crossing transitions in the Back process.
The process we made is stochastic (there is no blind way), aperi-odic and irreducible (because of the dumping factor).
The Perron-Frobenius theorem applies and ensures that the iterative process converges towards an unique  xed point.
Using (9) and (10), we get an iterative way of calculating P ib n , and P ib n+1(v) is equal to: dP ib n (w) d(v) + 1 Xw v + Xw v d2P ib n 1(v) d(v)(d(w) + 1) + d(1   d)S(v) d(v) (11) Equation (11) is a two terms recurrence, but as we want to com-n instead pute a  x point, the Gauss-Seidel method allows to use P ib of P ib n 1; indeed one can approximate P ib n+1(v) by: dP ib n (w) d(v) + 1 Xw v + Xw v d2P ib n (v) d(v)(d(w) + 1) + d(1   d)S(v) d(v) (12) We remark that this iterative process has the same complexity that the standard PageRank computation.
Once P ib n has converged toward a vector P ib, we obtain easily the asymptotic probability of presence P as follows: P (v) = Xw v

 P ib(w) +  P ib(v) (13) We have proposed an alternative PageRank that can be obtained as easily that the standard PageRank and that should offer a better modelization of the web users.
Computations made on a 8 millions pages graph showed that the top ranked pages differ from one model to another, yet both seemed interesting.
We still have to merge this algorithm with a semantic pertinence-sort to be able to test this new model in the  real life .
