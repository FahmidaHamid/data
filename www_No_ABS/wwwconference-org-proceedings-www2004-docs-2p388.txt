On the Internet, there are many applications that bene- t from the cooperation between peers.
These applications range from simple  le-sharing to robust Internet-based storage management to digital library applications.
Each of these applications imposes di erent requirements on the underlying peer-to-peer (P2P) infrastructure.
For example,  le-sharing applications need equality and keyword search capabilities, but do not need sophisticated fault-tolerance.
On the other hand, storage management requires only simple querying, but requires robust fault-tolerance.
Digital library applications require both complex queries, including equality, keyword search, and range queries, and sophisticated fault-tolerance.
Other applications, such as service discovery on the Grid, impose their own speci c requirements on the underlying P2P infrastructure.
One solution to this problem is to devise a special-purpose P2P infrastructure for each application.
Clearly, this is quite wasteful, and does not leverage the common capabilities required across many applications.
We propose a modular-ized P2P system architecture that cleanly separates di erent functional components, and allows us to reuse existing algorithms and tailor the system to the needs of the application.
Here, we focus on the storage management and indexing aspects of the architecture, with the following components:
 tivity among peers.
methods for reliably exchanging items between peers.
reliably even in the face of peer failures.
Copyright is held by the author/owner(s).
Figure 1: P2P Storage and Indexing Framework
 An additional bene t of the above framework is that we can use existing algorithms proposed in the literature for the various system components, and devise an overall system whose functionality is greater than any existing P2P system that we are aware of.
Speci cally, we can use the Chord [2,
 Manager, the PePeR [3] algorithms for the Data Store, and the Skip Graph [1] algorithms for the Content Router, to create a system that is fault-tolerant, supports both equality and range queries, provides logarithmic search performance, and supports possibly large sets of items per peer.
We are not aware of any other existing system that supports all of the above functionality in a P2P environment, even though each of the individual components by itself is not new.
Figure 1 shows the components of our storage and indexing framework.
We now provide an overview of these components and examples of their instantiation.
We do not discuss each component s exact API due to space limitations.
The primary goal of the Fault-Tolerant Torus (FTT) is to maintain the connectivity of the peers in the system.
Conceptually, the FTT maintains a mapping of regions in a torus to peers in the P2P system.
We say that a peer is responsible for the region(s) assigned to it.
The regions have to be contiguous, so all the space is covered, and non-overlapping, so any point on the torus is mapped to a single peer.
The exact torus space and the method of maintaining the mapping depends on the particular implementation of the FTT.
Example Figure 2 shows an example of a ring (torus of dimension 1) and a mapping of ranges (regions) to peers.
Peer p1 is responsible for the range (5, 10], p2 is responsible for the range (10, 15] and so on.
Each region of the ring Fault Tolerant TorusData StoreContent RouterReplication ManagerStorage and Indexing Framework388item t1 would be lost.
If the pair (6, t1) is replicated at another peer in the system, the data item can be recovered.
The Replication Manager can be instantiated using the techniques proposed in CFS [2], where a peer s items are replicated to its successors in the ring, or PAST [4].
The Content Router is responsible for e ciently routing messages to their destination in the P2P system.
This component implements the search primitives, such as equality and/or range queries.
The Content Router component could be instantiated using the Chord  nger tables, the CAN neighborhood table, or Skip Graphs [1].
One of the main applications of the framework is to tailor the system to the needs of the application.
For example, an Internet-based P2P  le sharing system could use the Fault-Tolerant Torus (for connectivity), the Data Store (for managing  les), and a somewhat sophisticated Content Router (for supporting equality lookups and keyword search queries), but has no need for the Replication Manager.
An Internet storage management system, on the other hand, needs a Replication Manager (for reliable storage), but only needs a simple Content Router (only equality name lookups), while the other components are the same as in the  le sharing system.
P2P digital library systems, however, need a very sophisticated Content Router (that supports equality, keyword search, and range queries), a robust Replication Manager and so on.
The main bene t of the framework is that it allows us to plug in the appropriate in-stantiation of the relevant components for each application, without having to redesign the entire system from scratch.
As described in the introduction, the other bene t of our framework is that it enables us to put together a system that has more functionality than any existing system, solely by using existing components.
Such a system is ideally suited for the digital library application described above.
We have proposed a modularized storage and indexing framework for P2P systems.
This framework allows the reuse of existing algorithms for various applications with di ering requirements.
The framework also allows us to put together novel systems using existing components.
We have a preliminary implementation of our framework, and are currently experimenting with di erent instantiations for digital library, resource discovery, and  le-sharing applications.
