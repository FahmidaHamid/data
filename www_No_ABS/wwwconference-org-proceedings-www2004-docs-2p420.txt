Managing electronic data becomes a more challenging task for end users as the personal data storage capacity increases.
There are many kinds of applications or software components to manage files in a local computer, but it is very difficult to organize personal documents in a consistent way and to search expected ones in a precise way.
When users store documents in their computers, they have to remember file names or locations to retrieve them.
A file-searching tool such as Windows Explorer usually relies on information about the physical features of the file (i.e. format, file name, path, size etc).
Although we remember the names and the paths of the files stored in our computer, it would be almost impossible to find the right ones without knowing their contents.
Suppose that we try to find the telephone number of a reasonable Italian restaurant, we will have to refer to the yellow page rather than the white page since the restaurant names and addresses are not useful enough.
The yellow page that contains richer metadata could provide richer and more useful information of the place we want to find.
* This study was supported by a grant of the Korea Health 21 R&D Project, Ministry of Health & Welfare, Republic of Korea(03-PJ1-PG10-51300-0003) Copyright is held by the author/owner(s).
for electronic documents.
The We have developed a system, named Ontalk that provides a semiautomatic metadata generator and an ontology-based search engine supports management and retrieval mechanism focusing on the contents of electronic documents.
Ontalk can create or import various ontologies in RDFS or OWL for describing the metadata.
In the following sections we present a brief overview of the system architecture.
system
 Figure 1 shows the architecture of the Ontalk system.
Ontalk consists of three major parts: User Interface Module, Storage Module, and Inference Module.
The Interface Module consists of five components: namely, the Ontology Browser, the Query Editor, the Ontology Creator, the Metadata Generator, and the Author Info Viewer.
The Ontology Browser and the Ontology Creator are much simpler than a full-fledged ontology development tool such as Prot g .
A user can import any external ontology created by any other ontology builder.
The Metadata Generator provides a semiautomatic mechanism to create the metadata summarizing the electronic document in question that may be in any format including text, image, and multimedia data.
Any metadata can be automatically extracted from file profiles such as the ones created by Windows File Property Descriptor if there exists such a thing and it is needed.
Each individual file or a part of file can be semantically described in XML metadata, and the metadata is then defined in terms of an ontology.
The Metadata Generator also provides a widget to flexibly create a metadata input template.
The Storage Module is a repository that stores the metadata files and ontologies.
The Inference Module based on Jena API provides an ontology-based search or inference mechanism for the most Figure 1.
Ontalk Architecture
 appropriate documents.
Our system that is built upon .NET technology is easily communicated with or flexibly plugged into many different programs.
We have developed an adapter to communicate between .NET components and Jena[1].
Ontalk uses the three types of ontologies: namely, document schema ontology, document type ontology, and domain (or user) ontology.
The document Schema and the Document Type ontologies are built in the system.
On the other hand, the domain ontology can be created and modified by users.
Figure 2 shows the relationship among ontologies.
That is, an instance level metadata that is generated by a user is linked to the document type and the specific domain ontology.
Figure 2.
Ontologies of Ontalk Figure 3 shows the Document Instance Template created by the Metadata Generator.
It gathers metadata semi-automatically from a document that is located on the Web or in the local computer.
It allows users to use other functional interface to define a metadata.
For example, the author and contributor, we can use the Author info Viewer which defines name information regularly.
information about input to Figure 4.
Results
 After defining the ontologies and annotating the metadata of the document, we can query for information.
We use the Jena toolkit to query in the KB.
In addition to keyword-based retrieval mechanism based the Title and the Author, the system can use more powerful search option including the subject, the type etc.
The subject option which describes [dc:subject] in Dublin Core Metadata, related to a specific domain ontology in our system.
The Type option which describes [dc:type] in the document type ontology concerns a document type.
The system can create and use any kinds of search constraints represented in the form of metadata in order to return more precise results.
Using the ontology-based approach to document retrieval, we can make very rich expression for inference.
For example, a query would be  Find all the documents whose types are workshop papers and whose subjects are markup languages.  After finding the results, we can browser the results with the Listview of the system.
In order to view the content of the document, the user can check the metadata before opening the file, which is illustrated in Figure 3.
Ontalk is a personalized document management system using ontology-based It provides a semiautomatic metadata generator and an ontology-based search engine for electronic documents.
technologies.
