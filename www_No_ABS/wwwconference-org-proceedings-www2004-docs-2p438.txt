Web services use existing Internet communications and data exchange standards to provide applications with a web-based application-programming interface.
As web service technology matures there is considerable interest in exploiting workflow techniques to coordinate web services.
Workflow techniques form an important part of in silico experimentation within the bioinformatics domain and potentially allow the e-scientists to describe and enact their experimental processes in a structured, repeatable and verifiable way.
These users are scientists and not information technology experts; they require workflow solutions that have a low cost of entry for service users and providers, including ease of use and open source tool support.
As a result, the EPSRC funded myGrid [2] project has, in collaboration with the European Bioinformatics Institute and the Human Genome Mapping Project, developed a graphical toolset and workflow enactment engine which uses its own high Copyright is held by the author/owner(s).
Tim Carver MRC Rosalind Franklin Centre for Genomics Research level representation of a process flow, Simple conceptual unified flow language (Scufl).
In Scufl a workflow is a network of processors and links.
It is supported by the Freefluo [1] workflow enactment engine, and the Taverna workbench [3] for editing and testing Scufl workflows.
The Taverna workbench exploits the web in two ways: keeping Scufl simple by dynamically retrieving detail from URIs, (e.g.
URIs for WSDL interfaces descriptions) when required, and by scavenging the web to populate the list of potential processors that its user can incorporate into a workflow.
The Scufl language is primarily aimed at users who currently use web forms or scripting languages to interact with web resources.
They want to develop workflows in an exploratory fashion, and to easily share such workflows with their colleagues.
The Scufl language aims to be practical.
It recognizes that there is, and will continue to be, significant development in computer accessible web resources in general and web services in particular.
As a result, the language is designed with extensibility mechanisms so that it can be extended to incorporate new developments, or specialized to the de-facto standards of a user community.
The principles behind the Scufl language are captured in the origin of the acronym: simple, conceptual, unified, flow language.
Simple.
The language aims to be as simple as possible.
The target user communities have domain expertise and domain problems to investigate; their interest in programming is secondary.
Conceptual.
A Scufl workflow should match the users  conceptual model of their problem.
Implementation detail should be kept to a minimum, by exploiting techniques such as introspection over service descriptions.
Unified.
Coordinating web services was the initial motivation.
However users want to treat these and other services, which are essentially the same from their perspective (e.g.
grid services, local applications), in a unified manner.
Flow Language.
The basic conceptual model is of a network of processing activities linked by data and control flows.
The core of a Scufl workflow is a network of processors (nodes) connected by data links.
In addition to these two entity types, there can also be input and output nodes to represent to overall workflow interface, and coordination constraints for relationships between processors that are not captured by data links.
A Scufl model consists of a set of instances of these types.
Each instance has a unique name within the workflow.
Figure 1 is a simple example, from the Taverna workbench, of a Scufl workflow showing one input, three processors and two outputs, linked by six data links.
The Taverna workbench, with its embedded Freefluo enactment engine, gives e-scientists an environment for using the web from a perspective of services and compositions of services (workflows).
They can browse service resources available on the web, construct workflows combining services, and test them out.
In this way, Scufl has proved excellent for the exploratory, information gathering workflows that are its prime concern.
As users have got past the novelty of testing out Taverna and Freefluo, they have started to use them in their day-to-day work.
An early request, now incorporated, was for much better status information and recovery support; vital if your workflow takes a few hours to run and the web resources used are not 100% reliable.
The ability of Scufl to match its users  conceptual model for expressing their problem is based on the extensibility gained through the declaration of new Scufl processor types.
The utility of this approach has been shown by the development of processor types for specific types of bioinformatics resources, and ongoing extensions implemented in terms of further new processor types.
The use of workflow techniques to coordinate web services for scientific users is an active research area [4].
Scufl s niche in this community is as a user-driven language that is simple, flexible, based on web services, and supported by open source tools.
like

 Thanks are due to the Taverna and Freefluo user communities.
The myGrid project is supported by the UK e-Science programme (EPSRC grant GR/R67743).
The authors would to acknowledge the myGrid team (past and present).
Tom Oinn, EMBL European Bioinformatics Institute, Wellcome Trust Genome Campus, Hinxton, Essex, CB10 1SD, UK, Tel.
+44 (0)1223 494 677, tmo@ebi.ac.uk.
Matthew Addis, Justin Ferris and Darren Marvin, IT Innovation Centre, 2 Venture Road, Chilworth Science Park, Southampton, UK, Tel.
+44 (0)23 80 jf, djm}@it-innovation.soton.ac.uk.
Mark 760834, {mja, Greenwood and Carole Goble, Department of Computer Science, University of Manchester, Oxford Road, Manchester, UK, Tel.
+44 (0)161 275 6186, {markg,carole}@cs.man.ac.uk.
