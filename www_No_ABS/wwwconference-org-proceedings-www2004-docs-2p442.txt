Semantic Web is highly distributed, and different parties may have different understandings for the same concept.
One important concept in SW services is ontology.
Ontology is the basis for constructing common understand through explicitely de ned relations.
RDFS and DAML+OIL languages can be used to de ne the ontology.
Another important concept in SW services is the semantic markup of services.
Semantic markup of the content and capability of Web services   what a service does, how to use it, what its effect will be   will enable easy automation of a variety of reasoning tasks, currently performed manually by human beings, or through arduous hand-coding that enables subsequent automation.
DAML-S [1] is such a semantic markup language for Web services.
SW services may have intricate data state, complex process behavior and concurrent interactions.
The design of such SW service systems requires precise and powerful modelling techniques to capture not only the ontology domain properties but also the services  process behavior and functionalities.
It is desired to have a powerful formal notation to precisely design the Web system.
Timed Communicating Object Z (TCOZ) [4] is a Formal Speci cation language which builds on the strengths of Object-Z in mod-elling complex data and state with strength of Timed CSP in mod-elling real-time concurrency.
We believe that TCOZ as a high level Copyright is held by the author/owner(s).
Hai Wang Medical Informatics Group Department of Computer Science University of Manchester hwang@cs.man.ac.uk design technique can contribute to the semantic-web-based system development in many ways.
In support of this claim, we conduct a SW service case study, i.e., the online talk discovery system, and apply TCOZ to the design stage to demonstrate how TCOZ can be used as high level design language to specify SW services.
The following characteristics of many Web services make TCOZ a good candidate to design such a system.
control aspects.
An integrated formal modelling language, like TCOZ, has the strength to model such systems.
rently.
TCOZ has the multithreaded capabilities to capture that.
sub-services may be provided by other agents, which have their own thread of control.
It can be modelled by the active objects feature in TCOZ.
and asynchronous communications.
It can be speci ed with various TCOZ communication interfaces   channels, sensors and actuators.
requirements.
TCOZ can capture the real-time requirement well.
Furthermore, the paper presents the development of the systematic translation rules and tools to automatically extract the Web ontology and semantic markup for the SW services from the formal TCOZ design model.
In this section, an online talk discovery system is used as an example to demonstrate how TCOZ notation can be applied to the Semantic Web services development.
The talk discovery system is a Web portal which can provide not only the talk s information corresponding to the user s pro le in terms of his interest and location constraints, but also can further  lter the IT related talks based on information about the user s personal schedule, etc.
The completed functionality of the ITTALKS system can be found at http://www.ittalks.org/jsp/Controller.jsp.
The system involves four different intelligent agents which communicate interactively.
They are the user s Calendar agent, MapQuest agent, user s personal agent and the talk discovery agent.
Due to the space limitation, we only present partial design model for the Calendar agent.
The Calendar agent maintains a schedule for each eligible user and supplies some related services.
demonstrate the approach rather than providing the complete XSL program design.
In this section, we will demonstrate the development of another XSL program to automatically extract DAML-S information from TCOZ formal models.
The semantic markup for the system can be resolved from the TCOZ design documents also.
The following are some of the transaction rules we developed.
Figure 1: TCOZ DAML+OIL/DAML-S projection   Each operation in TCOZ is modelled as a process (AtomicProcess or Compos-Calendar timetable : (PID   DateTime)   Status upd, checktm : chan check : chan Upd  (timetable) id?
: PID; t?
: DateTime; s?
: Status timetable(cid:48) = timetable   {(id?, t?, s?)}
  upd?
(id, t, s)   check!id   (check?
false   SKIP 2 check?
true   Upd) Update>= [id : PID; t : DateTime; s : Status] Check Status>= [id : PID; t : DateTime]   checktm?
(id, t)   check!id   (check?
false   SKIP 2 check?
true   checktm!timetable(id, t)   Skip) Update is used to update the timetable.
The operation Check Status is used to check whether a person is available or not for a particular time slot.
Designing a clear and consistent ontology is not a trivial job.
It is useful to have some tool support in designing the ontology.
In this section, we will demonstrate the development of an XSL program to automatically extract the ontology related domain properties from the static aspects of TCOZ formal models (encoded in ZML format [5]).
The ontology for the system can be resolved readily from the static parts of TCOZ design documents.
In the next section, we will demonstrate tools to automatically extract the semantic markup for services from dynamic aspects of TCOZ formal models.
The main process and techniques for the translation are depicted by Figure 1.
A set of translation rules translating from TCOZ model (in ZML) to DAML+OIL ontology is developed.
The following are some of the translation rules.
  The given types in the TCOZ model are directly translated into DAML+OIL classes.
  The functions and relations in TCOZ are translated to DAML+OIL ontology property with different domain, range and cardinality constrains.
  The Z state schemas are translated into a DAML+OIL classes.
Their attributes are translated into DAML+OIL properties with the schema name as domain DAML+OIL class and the Z type declaration as range DAML+OIL class.
iteProcess) in DAML-S.
  In the case that an operation invokes no other operations, the operation is translated as an AtomicProcess.
A precondition appearing in a TCOZ operation schema de nition is modelled as precondition in the respective service process.
A postcondition appearing in a TCOZ operation schema de nition is modelled as effect in the respective service process.
  An input appearing in a TCOZ operation schema de nition is modelled as input in the respective service process.
An output appearing in a TCOZ operation schema de nition is modelled as output in the respective service process.
  In the case that an operation calls other operations, the operation is translated as a composite process.
  Each TCOZ process primitive is translated into the proper DAML-S composite process.
Other translation rules for process primitive are omitted due to the limited space.
In this paper, we demonstrate that TCOZ can be used a high level design language for modeling the SW services ontology and functionalities.
Another major contribution of this paper is that it develops systematic transformation rules and tools which can automatically project TCOZ models to DAML+OIL ontology and DAML-S semantic markup.
From a completely different direction, we also recently investigated how RDF and DAML+OIL can be used to build a Semantic Web environment for supporting, extending and integrating various formal speci cation languages [3].
In summary, there is a clear synergy between Semantic Web and Formal Methods.
The investigation between these two paradigms will lead great bene ts for both areas.
We hope this paper has showed one strong link between the two.
The full technical details can be found in [2].
