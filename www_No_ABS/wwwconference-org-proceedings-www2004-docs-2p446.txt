Recent developments have seen more interactive media among Web resources, allowing interactions between users and provided services.
Currently, there is a substantial shift of the Web from a document-oriented to a services-oriented environment, allowing also services to interact with other services   bundled in the Web Services Framework WSF [5].
It provides a framework based on description languages to describe services, a publication and discovery facility, and protocols allowing services to be used.
As soon as this technology becomes mature it will impact teaching and learning environments (TLEs).
Service-oriented Copyright is held by the author/owner(s).
Teaching and learning environments are usually not monolithic.
Therefore, the assembly and integration of components (or objects as they are called in LOM) and services is a central task.
The LTSA has been developed to provide a framework for the development, evaluation and discovery of learning technology systems.
It provides a basic architecture consisting of process (e.g.
coach, learner entity) and storage components (learning resources, learner records) and interactions between them.
The LTSA exhibits clearly the characteristics of a services-oriented architecture SOA.
In our terminology, both LTSA components and LTSA storage elements are learning objects.
They are defined in terms of interactions with their environment.
In this type of architecture the components can be provided as services.
The LTSA defines a reference architecture for TLEs that provides a first tool in the top-down architectural design of TLEs.
Learning objects can be described in terms of two different aspects: educational metadata   the content perspective   and interface definitions   the integration and assembly perspective.
The second aspect arises if learning objects are considered as interacting computational entities.
An interface description defines how to access the services provided by the object and how to interact with the object.
Our aim here is to embed learning objects into a Web services architecture.
Consequently, interfaces for learning objects have to be described in terms of WSF notations.
The WSF provides a description language: the Web Services Description Language WSDL.
This notation provides features to express the functionality of services and the location and the protocols supported by the service.
LTSA components can be defined in terms of the WSDL.
LOM annotations can contain technical aspects, but do not give any guideline on how to assemble service objects.
The LTSA top-level outline of a services-oriented provides a architecture for TLEs.
However, the development of advanced TLEs, a more fine-granular architectural support than provided by the LTSA is needed.
Web-based systems often follow common recurring architectural styles   called patterns [3].
Patterns provide solutions to reoccurring problems that occur in object-oriented software development in order to make these object architectures reusable.
The Model-View-Controller MVC paradigm, although developed independently, qualifies as a design pattern.
The MVC defines an architectural pattern, which supports separation of concerns, focusing on the functionality of components in user interfaces.
Using such a pattern shields the developer from architectural design decisions.
The MVC is important in the educational context where the user is central and needs to be integrated in complex learning processes supported by the architecture.
Since 1996 we have been involved in the development of Web-based TLEs.
Recently, we started to convert the architecture of the IDLE system [4] to a Web services-based platform.
The architecture of the IDLE system can be presented in three tiers interface, server, and database backend.
However, since several components fall into each tier, a refined architecture is necessary.
to support in order first In terms of the LTSA, we can associate the IDLE components to the LTSA component notions.
Examples are the evaluation or delivery components.
However, it becomes clear that the LTSA is only a reference architecture, identifying only component clusters.
A more fine-granular approach to architectural design is required that gives a developer more support.
The MVC paradigm forms the central pattern of our system.
An extension we have made to the MVC pattern in our prototype is to introduce a navigational layer to address Web navigation issues.
We have identified TLE-specific patterns, i.e. individual patterns relevant in this context of Web services-based TLEs such as IDLE.
We introduce some patterns that explain structures and interactions resulting from the LTSA and the MVC.
  The factory pattern is a creational pattern that provides an interface for creating related or dependent objects without specifying their concrete classes.
The factory pattern can be applied for manipulating a variety of related persistent stores such as the learners records or adding/retrieving learning object to/from a databases.
The proxy pattern is a structural pattern that provides a placeholder for another object to control access to it.
The implementation of a learner entity can be based on the proxy pattern to access generic learning components across the Internet using Web services toolkits such as Apache Axis.
The serializer pattern allows a developer to efficiently stream objects into data structures as well as create objects from such data structures.
The serializer pattern matches requirements of the coach and learner entity component to maintain state over time when the learner wishes to pause the learning process.
   
Our work was supported by the Irish Research Council for Science, Engineering and Technology.
