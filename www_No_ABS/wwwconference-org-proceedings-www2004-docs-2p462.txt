The service provider and their customers often negotiate utility based Service Level Agreements (SLAs) to determine the cost and penalty based on the achieved performance level.
The service provider need to manage its resource to maximize its pro ts.
This paper designs a resource allocation scheduler for Web service environments.
The scheduling policy is designed to maximize the revenue while balancing the cost (or energy) of using the resources.
The overall pro t (utility) includes the revenues and penalties incurred when Quality of Service guarantees are satis ed or violated.
The revenue depends on the QoS levels in a discrete fashion.
We show that the overall problem is NP-hard.
We further develop meta-heuristic solutions based on the tabu-search algorithm.
The neighborhood exploration is based on a  xed-point iteration, which requires solving a new network allocation  ow problem.
Experimental results are presented to show the bene ts of our approach.
We consider the service system to be a distributed computer system consisting of M heterogeneous clusters of servers hosting N different e-commerce web sites.
Each cluster is built from a number of homogeneous machines.
There are totally K classes of request streams.
Each class of request can be served by a collection Copyright is held by the author/owner(s).
of servers.
For simplicity assume that each class of request is associated with a single web site.
Let Ai,k be the indicator function that assigns requests (and sites) to clusters: Ai,k equals 1 if class k request can be executed by server i, 0 otherwise.
The architecture comprises of a request dispatcher in front of the clusters to assign the incoming requests to individual servers in the cluster.
The controller can also establish the scheduling policy at each server.
Each server has a Generalized Processor Sharing (GPS) scheduler.
The allocation weights for each class can be set by the controller.
The controller can also turn OFF and ON individual server inside a clusters in order to reduce the overall cost.
For each class k requests, a step-wise utility function is de ned to specify the per request revenue (or penalty) incurred when the corresponding average response time assumes a given value.
Figure 1 shows, as an example, the plot of an utility function.
We observe the discontinuity in the function in Figure 1.
As we will discuss in the next section, this discontinuity in the cost function and the discrete nature of the problem make the optimization problem NP-hard.
In the literature the load balancing problem with SLA pro ts was faced considering always continuous convex and differentiable cost functions [4].
Considering step-wise functions of the mean response time is more intuitive from the customer point of view and are currently adopted [2].
Each data center is modeled by a queueing network composed of a set of multi-class single-server queues and a multi-class in nite-server queues.
The former represents the collection of servers within heterogeneous clusters.
The in nite-server queues represent the client-based delays, or think times, between the server completion of one request and the arrival of the subsequent request within a Web session.
User sessions begin with a class k request arriving to the data center from an exogenous source with rate  k.
Figure 1: Utility Function
 Variable Description Mi yi Ci  k  i,k  i,m,k (cid:80)yi Number of homogeneous server within cluster i Number of cluster i servers ON Capacity of a single server in cluster i Service rate for class k jobs at a server of capacity 1 Load at cluster i for class k jobs Load at server m in cluster i for class k jobs ( Scheduling GPS parameter for class k jobs at server m within cluster i Response time for class k jobs at server m in cluster i Utility step-wise function for class k jobs Number of thresholds for utility functions Cost associated with turning on a server in cluster i m=1  i,m,k =  i,k)  i,m,k Ri,m,k Uk(R)
 ci bility 1  (cid:80)K (cid:80)K Upon completion the request either returns to the system as a class k(cid:48) request with probability pk,k(cid:48) or it completes with proba-l=1 pk,l.
Let  k denote the aggregate rate of arrivals for class k requests  k = k(cid:48)=1  k(cid:48) pk(cid:48),k +  k.
In next sections the notation reported in Table 2 will be adopted.
In the following, we will assume that the  rst K   1 job classes are associated with SLA, and class K is the best effort class.
The analysis of multi-class queueing system is notoriously dif- cult.
We use the GPS bounding technique in [5] to approximate the queueing system.
In the approximation each multi-class single-server queue associated with server m in cluster i is decomposed into multiple single-class single-server queues with capacity greater than or equal to Ci i,m,k.
The response times evaluated in the isolated per-class queues are then upper bounds on the corresponding measures in the original system.
Given the system model in Section 2 we formulate the cost optimization problem below.
(cid:33) Uk(Ri,m,k) i,m,k   ciyi (cid:195) M(cid:88) yi(cid:88) K 1(cid:88) M(cid:88) k=1 max i=1 m=1  i,k =  k i=1  i,k = 0  i,k   0 K 1(cid:88) k=1 if Ai,k = 0 if Ai,k = 1   yi > 0  i,m,k   1 Ri,m,k =
 Ci k i,m,k    i,m,k ; yi > 0; (1) (2) (3) (4) (5) (6)  i,m,k < Ci k i,m,k yi   [0, Mi]; yi integral Note that in autonomic computing systems the exogenous arrival usually is a prediction of the arrival rate for the current inter-sched-uler period.
Equations (3-4) assign sites requests to clusters according to Ai,k constrains and the status of the cluster (servers ON or OFF).
Here yi,  i,m,k and  i,m,k are decision variables and overall (cid:80)M we have a Mixed Integer Programming problem.
It can be shown that, if the number of server ON and the load at each server are  xed, then in order to maximize the objective function one can i=1 yi multiple maximize revenues at single servers obtaining choice knapsack (MKP) sub-problems [1].
Vice versa, if the number of server ON and the scheduling policy at each server are  xed, then in order to maximize the objective function one can establish the load at each server and solve K   1 NP-hard network  ow allocation sub-problems.
The overall problem is NP-hard and is solved by implementing a tabu-search algorithm.
The evaluation of the neighborhood is based on a  xed point iteration of MKP and network  ow resource allocation problems, whose solution is obtained by applying the HEU heuristic [1] and an ad-hoc local search algorithm.
In order to evaluate the effectiveness of our approach, several tests were performed.
Data centers with 200 servers and 100 job classes have been considered.
Service times were random generated and the utilization of data center resources varied between
 by comparing our results with results of an exhaustive search algorithm.
Results are encouraging since the average error was about
 literature which adopt utilization thresholds in resource allocation control [3] the number of servers that has to be turned ON is evaluated as the number of servers that keeps the utilization of the data center equals to 0.6 and the proportional assignment schema is applied for routing and scheduling problems [4].
Considering this scenario our approach improves SLA revenues of one order of magnitude since for the same load our controller is able to reduce the number of servers ON.
Furthermore solutions show that in general the load is not balanced among all of the servers of a cluster, as in the proportional assignment schema.
We proposed an allocation controller for web data center environments which maximizes the pro ts associated with multi-class Service Levels Agreements.
Experimental results show that revenues that can be obtained with a proportional assignment schema can be signi cantly improved.
Future work will consider the problem of maximization of SLA pro ts in multi-tiers systems and the model will be extended in order to include in the cost function the tail distribution of response times.
