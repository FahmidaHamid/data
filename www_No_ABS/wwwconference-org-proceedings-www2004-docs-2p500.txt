In order to enable widespread usability for the Semantic Web there is a need to bootstrap large, rich and up-to-date domain ontologies that organizes most relevant concepts, their relationships and instances.
In this paper, we present automated techniques for bootstrapping and populating specialized domain ontologies by organizing and mining a set of relevant overlapping taxonomy-directed Web sites provided by the user.
A Web site is said to be  taxonomy-directed  if it contains at least one taxonomy for organizing its key concepts and it presents the instances belonging to each concept in a regular fashion.
Notice that, neither the presentation of the taxonomy among di erent pages, nor the presentation of instances among for di erent concepts need to be regular for a Web site to be classi ed as  taxonomy-directed .
Copyright is held by the author/owner(s).
Almost all scienti c, news,  nancial, travel, shopping and search/community portals that we are aware of are indeed  taxonomy directed .
The user of the OntoMiner system only need to provide the system with the URLs of the Home Pages of 10 to 15 taxonomy-directed overlapping domain speci c Web sites that characterizes her domain of interest.
A pair of Web sites are said to be overlapping if their taxonomies share some concept labels.
Next, OntoMiner system detects and utilizes the HTML regularities within every Web document and turns them into hierarchical semantic structures encoded as XML by utilizing a hierarchical partition algorithm.
On-toMiner uses tree-mining algorithms to identify most important key domain concepts and relationships among them selected from within the directories of the Home Pages.
On-toMiner proceeds with expanding the mined concept taxonomy with sub-concepts by selectively crawling through the links corresponding to key concepts.
OntoMiner also has algorithms that can identify the logical regions within Web documents that contains links to instance pages.
A key characteristic of OntoMiner is that, unlike the early pioneering systems described in [1, 2, 3] which attempt to extract data values alone, OntoMiner extracts the labels corresponding to categories and attribute names along with their data values and organizes them into an ontology.
The architecture of OntoMiner is as shown in Figure 1.
As illustrated in the  gure, OntoMiner analyzes a collection of overlapping domain speci c Web sites and generates a taxonomy of important concepts and their associated instances.
As the Crawler fetches the Web pages, they are fed to Semantic Partitioner.
Semantic Partitioner examines the structure of the HTML Web page and converts them into semantic trees inferring the hierarchy presented in the visual presentation among various labels in the HTML Web page.
Taxonomy Miner examines the semantic trees generated by Semantic Partitioner,  nds the frequent labels and groups them into concepts C. Next, it and mines the taxonomy of concepts, T using frequent tree mining algorithms.
For each concept in the mined taxonomy, Instance Miner identi es its potential instance Web pages and mines instances, I consisting of labeled and unlabeled attributes and their values.
It extracts the attribute labels A and their values by working with two documents, aligning the content in them and extracting the dissimilar content.
of the Semantic Partitioner, showing the document object model of the html page and the  nal hierarchical tree; (c) A fragment of the mined taxonomy of concepts from a collection of News Web sites.
uses taxonomy mining algorithm on these trees to mine the taxonomy of important concepts.
The taxonomy mining algorithm uses frequent tree pattern mining techniques to mine is-a relationships.
Figure 2c shows a fragment of the mined taxonomy from a collection of News Web sites.
We present algorithms to logically partition a Web page and infer the hierarchy among the labels in the Web page, mine the taxonomy of important concepts from overlapping domain speci c Web sites, extract attributed instances and their values corresponding to each concept in the taxonomy.
OntoMiner only requires a collection of domain speci c sites in building the taxonomy of concepts as it uses frequency based techniques to mine the is-a relationships.
OntoMiner can  nd complex semi-structured instances for attributed concepts and can extract labels for attributes whenever they are available.
Experimental results for semantic partitioning, taxonomy mining and instance extraction can be found at http://www.public.asu.edu/ snagaraj/OntoMiner.
Some of the future directions for our work include investigating techniques that combine syntactic as well as semantic regularitiesto repair hierarchical partitions with bootstrapped ontologies to yield higher precision and recall.
