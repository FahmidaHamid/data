Community Question Answering (CQA) services are Internet services that enable users to ask and answer questions, as well as to search through historical question-answer pairs.
Examples of such community-driven knowledge services include Yahoo!
Answers (answers.yahoo.com), Naver (www.naver.com), Baidu Zhi-dao (zhidao.baidu.com), and WikiAnswers (wiki.answers.com).
CQA services can directly return answers to the query questions of users, instead of a long list of ranked URLs, thus providing an effective alterative to web search [1, 19].
Question retrieval can also be considered as an alternative solution to the traditional TREC Question Answering (QA) task.
In TREC QA, the research has Copyright is held by the International World Wide Web Conference Committee (IW3C2).
Distribution of these papers is limited to classroom use, and personal use by others.
largely focused on extracting concise answers to questions of a limited type, e.g., factoid questions.
In contrast, the answers to questions in a CQA archive are generated by users, and these real-world questions are usually more complex and often presented in an informal way.
Hence, the TREC QA task of extracting a correct answer is transformed to a Question retrieval task [18, 19].
Although CQA services emerged only recently1, they have built up very large archives of historical questions and their answers.
Retrieving relevant historical questions that best match a user s query question is an essential component of a CQA service.
Additionally, when a user asks a new question in a CQA service, the service would typically search automatically for historical question-answer pairs that match the new question.
If good matches are found, the lag time incurred by waiting for a human to respond can be avoided, thus improving user satisfaction.
Work on question retrieval in CQA data [3, 7, 9, 10, 19], employs different retrieval models, including the vector space model [7, 9,
 translation model [2, 10, 14, 19].
The experimental studies in previous work consistently show that the translation model usually achieves the best performance [10, 19], or is able to improve other methods [7].
Other recent proposals for question retrieval include the use of learning-to-rank techniques [3], and syntactic structures of questions [18].
However, it is not clear of whether they are competitive with other methods, such as the language model and the translation model, due to a lack of empirical comparisons.
A distinctive feature of question-answer archives in CAQ services is that CQA services usually organize questions into a hierarchy of categories.
For example, the subcategory  Health.Dental  is a child category of  Health  in Yahoo!
Answers.
When a user asks a question, the user is typically required to choose a category label for the question from a prede ned hierarchy of categories.
Hence, each question in a CQA archive has a category label.
The questions in the same category or subcategory usually relate to the same general topic.
For example, the questions in the subcategory  Travel.Europe.Denmark  mainly relate to travel to or in the country of Denmark.
The utility of category information in question retrieval can be exempli ed by the following query question (q):  can you recommend sightseeing opportunities for senior citizens in Boston?  The user is interested in sightseeing speci cally in Boston, not in other places.
Hence, the question (d)  can you recommend sightseeing
 user s question (q), although the two questions are syntactically very similar.
If one could establish a connection between q and the category  Travel.United States.Boston,  the ranking of questions in that category could be promoted, thus perhaps improving the question retrieval performance.
Although it appears natural to attempt to exploit the available category information for question retrieval, we are aware of only one published study [5] on utilizing category information for question retrieval.
That study considers two approaches to using categories for enhancing the performance of language-model based question retrieval.
The  rst approach employs classi ers to compute the probability of a query question belonging to different categories; this probability is then used to adjust the ranking returned by the language model.
However, the experimental results [5] show that it can improve the performance of the language model only slightly.
The second approach is based on a two-level smoothing model.
A category language model is computed and then smoothed with the whole question collection.
The question language model is subsequently smoothed with the category model.
The study offers a theoretical justi cation for the approach, which is also shown to signi cantly improve the performance of the language model for question retrieval.
However, this second approach of utilizing category information is tightly coupled with the language model and is not applicable to other question retrieval models.
The empirical studies [5] provide evidence that category information can be utilized to improve the performance of the language model for question retrieval.
This suggests an open problem: how ca category information be utilized effectively in the context of other popular question retrieval models.
In this paper, we present a new and general approach to exploiting category information that can be applied to any question retrieval model.
The proposed method is called the category enhanced retrieval model.
The intuition behind is that the more related a category is to a query q, the more likely it is that the category contains questions relevant to q.
The model ranks a historical question d based on an interpolation of two relevance scores: the one is a global relevance score between query q and the category containing d, and the other is a local relevance score between query q and question d.
A subtle feature of this approach is that the words play different roles in computing global relevance and local relevance.
For example, in the example query q, the word  Boston  is discriminative when computing the global relevance scores across categories because it makes the category  Travel.United States.Boston  highly relevant to the query; however, it is not effective at distinguishing one question from another within  Travel.United States.Boston,  since many questions in that category contain this word.
The global relevance score is computed with regard to the entire collection of questions while the local relevance score is computed with regard to the category of a historical question.
The approach can be combined with any existing question retrieval approach.
We combine it with the vector space model [10,
 model [2, 10, 14], and the translation-based language model [19], one of the state-of-the-art methods.
The paper s contributions are twofold.
First, we propose a simple yet effective approach to utilizing category information to enhance the performance of question retrieval.
This approach combines the global relevance (the relevance of a query to a category) and the local relevance (the relevance of a query to a question in the category).
We also exploit several methods to compute global and local relevance.
The approach combines well with existing question retrieval methods since it can use any question retrieval method to compute the local relevance.
Second, we conduct extensive experiments on a data set extracted from Yahoo!
Answers consisting of more than 3 million questions.
We  nd that the proposed technique using category information is capable of signi cantly improving existing question retrieval models, including one of the state-of-the-art models [19].
We also empirically evaluate the performance of the alternative methods of computing global relevance.
Finally, we compare with the two existing approaches [5] to exploiting category information.
The paper is organized as follows.
Section 2 covers existing question retrieval models.
Section 3 details the proposed techniques.
Section 4 covers the experimental study.
Section 5 reviews related work.
Section 6 concludes and offers research directions.
We cover the retrieval models that we use for question retrieval.
The Vector Space Model has been used widely in question retrieval [10,11].
We consider a popular variation of this model [21]: Given a query q and a question d, the ranking score Sq,d of the question d can be computed as follows: Sq,d = d wq,twd,t WqWd t q (cid:80) (cid:115)(cid:88) (cid:84)
 ft , where (cid:115)(cid:88) wq,t = ln(1 + ), wd,t = 1 + ln(tft,d) (1) Wq = w2 q,t, Wd = w2 d,t t t Here N is the number of questions in the whole collection, ft is the number of questions containing the term t, and tft,d is the frequency of term t in d. The term Wq can be neglected as it is a constant for a given query and does not affect the rankings of historical questions.
Note that wq,t captures the IDF (inverse document frequency) of term t in the collection, and wd,t captures the TF (term frequency) of term t in d.
While the Vector Space Model favors short questions, the Okapi BM25 Model [15] takes into account the question length to overcome this problem.
The Okapi Model is used for question retrieval by Jeon et al. [10].
Given a query q and a question d, the ranking score Sq,d is computed as follows: Sq,d = wq,twd,t, where (cid:88) (cid:84) N   ft + 0.5 d t q wq,t = ln( wd,t = ft + 0.5 (k1 + 1)tft,d Kd + tft,d Kd = k1((1   b) + b Wd
 ) ) (k3 + 1)tft,q k3 + tft,q (2) Here N is the number of questions in the collection; ft is the number of questions containing the term t; tft,d is the frequency of term t in d; k1, b, and k3 are parameters that are set to 1.2, 0.75, and  , respectively, thus following Robertson et al. [15] (the expression (k3+1)tft,q is then equivalent to tft,q ); and Wd is the k3+tft,q question length of d and WA is the average question length in the collection.
The Language Model is used in previous work [5,7,10] for question retrieval.
The basic idea of the Language Model is to estimate a language model for each question, and then rank questions by the likelihood of the query according to the estimated model for questions.
We use Jelinek-Mercer smoothing [20].
Given a query q and a question d, the ranking score Sq,d is computed as follows: ((1    )Pml(t|d) +  Pml(t|Coll)), where (cid:89) Sq,d = t q Pml(t|d) = tft,d(cid:80) (cid:80) t(cid:48) d tft(cid:48),d Pml(t|Coll) = tft,Coll t(cid:48) Coll tft(cid:48),Coll (3) Here Pml(t|d) is the maximum likelihood estimate of word t in d; Pml(t|Coll) is the maximum likelihood estimate of word t in the collection Coll; and   is the smoothing parameter.
Previous work [2,7,11,14,19] consistently reports that the Translation Model yields superior performance for question retrieval.
The Translation Model exploits word translation probabilities in the language modeling framework.
We follow the translation model approach of Jeon et al. [10].
Given a query q and a question d, the ranking score Sq,d is computed as follows: Sq,d = ((1    ) T (t|w)Pml(w|d) +  Pml(t|Coll)), (cid:88) w d (cid:89) t q (4) where Pml(w|d) and Pml(t|Coll) can be computed similarly as in Equation 3 for the Language Model and T (t|w) denotes the probability that word w is the translation of word t. Jeon et al. [10] assume that the probability of self-translation is 1, meaning that T (w|w) = 1.
A recent approach [19] to question retrieval, denoted as TRLM, combines the Language Model and the Translation Model.
It is shown [19] that this model gains better performance than both the Language Model and the Translation Model.
Given a query q and a question d, the ranking score Sq,d is computed as follows: Sq,d = ((1    )(  T (t|w)Pml(w|d) + (1    )Pml(t|d)) +  Pml(t|Coll)), (5) (cid:89) t q (cid:88) w d where parameter   controls the translation component s impact.
Each question in Yahoo!
Answers belongs to a unique leaf category.
We present an approach to exploiting such category information to enhance question retrieval.
This approach can be easily applied to existing question retrieval models.
Intuitively, the more related a category is to a query q, the more likely it is that the category contains questions relevant to q.
Hence, we incorporate the relevance of the query to the category of a historical question into the question retrieval model.
The idea is to compute the ranking score of a historical question d based on an interpolation of two relevance scores: one is a global relevance score between query q and the category cat(d) that contains d, and the other is a local relevance score between q and d considering only cat(d).
Various retrieval models can be used to compute the two scores, and the two scores may have very different domain ranges.
We therefore normalize them into the same range before we employ a linear interpolation to combine them.
The  nal ranking score RSq,d is then computed as follows: RSq,d = (1    )N (Sq,d) +  N (Sq,cat(d)) (6) where Sq,d is the local relevance score, cat(d) represents the category containing question d, Sq,cat(d) is the global relevance score,   controls the linear interpolation, and N () is the normalization function for the local and global relevance scores (discuss in Section 4.1).
The intuition behind the approach is simple: the global relevance is employed to differentiate the relevancies of different categories to the query, while the local relevance is mainly used to differentiate the relevancies of questions within the same category to the query.
However, subtle issues exist when applying the existing question retrieval methods to compute the global and local relevance scores, one of which is considered next.
As the global relevance can distinguish questions across categories, we would like the local relevance to effectively rank questions within a speci c category.
We observe that some words may be important the global ranking of questions across categories, while they are unimportant when ranking questions within a speci c category.
For example, the word  Denmark  is important for distinguishing questions in the category  Travel.Europe.Denmark  from questions in other categories; however it is of little importance when ranking questions within the category  Travel.Europe.Denmark,  since it appears in many questions in this category.
We thus compute the local relevance with regard to a category, rather than the whole collection, since the importance of a word in a category is more meaningful than in the whole collection when ranking questions within a speci c category.
Various retrieval models can be adopted to compute the local and global relevance scores, and then the  nal ranking score can be computed using Equation 6.
We proceed to detail how to compute the global and local relevance scores using different retrieval models.
Historical CQA questions are categorized, and the global relevance reveals the relationship between the questions in a category as a whole and a query.
Assigning relevance scores to categories makes it possible to favor questions in relevant categories.
We proceed to present how to compute the global relevance scores using the models introduced in Section 2.
The problem here is how to adapt the Vector Space Model (VSM) to compute the relevance score between a question and a category.
We develop two methods.
In the  rst, we view a category as a concatenation of the questions it contains, i.e., the category is represented by a single pseudo document.
Thus, the whole question collection can be viewed as a collection of pseudo documents, each of which represents a category.
The TF (term frequency) and IDF (inverse document frequency) need to be modi ed correspondingly.
The TF of a word is computed with regard to a certain category, and the IDF is actually the  inverse category frequency,  which is in inversely proportional to the number of categories containing the word.
tween a query question and the document representing a category as the global relevance.
However, this straightforward method will yield poor performance for two reasons.
First, the the category document length varies signi cantly from category to category.
For example, on the data set used in our experiments, the length varies from 467 to 69,789.
Second, the query question length is much shorter than the category document length, and a query and a category will share only very few words.
If we compute the similarity according to Equation 1, the value will be dominated by the normalization value.
Thus, categories with few questions will tend to have high global relevance scores.
Instead, we use the category document length to adjust the term frequency of a word, and only the query vector is used for normalization.
More formally, given a query q and a question d with category cat(d), the global relevance Sq,cat(d) in Equation 6 is computed as follows: (cid:80) Sq,cat(d) = t q cat(d) wq,twcat(d),t Wq wq,t = ln(1 +
 f ct ), wcat(d),t = 1 + , where
 ln( Wcat(d) tft,cat(d) ) Here M is the total number of leaf categories, f ct is the number of categories that contain the term t, tf(t,cat(d)) is the frequency of t in the category cat(d), Wcat(d) is the length of cat(d) (number of words contained in cat(d)), and wq,t captures the IDF of word t with regard to categories.
We can see that the relevance score is only normalized by Wq and the length of a category is used when computing the TF for word t.
We note that the existing pivoted document length normalization method [16] does not normalize the documents to unit length and that the normalized score is skewed to account for the effect of document length on relevance.
However, this method needs training data to learn the parameter of skewness.
We do not have the training data and do not employ this method.
The second method for computing the similarity between a query question and a category employs a centroid vector of a category.
The global relevance score is then computed as the cosine similarity between the query vector and the centroid vector.
Speci cally, the centroid vector of cat(d), the category containing d, is computed as: (cid:88) (cid:126)c =
 |cat(d)| (cid:126)vdi , di cat(d) where (cid:126)vdi is the vector of a historic question di contained in cat(d), and each element in the vector is computed by wd,t in Equation 1.
Our experiments show that this method performs worse than the  rst method.
A possible explanation is that this method violates the term frequency saturation heuristic required for effective retrieval [8].
This heuristic says that the score contribution from matching a term should grow sub-linearly as the frequency of the matched term increases.
The intuition is that the information gain from the  rst occurrences of the term is higher than for subsequent occurrences (e.g.,  the change in the score caused by increasing TF from 1 to 2 is larger than that caused by increasing TF from 100 to 101  [8]).
When terms are weighted in each of the constituent questions of a category and then combined to form a representation for the category, a term occurring in multiple questions of a category would be weighted much higher than it would be if we were to weight it after aggregating over all the terms of the category (i.e., as in the  rst method).
In other words, this method violates the heuristic since repeated occurrences of the same term are counted as  fresh occurrences. 
 The centroid representation of a category performs worse than the question concatenation representation in the Vector Space Model.
The reasons for this also apply to the Okapi Model.
Hence in the Okapi Model, we only consider concatenating the questions in a category into a pseudo document.
As in the Vector Space Model, the TF and IDF also need to be modi ed correspondingly.
They are computed with regard to categories.
In addition, this model considers the lengths of documents these lengths are modi ed to be the lengths of categories.
According to Equation 2, the global relevance score Sq,cat(d) can be computed as follows: (cid:88) (cid:84) Sq,cat(d) = wq,twcat(d),t, where cat(d) t q M   f ct + 0.5 f ct + 0.5 ) (k3 + 1)tft,q k3 + tft,q wq,t = ln( wcat(d),t = (k1 + 1)tft,cat(d) Kd + tft,cat(d) Wcat(d) WA(cat) ) Kd = k1((1   b) + b (7) Here M is the number of categories, f ct is the number of categories that contain the term t, Wcat(d) is the length of the concatenated category document cat(d), and WA(cat) is the average length of the concatenated category documents.
Translation-Based Language Model Since categories are viewed as pseudo documents, in these three models, we just need to replace d with cat(d) to compute the global relevance scores using Equations 3, 4 and 5.
Each model introduced in Section 2 can be employed without modi cation for computing the local relevance scores between a query question and a historical question.
However, as the global relevance score captures the relevance of a category to a query, the local relevance score should mainly capture the relevance of a question within a category to a query.
To achieve this, we adapt the models to compute more effective local relevance scores.
The idea is to compute the local relevance scores treating a category as the collection.
As discussed brie y in Section 3.1, computing the local relevance score with regard to only the category containing the historical question appears to be preferable.
This observation motivates us to compute the local relevance differently from the standard VSM.
Speci cally, we compute the IDF corresponding to the category, and we call it local IDF.
In the standard, or baseline, model the IDF is computed on the whole collection, and we call it global IDF.
The local IDF reveals the importance of a word in a query better than does the global IDF when ranking the historical questions within the same category.
The local relevance is computed by Equation 1 with the following modi cations: N is replaced by Ncat(d), the number of questions in category cat(d) containing term t, denoted as ft,cat(d).
We modify wq,t as follows: description-question pairs used for training P (Q|D), and to then use this combined set of pairs for learning the word-to-word translation probabilities.
wq,t = ln(1 + Ncat(d) ft,cat(d) )
 Similar to the Vector Space Model, the Okapi Model also has an IDF component, i.e., wq,t in Equation 2.
We also compute the IDF with regard to the category containing the historical question, which we call local IDF.
The local relevance is computed using Equation 2 with the following modi cations: N is replaced with Ncat(d); and ft and WA are computed with regard to the category cat(d) and are replaced by ft,cat(d) and WA,cat(d), respectively, where ft,cat(d) is the document frequency of t in category cat(d), and WA,cat(d) is the average length of questions in the category cat(d).
Speci cally, compared to Equation 2, the following modi cations are made: Ncat(d)   ft,cat(d) + 0.5 ft,cat(d) + 0.5 ) (k3 + 1)tft,q k3 + tft,q wq,t = ln( Kd = k1((1   b) + b Wd WA,cat(d) )
 Translation-Based Language Model Unlike the Vector Space Model and the Okapi Model, the Language Model does not have an IDF component.
However, the smoothing in the Language Model plays an IDF-like role [20].
Similarly, the smoothing in the Translation Model and in the Trans-lation-Based Language Model also plays an IDF-like role.
Thus, we compute the smoothing value with regard to the category rather than the whole collection, i.e., we use Pml(t|cat(d)) to do the smoothing instead of Pml(t|Coll) when computing the local relevance scores in Equations 3, 4, and 5.
Note that when compared to an existing approach [5], the category smoothing is used differently and for a different purpose.
The existing approach uses the category smoothing together with standard collection smoothing to distinguish questions from both the same category and different categories.
In contrast, in local relevance scoring, smoothing is used alone, to distinguish questions within the same category.
The performance of the Translation Model and the Translation-Based Language Model will rely on the quality of the word-to-word translation probabilities.
We follow the approach of Xue et al. [19] to learn the word translation probabilities.
In our experiments, question-description pairs are used for training, and the GIZA++2 toolkit is used to learn the IBM translation model 1.
There are two ways of accomplishing the training: the word translation probability can be calculated through setting the questions (resp.
the descriptions) as the source and the descriptions (resp.
the questions) as the target.
We employ P (D|Q) to denote the word-to-word translation probability with the question Q as the source and the description D as the target, and P (Q|D) denotes the opposite con guration.
A simple method is to linearly combine the two translation probabilities for a source word and a target word as the  nal translation probability.
Xue et al.  nd that a better method is to combine the question-description pairs used for training P (D|Q) with the


 We study the abilities of the proposed technique to improve the performance of question retrieval models.
Question Search Methods: We denote the  ve question retrieval models from Section 2 as VSM (Vector Space Model), Okapi (Okapi BM25 Model), LM (Language Model), TR (Translation Model).
and TRLM (Translation-Based Language Model).
They are used as baseline methods.
In our category-enhanced model (denoted as CE, Section 3.1), these  ve models can be used to compute both the global relevance score and the local relevance score.
Thus, we obtain 25 combinations.
Each combination is denoted by the name of the model used for computing the global relevance score plus the name of the model used for computing the local relevance score.
For example, if the global relevance score is computed by the Language Model and the local relevance score is computed by the Vector Space Model, we denote the resulting model as LM+VSM.
As a reference, we also give the performance of the method searching in the category of the query, denoted as OptC (the query set is collected from the Yahoo!
Answers, so the categories of queries are known).
We also compare with two existing methods [5].
The  rst utilizes question classi cation to compute the probabilities of a query belonging to the categories.
We extend this method to all baseline models used in this paper and denoted this as QC.
The second method is coupled with the Language Model, and we call it
 Category Arts & Humanities Beauty & Style Business & Finance Cars & Transportation Computers & Internet Consumer Electronics Dining Out Education & Reference Entertainment & Music Environment Family & Relationships Food & Drink Games & Recreation Question#












 Category Health Home & Garden Local Businesses News & Events Pets Politics & Government Pregnancy & Parenting Science & Mathematics Social Science Society & Culture Sports Travel Yahoo!
Products Question#












 Table 6: Number of questions in each  rst-level category Data Set: We collect questions from all categories in Yahoo!
Answers.
We use the getByCategory function from the Yahoo!
Answers API3 to obtain QA threads from the Yahoo!
site.
The resulting question repository that we use for question retrieval contains
 from another data set4 for training the word translation probabilities.
Note that the question repository is much larger than those used in previous work on question retrieval; a large real data set is expected to better re ect real application scenarios of CQA services.
The question repository is also used as the training set for query classi cation.
There are 26 categories at the  rst level and 1263 3http://developer.yahoo.com/answers/
 v1_0, available at http://research.yahoo.com/Academic_Relations.
R-Prec
 VSM OptC QC



 VSM+VSM %chg Okapi+VSM %chg LM+VSM %chg TR+VSM %chg TRLM+VSM %chg



















 Table 1: VSM vs. CE with VSM for computing local relevance (%chg denotes the performance improvement in percent of each model in CE; * indicates a statistically signi cant improvement over the baseline using the t-test, p-value < 0.05)

 R-Prec
 Okapi OptC QC



 VSM+Okapi %chg Okapi+Okapi %chg LM+Okapi %chg TR+Okapi %chg TRLM+Okapi %chg






















 Table 2: Okapi vs. CE with Okapi for computing local relevance (%chg denotes the performance improvement in percent of each model in CE; * indicates a statistically signi cant improvement over the baseline using the t-test, p-value < 0.05) LM OptC QC [5]
 [5]



 VSM+LM %chg Okapi+LM %chg LM+LM %chg TR+LM %chg TRLM+LM %chg

























 R-Prec
 Table 3: LM vs. CE with LM for computing local relevance (%chg denotes the performance improvement in percent of each model in CE; * indicates a statistically signi cant improvement over the baseline using the t-test, p-value < 0.05)

 R-Prec

 OptC QC




 %chg Okapi+TR




 %chg LM+TR %chg TR+TR











 %chg TRLM+TR %chg









 Table 4: TR vs. CE with TR for computing local relevance (%chg denotes the performance improvement in percent of each model in CE; * indicates a statistically signi cant improvement over the baseline using the t-test, p-value < 0.05)

 R-Prec
 TRLM OptC QC



 VSM+TRLM %chg Okapi+TRLM %chg LM+TRLM %chg TR+TRLM %chg TRLM+TRLM %chg































 Table 5: TRLM vs. CE with TRLM for computing local relevance (%chg denotes the performance improvement in percent of each model in CE; * indicates a statistically signi cant improvement over the baseline using the t-test, p-value < 0.05) categories at the leaf level.
Each question belongs to a unique leaf category.
Table 6 shows the distribution across  rst-level categories of the questions in the training data set.
We use the same query set as in previous work [5].
This set contains 252 queries and is available at http://homepages.inf.ed.ac.uk/ gcong/qa.
We remove the stop words from each question.
For each method, the top 20 retrieval results are kept.
For each query question, all the results from the different methods are combined and used for annotation.
Thus annotators do not know which results are from which methods.
An annotator is asked to label each returned question with  relevant  or  irrelevant.  Two annotators are involved in the.
If con icts happen, a third person will make a decision for the  nal result.
Metrics: We evaluate the performance of our approaches using Mean Average Precision (MAP), Mean Reciprocal Rank (MRR), Precision@n, and R-Precision.
MAP rewards approaches that return relevant questions early and also rewards correct ranking of the results.
MRR gives us an idea of how far down in a ranked list we must look to  nd a relevant question.
Precision@n reports the fraction of the top-n questions retrieved that are relevant.
R-Precision is the precision after R questions have been retrieved, where R is the number of relevant questions for the query.
Note that the recall base for a query question consists of the relevant questions in the top 20 results from all approaches.
The recall base is needed to compute some of measures that we use.
Parameter Selection: The experiments use three parameters.
The  rst is the smoothing parameter   in the Language Model; the second,  , controls the self-translation impact in the Translation-Based Language Model; and the last parameter,  , is used for linear interpolation in the CE model.
Following the literature, we set   to 0.2 [20] and   to 0.8 [19].
For the parameter  , different combinations need different values.
We do an experiment on a small development set of 20 queries to determine the best value among 0.1, 0.2, 0.3, ..., 0.9 in terms of MAP for each combination in the CE model.
This set is also extracted from the Yahoo!
Answers data, and it is not included in the test query set.
As a result, we use   = 0.1 for the combinations using LM, TR, and TRLM to compute the local relevance.
When computing the local relevance using VSM and Okapi, and computing the global relevance using Okapi, the value of   is set to 0.7 and 0.5, respectively; otherwise,   = 0.9.
Normalizing the Global and Local Relevance Scores: The global and local relevance scores have different value ranges when they are computed by the  ve models introduced in Sections 3.2 and 3.3.
We need to normalize them into approximately identical ranges before we can linearly combine the two for ranking.
It is not easy to  nd the exact value range for each model.
Making an estimation using the development data set with 20 queries, we  nd the approximate value range shown in Table 7 for each model on this set.
Local Relevance Score
 Okapi


 [0,3) [0,100) (10 80, 10 2) (10 80, 10 2) (10 80, 10 2) [0,1) [0,30) (10 50, 10 2) (10 50, 10 2) (10 50, 10 2) Table 7: Approximate value range for each model We use the simple min-max normalization method to scale the values into the range [0,1].
We denote the original score as S, the maximum value as Smax, the minimum value as Smin, and the normalized value as N (S).
We use the following equation for normalizing the global and local relevance scores (in LM, TR, and TRLM, the values are very small, and we use the logarithmic transformation of the original relevance values): S   Smin Smax   Smin
 Training Word Translation Probability: We use the GIZA++ toolkit for learning the IBM translation model 1 to get the word translation probabilities.
After removing the stop words, we pool the question-description pairs and the description-question pairs together as the input to this toolkit [19].
The toolkit generates a word-to-word translation probability list after training.
We present the experimental results in Section 4.2.1 and then analyze them in Section 4.2.2.
We report experimental results for question retrieval using all the combinations in the CE model.
Table 1 shows the results of the  ve combinations that use VSM for local relevance computation (Section 3.3.1) and use the  ve models for global relevance computation (Section 3.2).
The baseline method in this table is VSM.
The results of VSM OptC (searching in the category containing the query question) and VSM QC (utilizing the query question classi cation) are also given.
We can see that all the  ve CE models are able to signi cantly improve the performance of the baseline VSM.
We will discuss the reasons for the improvement in the next section.
Similarly, Table 2 shows the results of  ve combinations that use Okapi for computing the local relevance (Section 3.3.2).
The results of the baseline Okapi and of Okapi OptC and Okapi QC are also given in this table.
Next, Table 3 shows the results of the baseline LM, of LM OptC and LM QC, and of the  ve combinations using LM for computing the local relevance (Section 3.3.3).
Similarly, Table 4 shows the results of the baseline TR, of TR OptC and TR QC, and of the  ve combinations using TR for computing the local relevance (Section 3.3.3).
Finally, Table 5 shows the results of the baseline TRLM, of TRLM OptC and TRLM QC, and of the  ve combinations using TRLM for computing the local relevance (Section 3.3.3).
Observations similar to those made for Table 1 can be made for Tables 2 5: Thus, all the combinations in the CE model consistently outperform the corresponding baseline methods.
Incorporating the global relevance score computed by the  ve models all leads to a better performance, comparing with the corresponding baseline methods that do not exploit the category information.
Most of these combinations can achieve statistically signi cant improvements in terms of all the measures.
This clearly shows that the category information indeed can be utilized to improve question retrieval, and it shows that the CE model is effective.
We can see that among the  ve baseline models, TRLM performs the best and VSM performs the worst; TR, LM, and Okapi are in between.
TRLM and TR have better performance since they are able to retrieve questions that do not share common words with the query, but are semantically similar to the query.
Because TRLM solves the self-translation problem by combining TR and LM, it has the best performance.
The results are consistent with those reported in previous work [10, 19].
Among the  ve methods for computing global relevance, we  nd that VSM and LM perform the best.
TRLM does not outperform the other models, although it performs the best when used to compute the local relevance.
The underlying reasons are analyzed in the next section.
The OptC models perform even worse than the baseline models.
The reason is that for many queries, not all the relevant questions come from the same category as the query question.
Table 8 shows that searching in only the top categories results in many relevant questions being missed.
The QC models perform better than the corresponding baseline models, which is consistent to result reported in previous work [5].
However, comparing to the results of the CE model the improvement is minor.
In Table 3, we also give the results of the LM+L method [5].
We can see that its results are comparable to the results of the CE model when using LM.
However, the CE model can be applied to other question retrieval models, rather than being restricted to LM.
To understand why the combinations in the CE model improve over the baseline models, let us recall the two components of the CE model, namely (1) the global relevance score of a query and the category containing a historical question, and (2) the local relevance score of a query and a historical question.
Each component utilizes category information and contributes to the improvement.
Global Relevance Score Analysis: The CE model promotes the rankings of the questions in categories with larger global relevance scores.
The introduction of a global relevance component in the CE model is based on the intuition that the more related a category is to a query question, the more likely the category is to contain questions relevant to the query.
To verify this intuition, we analyze the relevant questions returned by the TRLM model, which is the best baseline.
For each query, we rank all the categories according to the global relevance scores of each category and the query, and we count the number of relevant questions in every rank.
We then aggregate the number of relevant questions in each rank across all queries and compute the percentage of relevant questions in each rank.
Table 8 gives the results with regard to the  ve global relevance scores computed by the  ve models.
It shows that most relevant questions come from the top-5 ranks, which is consistent with our intuition.
Hence, it is helpful to promote the rankings of questions in the categories with higher global relevance scores.
We also notice that some relevant questions in  Rest  can come from categories ranked at about 500.
Comparing the models for computing global relevance: All the  ve models improve the retrieval performance, as shown in Tables 1-5.
However, TR and TRLM perform slightly worse than LM when used to compute the global relevance, although they have better results when used as baseline retrieval models.
A possible reason why the two models perform better than LM when they are used as baselines is that the word translation probabilities help them  nd semantically similar, but lexically different, relevant questions.
global relevance
 Okapi














 Rank

















 Rest




 Table 8: Distribution of relevant questions in different ranks of category in percentage (%, TRLM used for local relevance) However, category documents are usually much longer than query questions; when  nding a relevant category, the category document usually shares the same words with the query, and the role of semantically similar, but lexically different words is less important.
The word translation probabilities sometimes might even result in noise in this case.
We can also see from the results that Okapi performs the worst when used to compute the global relevance.
To illustrate the analysis, consider the query question  How can I stop my cat worrying/nibbling her own leg?  that belongs to the category  Pets.Cats.  Using Okapi to compute the global relevance yields a score difference between  Pets.Cats  and  Pets.Dogs  of 0.0125, after normalization; however, the difference is 0.2 if we use VSM.
With LM, the difference between the two categories is about 0.05 after normalization, and with TR and TRLM it is only about 0.014.
Due to the word translation probabilities T(dog|cat) = 0.005 and T(dog|leg) = 0.017 as determined by TR and TRLM,  Pets.Dogs  is also very relevant to the query when using TR and TRLM.
From Table 8, we can also see the trend that the top-1 category as determined by VSM contains more relevant questions than for the other models.
Local Relevance Score Analysis: In VSM and Okapi, the local relevance is computed using IDF with regard to the category of a historical question rather than the whole collection.
In LM, TR, and TRLM, it is computed with regard to the category of a historical question for the smoothing.
To see the effects of the category-speci c local IDF, we compare the results of the model VSM+VSM using local IDF (denoted as VSM+VSM.Local) and global IDF (VSM+VSM.Global).
Table 9 shows the results of these two and VSM as the baseline.
We can see that VSM+VSM.Local performs better than VSM+VSM.Global.
This is because the local IDF can better represent the importance of a word for a speci c category when the local relevance is used to distinguish questions within a category.
For example, the query  What is the ideal temperature for a ball python?  is contained in the category  Pets.Reptiles.  In the full collection, 2,322 questions contain the word  temperature  and 401 questions contain  python ; but in the category  Pets.Reptiles,  only 16 questions contain  temperature  whereas 332 questions contain  python.  As a result,  temperature  is more important than  python  within the category, while  python  is more important within the full collection.
Using global IDF will rank questions containing  python  higher for the questions in the category  Pets.Reptiles ; however, questions in this category that contain  temperature  are more likely to be relevant.
Using local IDF will be more suitable for the retrieval within a category.
Similarly, in the Okapi Model, the local IDF also improves the retrieval performance.
In LM, TR, and TRLM, the smoothing plays a role similar to that of IDF [20].
The three models also improve in performance when the smoothing is done in the categories instead of on the whole collection.
We compare the results of LM when using local smoothing, denoted as LM.Local, and when using global smoothing, denoted as LM.Global.
Table 10 shows the MAP results when different models are used to compute the global relevance.
We can see that the smoothing in a category performs better than smoothing in the whole collection, no matter which kind of model is used to compute the global relevance score.
In TR and TRLM the local smoothing also leads to better performance, and we will not give details due to space limitation.
VSM+VSM.Local VSM+VSM.Global







 R-Prec






 Table 9: Results of VSM+VSM.local, VSM+VSM.global and VSM baseline LM.Local LM.Global VSM Okapi












 Table 10: MAP results of LM using local smoothing or global smoothing for computing local relevance score Tables 9 and 10 also show that the global relevance component improves the performance even if we use the global IDF or global smoothing to compute the local relevance score.
This occurs because the rankings of questions from relevant categories are promoted.
Comparing the two methods of using VSM to compute global relevance.
In Section 3.2.1, the second method of computing the global relevance score using VSM is to  nd and use the centroid vector of a category to compute the similarity.
We denote this method as VSMCEN.
Table 13 compares VSM and VSMCEN for computing global relevance when VSM is used to compute local relevance (the results are comparable when using other models to compute local relevance).
The results show that VSMCEN can also improve the retrieval performance, but that VSM consistently performs the best.
The reason is given in Section 3.2.1.
Examples: To better understand the CE model, Table 11 gives the top-3 results of the query question  Do guppies die after giving birth?  from the category  Pets.Fish,  when using the combination VSM+VSM.
The questions in bold are labeled as  relevant.  First, we see that in the results of both VSM+VSM.Local and VSM+VSM.Global, the global relevance component promotes the question in category  Pets.Fish.  This is because the category has a high relevance score for the query, while the relevance scores of the categories  Pregnancy & Parenting  and  Dream Interpretation  are lower.
Second, VSM+VSM.Local using the local IDF yields a better ranking of questions within the same category.
This is because in the method VSM+VSM.Local, the words  giving  and  birth  are more important than the word  guppies,  while the opposite is true in the method VSM+VSM.Global.
The experimental results show that TRLM has superior performance when used alone as baseline or combined with models of global relevance.
It gains from the word translation probabilities.
Questions that do not share many common words with the query will have low rankings in other non-translation models.
However, translation-based models are able to  ll the lexical gap and  nd semantically similar questions.
Table 12 gives the results of the query  Will marijuana leave my system faster if i drink alot of water?  from category  Health.Alternative.  We can see that the three translation-based models rank the two relevant questions higher than LM.
This is due to the two word translation probabilities: T(marijuana|thc) = 0.128 and T(marijuana|weed) = 0.053.
In
 VSM+VSM.Global VSM+VSM.Local Top-3 Retrieval Results








 Category Pregnancy & Parenting Dream Interpretation Fish Fish Fish Fish Fish Fish Fish Table 11: Search results for  Do guppies die after giving birth?"
Method


 Relevant Questions and their ranks




 water?
VSM+TRLM 1.
Will water  ush thc from your system faster?
water?
Category Botany Botany Beer, Wine & Spirits Botany Beer, Wine & Spirits Botany Beer, Wine & Spirits Table 12: Search results for  Will marijuana leave my system faster if i drink alot of water? 


 VSMcen+VSM 0.2854

 R-Prec




 Table 13: Comparison (MAP) of VSM and VSMCEN addition, VSM+TRLM performs better than TRLM because after normalization, the global relevance score between the query and the  .Beer, Wine & Spirits  category is as high as 0.91.
Features of Questions that Bene t from CE: For some queries, the CE model performs worse than the baseline methods.
We  nd that this is mainly because the global relevance score promotes the rankings of questions in the non-relevant categories.
If a query question does not have obvious category-speci c features, the global relevance score will not help.
We would like to characterize the queries that can bene t from the CE model, although this is very dif cult.
The intuition behind the CE model indicates that if a query obviously belongs to certain categories, it is more likely that the global relevance will help; otherwise, if a query has similar category relevance scores for every category, category information is less likely to help.
Based on this, for each query we calculate the standard deviation of the global relevance scores computed by VSM between it and all the categories.
The deviation measures the variability of the global relevance scores across categories.
A large deviation means that a query has obvious category features.
According to the deviation value of each query, we divide our test set into three subsets of equal size.
Table 14 lists the percentage of queries that have better performance in each subset in terms of MAP when using VSM+VSM.
It can be seen that with larger deviation, the CE model is more likely to perform better.
We also analyzed the results from the perspectives of other features, such as the query length and category length, but did not  nd any useful correlations.
Summary: The experimental study shows that all the  ve methods of computing global relevance are capable of improving the performance of question retrieval models, and it shows that our variation of VSM is the best at computing the global relevance.
The study also show that the strategy of computing the local relevance score Deviation range [0, 0.006) [0.006, 0.021) [0.021, 0.053] Improved queries (%)


 Table 14: Percentage of queries with better performance for different ranges of global relevance score deviation in terms of
 with regard to categories is effective.
Over all the combinations, the model VSM+TRLM achieves the best performance.
The work on question retrieval can be traced back to  nding similar questions in Frequently Asked Questions (FAQ) archives.
Most of the existing work focuses on addressing the word mismatching problem between user questions and the questions in a Question Answering (QA) archive.
The word mismatching problem is especially important for QA retrieval, since question-answer pairs are usually short [19].
Burke et al. [4] combine lexical similarity and semantic similarity between questions to rank FAQs.
Berger et al. [2] study several statistical approaches to bridge the lexical gap for FAQ retrieval, including a translation-based approach and a query expansion approach using a word mapping learned from a collection of question-answer pairs.
Jijkoun and Rijke [11] use a vector space model for question-answer pair retrieval.
Riezler et al. [14] provide a translation model for question retrieval; their translation model is trained on a large amount of data extracted from FAQ pages on the Web.
Soricut and Brill [17] build an answer passage retrieval system.
Question retrieval has recently been revisited for Community Question Answering (CQA) data.
Jeon et al. [9, 10] compare four different retrieval methods, i.e., the vector space model, the Okapi model, the language model, and the translation model, for question retrieval on CQA data, and the experimental results show that the translation model outperforms the other models.
In subsequent work [19], they propose a translation-based language model that combines the translation model and the language model for question retrieval.
The results reported in the work on CQA data are FAQs: translation models usually help question retrieval since they can effectively address the word mismatch problem of questions.
Additionally, they also explore answers in question retrieval.
Duan et al. [7] propose a solution that makes use of question structures for retrieval by building a structure tree for questions in a category of Yahoo!
Answers, meaning that important phrases in questions are given higher weight in question matching.
Wang et al. [18] employ a parser to build syntactic trees of questions, and questions are ranked based on the similarity between their syntactic trees and the syntactic tree of the query question.
As observed by Wang et al. [18], current parsers are not well-trained to parse real-life questions, especially informally stated questions.
They report that they outperform a Bag-of-Word baseline (that matches words between query and question) by 11.99% in terms of MAP.
Bian et al. [3] propose an interesting learning framework for question retrieval.
However, this approach needs training data (which would be dif cult to get for general questions) and experiments are conducted on factoid questions.
In contrast to the previous work, our technique exploits the question categories in CQA data.
The only work on utilizing category information for question retrieval is based on language models [5].
However, the effective category smoothing based approach [5] is tightly integrated with the langauge model and is dif cult to apply to other retrieval models.
In contrast, the technique proposed in this paper can be applied to any question retrieval method.
The existing classi cation-based approach [5] can be applied to other question retrieval models, but can only slightly improve the performance, as shown in our experiments.
Chekuri and Raghavan [6] introduce the idea of utilizing classi- cation for document retrieval.
However, their focus is on the automatic classi cation of Web documents (no category information available) into high-level categories of the Yahoo!
taxonomy; they do not investigate how to leverage the classi cation results for document retrieval.
Similarly, Lam et al. [12] also focus on developing an automatic text categorization approach.
Finally, we note that other works exists on CQA services that consider category information, e.g., [1, 13].
However, these focus on other aspects of CQA, not on question retrieval.
Question retrieval is an essential component in Community Question Answer (CQA) services.
In this paper, we propose a new approach that is capable of exploiting category information associated with questions in CQA archives for improving question retrieval.
This approach can be applied easily to existing question retrieval models.
Experiments conducted on a large CQA data set from Yahoo!
Answers demonstrate the effectiveness of the proposed technique.
This work opens to several interesting directions for future work.
First, it is of relevance to apply the proposed techniques to other question retrieval approaches (e.g., [7]).
Second, it is interesting to include answers into our proposed technique for question retrieval.
Third, hierarchical category structures may perhaps be exploited to further improve the performance of the CE model.
Finally, it is of interest to explore other ways of combining global relevance scores and local relevance scores.
Acknowledgments C. S. Jensen is also an Adjunct Professor at University of Agder, Norway.
