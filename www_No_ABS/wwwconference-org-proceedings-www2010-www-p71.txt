Online social communities  ourish worldwide nowadays.
According to the report of alexa1, Facebook2, YouTube3 and Blogger4 have stepped into the world s top-10 sites in terms 1http://www.alexa.com/topsites/global 2www.facebook.com 3www.youtube.com 4www.blogger.com Copyright is held by the International World Wide Web Conference Committee (IW3C2).
Distribution of these papers is limited to classroom use, and personal use by others.
of number of visits a day.
An increasing number of people meet in online communities to  nd like-minded people, to debate topical issues, to play games, to give or ask for information, to  nd support, or to shop.
These social community or social networking sites, however, are yet to monetize e ec-tively.
At present, most sites generate revenue via content-based ad placement, which analyzes the content of a Web page and embeds relevant ads into it.
The other popular approach is user-targeting ad placement, which matches ads by users  interests.
Both content-based and user-targeting approaches su er from data sparsity challenges (details are presented in Section 2).
In this work, we have been developing and experimenting with an in uence-based propagation model, which we call AdHeat.
AdHeat identi es in uential users on social networks by analyzing user contributions including, for example, content generation (on forum-like applications), problem solving (at Q&A sites), and other services.
AdHeat represents a user s interests by some hint words, which are calculated based on her pro le and recently generated contents.
A hint word represents a user s interests, for example, a musician s hint may be rock music.
A community site can perform in uence analysis periodically to include the most recent user activities.
After the hint words have been generated for in uential users, AdHeat propagates these words throughout the networks like heat di uses through a forest of trees.
AdHeat ensures that hints are properly and rapidly spread, and then for each user, it aggregates all incoming hints for matching ads.
During our experiments with AdHeat, we made two interesting observations, which explain the reasons why AdHeat works e ectively.
First, we observed that an in uential user seldom clicks on an ad that is highly relevant to his expertise.
This behavior is understandable because an expert may have known the company or product behind the ad or her self-con dence on the subject matter renders relevant ads useless.
In fact, the CTR (click through rate) of an in uential user on a random ad is higher than on a relevant ad.
This further demonstrates the factor of familiarity diminishing curiosity.
The second observation is that information about non-in uential users is often too sparse to perform e ective content or user-based ad targeting.
The propagation scheme of AdHeat remedies this shortcoming.
In uential users have a strong ability to attract other users  attention and a ect their thoughts and actions: their notes are often followed by many users, their questions attract many users to join the discussion, their answers are widely accepted, etc.
Users like in uential users  posts.
Thus, AdHeat propagates in uen-graph to achieve two e ects.
First, hint-word propagation remedies the information sparsity problem.
Second, using hint words  suggested  by in uential users for matching ads produces ads that are more receptive by less in uential users who have been following opinions of in uential users.
We performed three experiments on Google Confucius, an online Q&A service available in China, Russia, Thailand, and 17 Arab-speaking countries.
The results show that Ad-Heat to be more e ective over content-relevance and user-targeting ad models, outperforming them in CTR by significant margins.
In summary, the contributions of this paper are as follows:   We propose an in uence-based advertising model, which di uses  hints  from in uential users to the others for matching ads.
We show that this in uence-based model is both necessary addressing data sparsity problem, and desirable improving ad relevance.
  We propose AdHeat algorithm, which generates users   hints  and identi es in uential users by performing social graph analysis, using PLDA and HITS algorithms.
  We propose using a di usion model to propagate  hints  to improve information density for each user to match ads.
  Our experimental results show AdHeat to be e ective, and the results also reveal useful insights into understanding in uential users  reactions to ads.
The reminder of the paper is organized as follows.
Section 2 presents related work.
Section 3 depicts the three main steps of AdHeat.
Section 4 presents experimental results.
We o er concluding remarks in Section 5.
We present related work in social ad placement in three parts: content relevance analysis, user relevance analysis, and in uence analysis and propagation.
Relevance analysis  nds the most relevant ads for a Web page or a user.
The idea is that the higher the relevance, the more likely an ad is to be clicked [24, 8].
Content relevance is the pioneer online advertisement model for Web pages.
This model takes three steps to match ads with a Web page.
First, it analyzes the contents of the target page and generates keywords to represent that page.
It then uses the keywords to query relevant ads.
Finally, the most relevant ads are embedded into the target Web page and displayed to users.
Google AdSense is a representative product that is based on content relevance.
Several methods have been proposed based on relevance for matching ads with Web pages.
The work of B. Ribeiro-Neto et al. [21] represents both ads and Web pages by vectors, and matches them according to several vector similarity measurements.
A. Lacerda et al.
[17] propose matching ads with a function generated by learning the impact of individual features using genetic programming.
The experimental results show that the matching function outperforms the best method in [21] in  nding relevant ads.
Another approach treats contextual advertising as an aspect of sponsored search, which extracts phrases from search queries and matches them to bid phrases of the ads [28].
Such a method leads to many irrelevant ads because of the vagaries of phrase extraction and the lack of contextual information.
Andrei Broder and Marcus Fontoura [3] propose a method for contextual ad matching based on a combination of semantic and syntactic features, and the method obtains better performance than considering these features individually.
The work of Deepayan Chakrabarti et al. [6] improves relevance signi cantly by incorporating click feedback.
A logical improvement for social ad targeting is to personalize ad placement by considering users  idiosyncracies in addition to performing content relevance analysis on Web pages.
One source of user information is a user s pro le with their age, gender, education, income, and interests.
Facebook allows advertisers to choose their targeted audience by demographics.
Facebook also monetizes friend graphs by recommending ads clicked by friends.
Unfortunately, user pro les may not always be accurate, complete, or up-to-date.
User activities can be a better source for understanding users in an implicit way.
For instance, a user who likes to listen to 50s music may be older.
User generated content such as blogger/twitter posts and uploaded photos/videos are other sources for understanding users.
Relevance analysis on user activities or behavior can obtain users  needs in near-real-time.
Some experiments provide evidence that user behavioral targeting helps improve the e ectiveness of online advertisement [26].
The work of Foster Provost et al. [20] provides a method to  nd good audiences for brand advertising by extracting quasi-social networks from browser behavior on user-generated content sites.
Collaborative  ltering is a widely used technique for user ad targeting.
A survey of E. Y. Chang [7] presents representative collaborative  ltering algorithms including frequent itemset mining (FIM), SVD, Latent Dirichlet Allocation (LDA).
Chen et al. [9] compare the e ectiveness of FIM and LDA on user-centric information recommendations.
A well-known shortcoming of user ad targeting is data sparsity.
Aside from the fact that most pro les may not be complete or accurate (especially in emerging countries, most users do not provide true identities or real pro les), users seldom generate content.
Our proposed AdHeat considers in uence in addition to relevance to remedy this data sparsity problem.
AdHeat  nds hints from in uential users who generate ample activities and then propagates these hints through network edges (representing user relationship, either explicit or implicit) to all users through a heat propagation model.
The basic in uence model considers only users  declared friendships.
Such a model makes ad-placement decision partially based on friends  characteristics.
This model may work well with sites such as Facebook and LinkIn, where relationship between people is explicitly expressed.
For social sites where user relationship is not explicitly established, such as forum and Q&A sites, the in uence model must  nd implicit relationship through mining user interactions.
We believe such implicit-relationship mining to be more useful than explicit expression for two reasons.
First, not all users articulate all their relationships or keep such information up-to-date.
Second, an explicit link cannot tell how often two should also consider transitivity, i.e., if user a is in uential to user b, and user b to c, then user a can in uence user c indirectly.
AdHeat considers implicit relationships in addition to explicit ones, and transitive relationships in addition to mutual ones.
On propagating interests or hints on social networks, different mechanisms have been studied mainly in the light of information di usion and virtual marketing.
Various real networks have been analyzed to  nd the characteristics of information propagation.
For example, Daniel Gruhl et al. [11] study the dynamics of information propagation in environments of low-overhead personal publishing, and proposes an algorithm to induce the underlying propagation network from a sequence of posts.
The work of Eytan Adar et al. [1] takes advantage of historical, repeating patterns of infection to track the information  ow on blogs.
The work of Jurij Leskovec et al. [19] studies the propagation of recommendations in person-to-person recommendation network.
Both Kristina Lerman et al. [18] and M. Cha et al. [5] analyze a Flickr data set to research photo propagation through the social networks.
Gueorgi Kossinets and Jon Kleinberg [16] introduce the structure of information pathways in social communication network, and de ne the network backbone as the subgraph consisting of the edges on which information has to the potential to  ow quickest.
To the best of our knowledge, AdHeat is the  rst ad model that uses in uence to di use hints for matching ads.
The AdHeat consists of three major steps:



 Hint word generation characterizes each user with a list of words.
The input to hint word generation is a user s activities in communities.
Given the input, AdHeat employs Latent Dirichlet Allocation (LDA) [2] to perform this hint-word generation task.
LDA was  rst proposed by Blei, Ng and Jordan to model a document as a bag of words.
In communities, each user is involved in some activities.
Since most activities are either posting or viewing contents, AdHeat characterizes a user by aggregating the contents he generated or viewed.
After converting the contents to words, a user is also represented by a bag of words.
If you suppose each user is a mixture of K latent characteristics, taking words-denoted users as input, LDA can infer each user s probability distribution on K characteristics, where each characteristic is a multinomial distribution  k over a V word vocabulary.
To process a large volume of data, we use a parallel implementation of LDA (PLDA) to generate hint words.
We have previously developed PLDA and made it open source.
Algorithms 1 shows how PLDA is used to generate users  hint words.
For the details of PLDA, please consult reference [25].
An important consideration in generating hint words is freshness of information.
For activities that took place a long time ago, we may want to discount their importance.
For activities that just took place, e.g., discussion of a new mobile device, they should be weighted higher.
To consider freshness, we represent the user by most recent t days of words she generated or viewed, and use them as the inputs of PLDA.
The output   includes each user s probability distribution on K characteristics, and   contains each characteristic s probability distribution on V words.
Both input and output are depicted on the top of Algorithms 1 Algorithm 1: Hint-Word-Generation.
Input: U : User set, with each user denoted by words.
Output: m=1: a M   K matrix.
  = {(cid:3) m}M   = {(cid:3) k}K k=1: a K   V matrix.
Parameters and variables: M : number of users.
K: number of user characteristics.
V : vocabulary size.
(cid:3) , (cid:3) : Dirichlet parameters.
(cid:3) m: characteristic distribution for user m.
(cid:3) k: word distribution for characteristic k.
Nm: the length of user m s activities represented her generated words, here modelled with a Poisson distribution with constant parameter   zm,n: mixture indicator that chooses the characteristic for the nth word of user m.
wm,n: term indicator for the nth word of user m.
begin forall k   [1, K] do Sample mixture components (cid:3) k   Dir((cid:3) ); end forall user m   [1, M ] do Sample mixture proportion (cid:3) k   Dir((cid:3) ); Sample user activity length Nm   P oiss( ); forall word n   [1, Nm] of user m do Sample characteristic index zm,n   M ult((cid:3) m); Sample term for word wm,n   M ult((cid:3) zm,n); end end end Based on the output of PLDA, we generate hint words for each user by the following method: For the mth user, we choose the top i characteristics by weights in (cid:3) m, and for each selected characteristic k, we choose top j words by weights in (cid:3) k and add them to the mth user s hint word list.
A hint word s weight is its weight in (cid:3) k multiplied by its characteristic s weight in (cid:3) m.
Finally, each user have i   j weighted hint words.
They are used to match relevant advertisements to target users.
The method above generates hint words for individual users and does not consider interactions between users.
Ad-Heat separates individual analysis and propagation into two orthogonal steps, and the computation of in uential scores, discussed next, determines the scopes and directions of hint-word propagations.
Our goal in this step is to rank users based on their in u-to two factors: level of activity and authority.
Active users interact with many users frequently.
Active users are like broadcasters who can propagate news (and gossip) quickly to many users.
Authoritative users may or may not always engage with other users.
They, however, are the authors of high-quality content that draws attention.
Authoritative users are highly respected and their opinions followed by many users.
From the perspective of information dissemination, both active and authoritative users are in uential.
Therefore, if one would like to propagate ads, one should place ads by closely consulting with in uential users.
To compute in uence user rank, we employ HITS (Hypertext Induced Topic Selection) [15].
Such link-based methods have been proven to be successful in social network analysis tasks [22].
Gyongyi et al. applied the HITS algorithm to the question and answer graph of Yahoo!
Answers and observed a positive correlation between user quality and hub/authority scores [12].
Various other researchers have also reported the e ectiveness of HITS in expert identi cation on Q&A sites [13, 29] and email exchange networks [4,
 graph.
We assign edge weights between users to enhance HITS algorithms in ranking the users by their in uence.
In the remainder of this section, we depict how we assign weights on edges.
The social network is a group of users connected by relationships.
Let G(U, E) denote the social network graph, where U ={u1, u2, ..., un}, E={(ui, uj)|   directed edge from ui to uj}, U is the user set, E is the edge set, and the weight of (ui, uj ) quanti es ui s dependence to uj .
Generally, the weight of (ui, uj ) isn t equal to that of (uj , ui).
That s because the relationship between two users are asymmetric.
For example, uj is a pop star and ui is his fans.
While ui keeps following uj s activities on the social communities, uj may never be concerned ui at all.
The simplest way to build edges is according to friendship ties, that is, if two users are friends, there is an edge between them, and its weight is one.
Friendship-generated edges have no direction, and they are all equal because all such edge have a weight of one.
Therefore, this method alone is clearly ine ective to quantify in uence.
Instead, we assess the relationship between two users by the frequency and quality of their interactions.
Frequency is simple to account for.
To assess quality, we consider several factors in an application-dependent way.
For a Q&A application, an an-swerer is considered to be in uential if the answers provided are timely, highly relevant to questions, and useful.
For a forum/BBS application, a user is in uential if her posts enjoy high page views.
Since our experiments are conducted on a Q&A site, we consider the quality factors for Q&A application.
Our previous work, which is proposed by Si et al.
in [23], concludes that several factors listed in table 1 may a ect interaction quality.
Among the the factors, Si et al. identify that #cov (coverage), #npbaul (voted as a good post), #rword (relevance), #origt (originality), and #focus (focus) weight the highest through empirical studies.
Thus, we use these factors to quantify user interaction quality.
After getting the factor weight of each interaction, we combine the weights of user interactions which have the same source and target.
The edge weight from ui to uj is determined by Factor #nw #nuw #puw Description Number of words.
Number of unique words.
Percentage of unique words.
#cov #nau #prompt Promptness, time from when the question was asked to when the answer was provided.
Coverage, computed as the sum of the word s IDFs.
Total number of answers provided by the an-swerer before.
Percentage of best answers in all closed threads participated in by the answerer.
Number of answers posted by the answerer to questions on the same topic.
#npbau #naul #rlda #rword #npbaul Percentage of best answers posted by the answerer in closed threads within the same topic.
Relevance, computed as the cosine similarity of LDA latent topic distribution between the question and the answer.
Relevance, computed as the cosine similarity of TF*IDF weighted word vectors between the question and the answer.
Originality, compared to earlier answers for the same question.
Originality, compared to earlier answers from the same user.
Focus, how focused the answerer s domain of knowledge or interests is, based on her past answers.
#focus #origu #origt Table 1: Features extracted from each answer in a community Q&A system.
two factors: the number of interactions from ui to uj and each interaction s weight.
We normalize all edge-weights to [0,1] by MAX-MIN method.
The generated social network graph G is the input to HITS algorithm in section 3.2.2 and the input to in uence propagation algorithm in section 3.3.
Taking the social network graph G as input, the HITS algorithm computes two scores for each user:   A hub score, which indicates user s contribution to propagate information.
  An authority score, which indicate user s contribution to provide attractive contents.
Let the adjacency matrix W denote the social network graph G, where wij denotes the edge weight from user i to j.
We initialize the hub scores (cid:3)h and the authority scores (cid:3)a by random values at the start.
Then we update the two score vectors iteratively by the following equations: a (2) where 1 is the vector of all ones, Wrow is the same as W with its rows normalized to sum to one, Wcol is W with its columns normalized to sum to one, and   is a reset probability to guarantee the convergence of the algorithm.
HITS rowh (n+1) h (n+1) =  1 + (1    )Wcola =  1 + (1    )W T n, n (1) (b) n = 2 n




 Table 2: Propagating Hint Words.
u# Hint Words #1 #2 #3 #4 #1 #2 #3 #4 #1 #2 #3 #4 #1 #2 #3 #4 #1 #2 #3 #4 (a, 0.6) (b, 0.4) (c, 0.8) (b, 0.2) (e, 0.5) (f, 0.5) (d, 0.9) (b, 0.1) (a, 0.6) (b, 0.4) (c, 0.69) (b, 0.23) (a, 0.08) (e, 0.4) (f, 0.4) (c, 0.1) (d, 0.07) (b, 0.03) (d, 0.66) (b, 0.16) (a, 0.11) (c, 0.07) (a, 0.6) (b, 0.4) (c, 0.63) (b 0.24) (a, 0.13) (e, 0.32) (f, 0.32) (c, 0.17) (d, 0.11) (b, 0.07) (a, 0.02) (d, 0.51) (b, 0.2) (a, 0.17) (c, 0.11) (a, 0.6) (b, 0.4) (c, 0.59) (b, 0.25) (a, 0.16) (c, 0.24) (e, 0.22) (f, 0.22) (d, 0.13) (b, 0.12) (a, 0.06) (d, 0.36) (b, 0.24) (a, 0.24) (c, 0.16) (a, 0.6) (b, 0.4) (c, 0.59) (b, 0.25) (a, 0.16) (c, 0.3) (e, 0.16) (f, 0.16) (b, 0.15) (a, 0.13) (d, 0.1) (d, 0.29) (b, 0.25) (a, 0.24) (c, 0.22) (c) n = 4 (d) n = 8  a  and  b  are most relevant to user #1 with a normalized weight of 0.6 and 0.4, respectively.
Figure 1: Heat Distribution Changes.
terminates when satisfying the following conditions: ||h ||a (n+1)   h (n+1)   a n||    n||   , (3) (4) where  is a prede ned convergence threshold.
We compute in uence scores by I =  h + (1    )a, (5) where     [0, 1].
I is one of the inputs for in uence propagation algorithm in section 3.3.
Given a list of users ranked by their in uence scores, Ad-Heat propagates their hint words throughout the networks.
We propose using heat di usion to perform propagation.
Heat di usion describes the procedure by which heat diffuses from one or more areas to others in a manifold.
When we treat a social graph as a manifold with the users  in u-ence as the heat sources, in uence propagation  ts the heat di usion model.
We use an example to illustrate how such di usion works for propagating hint words, followed by a formal speci cation of the algorithm.
Figure 1(a) and the  rst row of Table 2 show the initial state of an example social graph.
The di usion manifold in the  gure consists of four users denoted as #1, #2, #3, and #4.
The in uence scores of the users are printed next to the user nodes, and they are 0.8, 0.6, 0.2, and 0.4 for users #1, #2, #3, and #4, respectively.
The edges of the graph are the di usion rates, initialized by the edge weights of the social network graph.
Table 2 shows that PLDA assigns each user two hint words with relevance scores.
For instance, words
 scores after two iterations of di usion.
The in uence score of user #1 has dropped from 0.8 to 0.67, whereas that of user #3 and #4 have increased.
At the same time, the hint words have been propagated.
The third row of Table 2 shows that hint word  a  has reached third on the word list of user #4.
This is because compared to user #4, user #1 is twice more in uential, and his top word has infected the list of user #4.
scores after the di usion algorithm converges, at which the heat of the manifold is in a balanced state.
The  nal row of Table 2 shows hint words on all nodes.
The top hint word of user #3 have been replaced by the words of users #2.
User #4 adopts user #1 s top words because user #1 is four times more in uential.
At the same time, user #4 keeps word  d  on her list because the initial relevance of that word is very high on her list.
The example shows that hint-word propagation properly balances local relevance and global in uence.
At the end of the propagation, AdHeat uses the list of hint words of each user to query against Google AdSense for the most relevant ads for the user.
Heat di usion models have been studied extensively in epidemiology to predict the spread of infections diseases, in medicine to track the progression of cancer cells, and in mobile ad hoc networks to choose information dissemination strategies [14].
The heat equation (6) is the basis for most di usion models, including Di usionRank [27], where  2 is the Laplace operator over the spatial dimensions and   is the di usion coe cient.
   t =  2 (x, t) (6) work, we start with a more general form of the heat equation, shown below    t =     ( ( , x) (x, t)), (7) especially we have where  (x, t) is the heat distribution at node x at time t, and  ( , x) is the di usion coe cient for heat distribution   at node x; the   symbol represents the vector di eren-tial operator acting on the space coordinates.
The general di usion equation above is nonlinear and di cult to solve analytically.
Given our problem is in a discrete space, we can perform the di usion of heat on a node-by-node basis, where we calculate the amount of di used and received heat for each iteration of our algorithm.
On a directed graph, received heat (RH) for node i should be proportional to (1) the time period  t, (2) the di u-sion rate  ij of a neighboring node i, and (3) the heat at node vj.
Similar guidelines can be made for di using heat.
The extended model sets di erent  ij values for di erent edges, which re ects the relative importance of connections between various nodes vj linked to a given node vi.
The use of varying  ij values allows us to treat outgoing edges di erently.
Following the above guidelines, we propose these equations for the heat received and di used for node vi: RH(vi) = DH(vi) =
 j:(vj ,vi) E
 j:(vi,vj ) E
  jifj (t) t/dj (8)  ijfi(t) t/di j:(vi,vj ) E  ij = di =  ifi(t) t fi(t) t (9) where RH(vi) and DH(vi) are heat received and di used for node vi respectively; fi(t) is the heat of the node i at time t;  ij is the di usion coe cient between nodes i and j.
The larger the value of  ij, the faster the heat di uses from one node to another.
The di used heat DH(vi) can be simpli ed by using  ri as the average   of the outgoing edges for node vi.
Combining the di used and received heat equations, the net change in the heat of a node i is given by the following equation: fi(t +  t)   fi(t) = (  jifj (t)/dj    rifi(t)) t (10)
 j:(vj ,vi) E We can represent the full heat solution f (t) by using di usion rate matrix   and transition matrix A.
Taken to the limit, when     0: if i = j if (vj , vi)   E df (t)  i  ji dt =     Af (t)
 :
 : 0 otherwise  1 if i = j 1/dj 0 otherwise if (vj , vi)   E  ij = Aij = (11) (12) (13) where the   operator represents the Hadamard product of two matrices.
Solving equation (11), we obtain the following: f (t) = e At f (0), f (1) = e A f (0), (14) (15) where f (1) denote the  nal heat distribution on nodes.
Computing e A is time-consuming, so we use its discrete approximation: f (1) = (I +
 f (0).
(16)


 Algorithm 2: In uence Propagation Input: W : the adjacency matrix that denotes the social network graph G(U, E).
L0: all users  weighted hint word lists, initially.
I: all users  in uence scores.
Output: LN : users  weighted hint word lists after in uence propagation.
Parameters and variables: M : number of users.
 : heat di usion rate matrix.
A: transition matrix.
 Ln: the propagated hint word lists after the nth iteration.
begin Compute   on graph G(U, E) by equation (12); Compute A on graph G(U, E) by equation (13);
 Set iteration number N ; h0   I; for n   1 to N do forall user i   [1, M ] do forall user j that Wij > 0 and (n 1) h i (n 1) > h j do forall hint-weight pair (h, w) in L(n 1) do i   h (n 1) i w(cid:4)   (h Append hint-weight pair (h, w(cid:4)  Ln j ; )   Wij   w; ) to (n 1) j end end end forall user i   [1, M ] do i   Combine the wights of the same hint Ln i and L(n 1) word in  Ln forall hint word h in Ln i do ; i Normalize h s weight to [0, 1] by dividing the sum of all weights in Ln i ; end end hn   (I + S N )h(n 1); end Return LN ; end This section presents the in uence propagation algorithm   The social graph G(U, E) denoted by the adjacency matrix,   Weighted hint-word lists of individuals, and   Users  in uence scores.
The  rst step is to build the heat di usion manifold.
Generally, it can be a social graph or a reversed social graph.
For a community where repliers are more in uential (e.g., a Q&A community), we take the social graph as the di u-sion manifold.
For a community where source of opinions weight more (e.g., a BBS or forum), we take the reversed social graph as the di usion manifold.
Since we conduct experiments on Q&A community, our algorithm directly uses the social graph as the di usion manifold in this paper.
The initial heat of users are their in uence scores.
The algorithm uses the discrete heat di usion model to conduct in uence propagation.
Algorithm 2 presents the pseudo code of in u-ence propagation.
A couple of steps deserve further discussion.
First, the number of di usion iterations, N , is a ected by the structure of the di usion manifold and all di usion rates.
Finding N is equal to solving such a problem: for a given threshold ,  nd N such that ||((I +  A N )N   e A)f (0)|| <  for any f (0) whose sum is one.
N can be empirically determined given data, or one can use this inequality as the termination criteria.
The other important step is re-weighting words after each di usion iteration.
Here, many heuristics can be employed.
The best method would to consult CTR of propagated words as feedback to determine the strength of a propagated word.
For example, if an ad produced for hint words  a  and  b  has enjoyed a high CTR, AdHeat should subsequently weight both words with greater strengths so that they can be propagated further.
On the contrary, if their CTR is low, their strengths may be decreased.
Lacking such feedback information, AdHeat initially uses two combined factors to determine the strength of a propagated hint word.
The  rst factor is the word weight at the source of propagation; the second factor is the heat di erence between the source and destination; and the third factor is the di usion rate from the source to destination.
When the heat di usion terminates, we obtain the users  weighted hint word lists.
Each user s hint words will now be di erent from their initial list of words.
We perform experiments on Google Confucius, which is a community-based Q&A product launched in twenty countries.
Users  main activities on Confucius are asking questions and providing answers.
Each user can optionally create a pro le.
Therefore, Confucius is like a social community in which users help each other in solving problems.
We sampled a subset of 5, 000 users in our experiments.
It is important to mention that though ad placement experiments were conducted on a subset of users, we employed AdHeat to analyze the entire social graph of half a million registered users (vast majority of the users are read-only ones and they do not have a registered account) to generate hint words, to compute in uence scores, and to propagate hints.
Post ID Table 3: Post Information.
Unique ID for the post.
Source User Target User The user who the source user followed.
The user who created the post.
Content The content of the post.
Time Stamp The time when the post is created.
We conducted three experiments.
The  rst experiment compared our in uence model without propagation with the content-based ad placement model.
The second experiment evaluated the in uence model with and without propagation.
The goal is to see whether propagation can help and by how much.
In the third experiment, we studied the behaviors of in uential users to gain more insights in designing e ective placement methods.
We describe our data set in three parts: (1) the data for conducting AdHeat, (2) the user set for displaying ads, and (3) the ad set.
The  rst part of data are organized by thread.
A thread contains a question post and several answers to that question.
Each post is organized by the format described in Table 3.
Since the interests of a user can be time-variant, we collected a month of user activities and interactions to conduct experiments.
For our experiments, we only run Ad-Heat once on the collected data, and then we tallied CTR to perform evaluation and comparison.
We expected CTR to decrease over time because users would unlikely to click on the same ads several times.
Nevertheless, this static evaluation framework provided us su cient information for conduct comparison and analysis.
We chose 5, 000 out of a pool of active Confucius users for targeting ads.
The selected users met the condition that they signed in Confucius at least 30 times a month.
We chose active users for showing ads because we would have some assurance that ads would be seen, and we could receive feedback during the experiment period.
During the experiment period, our system computed a set of targeted ads for each user, and randomly selected  ve ads for the user once a time.
This placement method provided some changes in ads between di erent sign-on sessions of a user.
Our ads come from Google AdSense, which has millions of ads provided by all kinds of advertisers.
The ads cover nearly all areas of interests such as sports, music, drug and fashion.
We query relevant ads from AdSense by providing hint words.
We use CTR as the evaluation metric.
For a group of experimental users, its CT R is computed by CT R[ds,de] = Clicks[ds,de] Impressions[ds,de] , (17) where ds and de denote the start day and the end day respectively, Impressions[ds,de] denotes the number of times that ads are shown to the group users during the period from ds to de, and Clicks[ds,de] denotes the number of times that users in the group click the showing ads.
Especially when ds = de, we get the CTR of one day.
To smooth one day s CTR, we use seven-day average CTR to report some results (in Table 4 and 5).
A seven-day window guarantees to cover Saturday and Sunday, when tra c is light and user behavior n e m e v o r p m






















 Day We performed the  rst experiment on Confucius for 18 days, and recorded the Impressions and Clicks of the two models of each day.
Let CTRinf and CTRcon denote the CTR of in uence-base model and that of the traditional content-based model, respectively.
Figure 2 reports the accumulated CTR improvement of the in uence-based model over the content-based one.
The accumulated CTR improvement in the ith day is computed by   CT Rcon [1,i] CT Rinf [1,i] CT Rcon [1,i] .
(19) Figure 2: The CTR improvement of in uence model over content model in 18 days.
may be di erent.
To simplify, we denote seven-day average CTR as
 i=0 CT Rd+i
 CT Rd = .
(18) Due to business con dentiality, we report only relative performance but not the absolute numbers of CTR when showing experimental results.
We randomly divided users who were shown ads into two equal-size groups.
Let G1, G2 denote the two groups.
  For users in G1, we used Google AdSense for targeting ads.
AdSense analyzes the contents of web pages for matching relevant ads.
In this way, the shown ads to a user only relate to the content of the Web page that he is viewing, but have nothing to do with his interests.
  For users in G2, we took the in uence model without propagation for advertising.
We implemented such a model by adding hint words to AdSense before it selected ads.
In this way, AdSense matches ads for each user based on two parts of words: the  rst part are the keywords of Web page content that the user is viewing, and the second part are the user s individual hint words.
We employed the hint word generation method of the AdHeat to generate 20 hint words for each user.
We hadn t performed in uence propagation to generate mixed hint words for each user yet in this experiment.
 
  



































 Table 4: Mean and standard error of CTR improvement of in uence model without propagation over content model.
During the 18-day period, the peak CTR improvement reaches 82% on the  fth day, then the improvement decreases to 51% on the  nal day.
The average improvement is 66.9%.
As predicted, CTR improvement began to decrease after  ve days.
This is partly because we generated only a few ads for each user and a user is unlikely to click on the same ads, and partly because while we kept hint-words static for 18 days, the users  interests might have shifted.
The result indicates that the in uence-based model of AdHeat to be e ective; at the same time, it suggests that hint words should be computed periodically to keep pace with interest drifts.
Table 4 reports seven-day average CTR improvement of the in uence-based over content-based model.
We used a seven-day window to compute average CTR to mask weekend behavior.
The symbol CT R   denotes CTR improvement.
We report both the mean improvement and standard error for twelve seven-day windows.
This experiment evaluated the in uence model with propagation comparing with that without propagation.
The goal was to evaluate whether hint word propagation is useful.
We applied AdHeat to the activities of the most recent month on Confucius to compute users  hint words and then propagate those words throughout the network.
We again divided users into two groups, G1 and G2, for showing ads.
In the previous experiment, we targeted ads for G1 by content model and G2 by in uence model.
In this experiment, we targeted G1 using the in uence model with propagation (a more e ective model) and G2 using the in uence model without propagation.
 
  



































 Table 5: Mean and standard error of CTR improvement of in uence model with propagation over the in uence model without propagation.
We also ran this experiment for 18 days.
Figure 3 shows the accumulated CTR improvement of the propagation effect.
The peak improvement reaches an impressive 102% on day three.
Propagation helps!
The improvement then started to steadily decrease after that to 41% on the  nal day.
The average improvement is 66.4%.
Since both schemes are in uence-based, and both served a few ads in the span of 18 days, we can eliminate the e ect of user boredom from n e m e v o r p m












 s t s o
 f o m u
 d e z i l a m r o











 Group#




 d e z i l a m r o









 Group#










 Day Figure 4: Users  Performance Evaluation based on Content and CTR contribution.
(a) Content (b) CTR Figure 3: The CTR improvement of in uence model with propagation over that without propagation in 18 days.
this experiment.
The only telling factor of the decreases in improvement should more likely related to timeliness of the propagated words.
The same to the  rst experiment, Table 5 reports the mean and standard error of seven-day average CTR improvement of in uence model with propagation over without propagation.
mance We have seen that hint-word-propagation helps improve CTR.
We next report our  ndings on the behaviors of in u-ential users versus non-in uential ones.
This experiment evaluated the users  performance on Confucius based on (1) their content contribution and (2) their revenue contribution respectively.
We quanti ed their content contribution by their number of posts during the experimental period, whereas we measured their revenue contribution based on their CTR data.
We ran the experiments as follows: First, we ran AdHeat on recent generated contents (one month) of Confucius to compute all related users  in uence scores and individual hint words.
Second, we reordered the users to be shown ads by sorting them in decreased in uence-score order, and then divided them into  ve groups of the same size.
G1, G2, G3, G4, G5 denote the  ve groups: G1 includes the most in uential users, then G2, G3, G4, and G5 in decreasing in uence.
Third, we employed user in uence model without propagation to target them ads and tracked their CTRs.
We also tracked the number of posts of each group in order to quantify their content contribution.
Figure 4(a) shows the content contribution of each group.
The group s performance in term of content contribution was directly proportional to their in uence.
The more in u-ential the group was, the more posts they created on Confucius.
By contrast, Figure 4(b) shows their contribution in term of revenue.
We can see that the most in uential group has lower CTR than that of the least in uential group.
The most in uential users contributed abundant opinions (shown in  gure 4(a)), so the ads shown to them based on their individual hint words should be highly relevant.
However, their lowest average CTR indicates that relevance could be counterproductive for them, because they do not need advice on their well-known subjects.
For non-in uential users, they are also less likely to click on ads generated based on content, since they did not generate enough content for content-based ad matching to be e ective.
The result of this experiment, together with those reported by the previous experiments indicate two productive avenue for matching ads on social networks.
First, non-in uential users do not contribute enough content so that the traditional content-based ad model may be ine ective due to information sparsity.
Second, the propagation of hint words appears to be helpful to remedy the information sparsity problem.
Furthermore, correlating ads with information that one follows makes AdHeat e ective.
In this paper, we presented an in uence-based social ad model.
In our proposed AdHeat algorithm, we consider user in uence in addition to relevance for matching ads.
AdHeat  rst identi es the most relevant words or hints for each user based on their individual activities.
It then employs HITS to compute for each user an in uence score based on user interactions.
The hint words are propagated from in uential users to the others like heat di uses throughout a manifold.
Finally, AdHeat uses the hint words aggregated for each user to generate for her the most relevant ads.
The in uence-based model not only alleviates the information sparsity problem of non-in uential or inactive users, but also improves ads relevance.
We performed experiments on a large online Q&A community with half a million users.
The experimental results show that AdHeat outperforms the relevance model on CTR (click through rate) by signi cant margins.
The authors would like to thank Xiance Si, Brian Wong and Alice Li for their previous work, and Jun Yao for his help in conducting experiments on Google Confucius.
