Twitter, a popular microblogging service, has received much attention recently.
It is an online social network used by millions of people around the world to remain socially connected to their friends, family members and coworkers through their computers and mobile phones [18].
Twitter asks one question,  What s happening?  Answers must be fewer than 140 characters.
A status update message, called a tweet, is often used as a message to friends and colleagues.
A user can follow other users; her followers can read her tweets.
A user who is being followed by another user need not necessarily reciprocate by following them back, which renders the links of the network as directed.
After its launch on July 2006, Twitter users have increased rapidly.
They are currently estimated as 44.5 million worldwide1.
Monthly growth of users has been 1382% year-on-year, which makes Twitter one of the fastest-growing sites in the world2.
Some researchers have examined Twitter: Java et al. analyzed Twitter as early as 2007.
They described the social network of Twitter users and investigated the motivation of Twitter users [13].
Huberman et al. analyzed more than 300 thousand users.
They discovered that the relation between friends (de ned as a person to whom a user has directed posts using an  @  symbol) is the key to understanding interaction in Twitter [11].
Recently, boyd et al. investigated retweet activity, which is the Twitter-equivalent of email forwarding, by which users post messages originally posted by others [5].
Twitter is categorized as a microblogging service.
Mi-croblogging is a form of blogging that allows users to send brief text updates or micromedia such as photographs or audio clips.
Microblogging services other than Twitter include Tumblr, Plurk, Emote.in, Squeelr, Jaiku, identi.ca, and oth-ers3.
They have their own characteristics.
Some examples are the following: Squeelr adds geolocation and pictures to microblogging; and Plurk has a timeline view integrating video and picture sharing.
Although our study, which is based on their real-time nature, is applicable to other mi-croblogging services, we speci cally examine Twitter in this study because of its popularity and data volume.
An important common characteristic among microblog-ging services is their real-time nature.
Although blog users 1http://www.techcrunch.com/2009/08/03/twitter-reaches- 44.5-million-people-worldwide-in-june-comscore/
 http://blog.nielsen.com/nielsenwire/online mobile/twitters-tweet-smell-of-success/ 3www.tumblr.com, www.squeelr.com, www.jaiku.com, identi.ca www.plurk.com, www.emote.in, quake or shaking could be keywords, but users might also make tweets such as  I am attending an Earthquake Conference , or  I am shaking hands with his boss .
We prepare the training data and devise a classi er using a support vector machine based on features such as keywords in a tweet, the number of words, and the context of target-event words.
After doing so, we can produce a probabilistic spatiotem-poral model of an event.
We make a crucial assumption: each Twitter user is regarded as a sensor and each tweet as sensory information.
These virtual sensors, which we call social sensors, are of a huge variety and have various characteristics: some sensors are very active; others are not.
A sensor could be inoperable or malfunctioning sometimes (e.g., a user is sleeping, or busy doing something).
Consequently, social sensors are very noisy compared to ordinal physical sensors.
Regarding each Twitter user as a sensor, the event detection problem can be reduced into one of object detection and location estimation in a ubiquitous/pervasive computing environment in which we have numerous location sensors: a user has a mobile device or an active badge in an environment where sensors are placed.
Through infrared communication or a WiFi signal, the user location is estimated as providing location-based services such as navigation and museum guides [9, 25].
We apply Kalman  lters and particle  lters, which are widely used for location estimation in ubiquitous/pervasive computing.
As an application, we develop an earthquake reporting system using Japanese tweets.
Because Japan has numerous earthquakes and because Twitter users are similarly numerous and geographically dispersed throughout the country, it is sometimes possible to detect an earthquake by monitoring tweets.
In other words, many earthquake events occur in Japan.
Many sensors are allocated throughout the country.
Figure 1 portrays a map of Twitter users worldwide (obtained from UMBC eBiquity Research Group); Fig. 2 depicts a map of earthquake occurrences worldwide (using data from Japan Meteorological Agency (JMA)).
It is apparent that the only intersection of the two maps, which means regions with many earthquakes and large Twitter users, is Japan.
Other regions such as Indonesia, Turkey, Iran, Italy, and Paci c coastal US cities such as Los Angeles and San Francisco also roughly intersect, although their respective densities are much lower than in Japan.
Our system detects an earthquake occurrence and sends an email, possibly before an earthquake actually arrives at a certain location: An earthquake propagates at about 3 7 km/s.
For that reason, a person who is 100 km distant from an earthquake has about 20 s before the arrival of an earthquake wave.
We present a brief overview of Twitter in Japan: The Japanese version of Twitter was launched on April 2008.
In February 2008, Japan was the No.
2 country with respect to Twitter tra c5.
At the time of this writing, Japan has the 11th largest number of users (more than half a million users) in the world.
Although event detection (particularly the earthquake detection) is currently possible because of the high density of Twitter users and earthquakes in Japan, our study is useful to detect events of various types throughout the world.
The contributions of this paper are summarized as follows:   The paper provides an example of integration of semantic analysis and real-time nature of Twitter, and presents potential uses for Twitter data.
5http://blog.twitter.com/2008/02/twitter-web-tra c-around- world.html Figure 1: Twitter user map.
Figure 2: Earthquake map.
typically update their blogs once every several days, Twitter users write tweets several times in a single day.
Users can know how other users are doing and often what they are thinking about now, users repeatedly return to the site and check to see what other people are doing.
The large number of updates results in numerous reports related to events.
They include social events such as parties, baseball games, and presidential campaigns.
They also include disastrous events such as storms,  res, tra c jams, riots, heavy rainfall, and earthquakes.
Actually, Twitter is used for various real-time noti cation such as that necessary for help during a large-scale  re emergency and live tra c updates.
Adam Ostrow, an Editor in Chief at Mashable, a social media news blog, wrote in his blog about the interesting phenomenon of real-time media as follows4: Japan Earthquake Shakes Twitter Users ...
And Beyonce: Earthquakes are one thing you can bet on being covered on Twitter  rst, because, quite frankly, if the ground is shaking, you re going to tweet about it before it even registers with the USGS and long before it gets reported by the media.
That seems to be the case again today, as the third earthquake in a week has hit Japan and its surrounding islands, about an hour ago.
The  rst user we can  nd that tweeted about it was Ricardo Duran of Scottsdale, AZ, who, judging from his Twitter feed, has been traveling the world, arriving in Japan yesterday.
This post well represents the motivation of our study.
The research question of our study is,  can we detect such event occurrence in real-time by monitoring tweets?  This paper presents an investigation of the real-time nature of Twitter and proposes an event noti cation system that monitors tweets and delivers noti cation promptly.
To obtain tweets on the target event precisely, we apply semantic analysis of a tweet: For example, users might make tweets 4http://mashable.com/2009/08/12/japan-earthquake/ studies have been made in the seismology  eld.
This paper presents an innovative social approach that has not been reported before in the literature.
This paper is organized as follows: In the next section, we explain semantic analysis and sensory information, followed by the spatiotemporal model in Section 3.
In Section 4, we describe the experiments and evaluation of event detection.
The earthquake reporting system is introduced into Section
 and discussion.
Finally, we conclude the paper.
As described in this paper, we target event detection.
An event is an arbitrary classi cation of a space time region.
An event might have actively participating agents, passive factors, products, and a location in space/time [21].
We target events such as earthquakes, typhoons, and tra c jams, which are visible through tweets.
These events have several properties: i) they are of large scale (many users experience the event), ii) they particularly in uence people s daily life (for that reason, they are induced to tweet about it), and iii) they have both spatial and temporal regions (so that real-time location estimation is possible).
Such events include social events such as large parties, sports events, exhibitions, accidents, and political campaigns.
They also include natural events such as storms, heavy rainfall, tornadoes, typhoons/hurricanes/cyclones, and earthquakes.
We designate an event we would like to detect using Twitter as a target event.
To detect a target event from Twitter, we search from Twitter and  nd useful tweets.
Tweets might include mentions of the target event.
For example, users might make tweets such as  Earthquake!  or  Now it is shaking .
Consequently, earthquake or shaking might be keywords (which we call query words).
But users might also make tweets such as  I am attending an Earthquake Conference , or  Someone is shaking hands with my boss .
Moreover, even if a tweet is referring to the target event, it might not be appropriate as an event report.
For instance, a user makes tweets such as  The earthquake yesterday was scaring , or  Three earthquakes in four days.
Japan scares me.  These tweets are truly descriptions of the target event, but they are not real-time reports of the events.
Therefore, it is necessary to clarify that a tweet is truly referring to an actual earthquake occurrence, which is denoted as a positive class.
To classify a tweet into a positive class or a negative class, we use a support vector machine (SVM) [14], which is a widely used machine-learning algorithm.
By preparing positive and negative examples as a training set, we can produce a model to classify tweets automatically into positive and negative categories.
We prepare three groups of features for each tweet as follows: Features A (statistical features) the number of words in a tweet message, and the position of the query word within a tweet.
Features B (keyword features) the words in a tweet6.
tweet by converting it into a word ID.
Features C (word context features) the words before and after the query word.
To process Japanese texts, morphological analysis is conducted using Mecab7, which separates sentences into a set of words.
In the case of English, we apply standard stop-word elimination and stemming.
We compare the usefulness of the features in Section 4.
Using the obtained model, we can classify whether a new tweet corresponds to a positive class or a negative class.
We can search the tweet and classify it into a positive class if a user makes a tweet on a target event.
In other words, the user functions as a sensor of the event.
If she makes a tweet about an earthquake occurrence, then it can be considered that she, as an  earthquake sensor , returns a positive value.
A tweet can therefore be considered as a sensor reading.
This is a crucial assumption but it enables application of various methods related to sensory information.
Assumption 2.1 Each Twitter user is regarded as a sensor.
A sensor detects a target event and makes a report probabilistically.
The virtual sensors (or social sensors) have various characteristics: some sensors are activated (i.e. make tweets) only by speci c events, although others are activated to a wider range of events.
The sensors are vastly numerous; there are more than 40 million  Twitter sensors  worldwide.
A sensor might be inoperable or operating incorrectly sometimes (which means a user is not online, sleeping, or is busy doing something).
Therefore, this social sensor is noisier than ordinal physical sensors such as location sensors, thermal sensors, and motion sensors.
A tweet can be associated with a time and location: each tweet has its post time, which is obtainable using a search API.
In fact, GPS data are attached to a tweet sometimes, e.g.
when a user is using an iPhone.
Alternatively, each Twitter user makes a registration on their location in the user pro le.
The registered location might not be the current location of a tweet.
However, we think it is probable that a person is near the registered location.
For this study, we use GPS data and the registered location of a user.
We do not use the tweet for spatial analysis if the location is not available (We use the tweet information for temporal analyses.
).
Assumption 2.2 Each tweet is associated with a time and location, which is a set of latitude and longitude.
By regarding a tweet as a sensory value associated with a location information, the event detection problem is reduced to detecting an object and its location from sensor readings.
Estimating an object s location is arguably the most fundamental sensing task in many ubiquitous and pervasive computing scenarios [7].
Figure 3 presents an illustration of the correspondence between sensory data detection and tweet processing.
The motivations are the same for both cases: to detect a target event.
Observation by sensors corresponds to an observation by Twitter users.
They are converted into values by a classi er.
A probabilistic model is used to detect an event, as described in the next section.
7http://mecab.sourceforge.net/ Figure 3: Correspondence between event detection from Twitter and object detection in a ubiquitous environment.
For event detection and location estimation, we use probabilistic models.
In this section, we  rst describe event detection from time-series data.
Then we describe the location estimation of a target event.
Each tweet has its post time.
When a target event occurs, how can the sensors detect the event?
We describe the temporal model of event detection.
First, we examine the actual data.
Figures 4 and 5 respectively present the numbers of tweets for two target events: an earthquake and a typhoon.
It is apparent that spikes occur on the number of tweets.
Each corresponds to an event occurrence.
In the case of an earthquake, more than
 phoon, Japan s main population centers were hit by a large typhoon (designated as Melor) in October 2009.
The distribution is apparently an exponential distribution.
The probability density function of the exponential distribution is f (t;  ) =  e t where t > 0 and   > 0.
The exponential distribution occurs naturally when describing the lengths of the inter-arrival times in a homogeneous Poisson process.
In the Twitter case, we can infer that if a user detects an event at time 0, assume that the probability of his posting a tweet from t to  t is  xed as  .
Then, the time to make a tweet can be considered as an exponential distribution.
Therefore, even if a user detects an event, she might not make a tweet right away if she is not online or doing something.
She might make a post only after such problems are resolved.
Therefore, it is reasonable that the distribution of the number of tweets follows an exponential distribution.
Actually the data  t very well to an exponential distribution; we get   = 0.34 with R2 = 0.87 on average.
To assess an alarm, we must calculate the reliability of multiple sensor values.
For example, a user might make a false alarm by writing a tweet.
It is also possible that the Figure 5: Number of tweets related to typhoons.
classi er misclassi es a tweet into a positive class.
We can design the alarm probabilistically using the following two facts:   The false-positive ratio pf of a sensor is approximately
   Sensors are assumed to be independent and identically distributed (i.i.d.
), as we explain in Section 3.3.
Assuming that we have n sensors, which produce positive signals, the probability of all n sensors returning a false alarm is pn f .
Therefore, the probability of event occurrence can be estimated as 1   pn f .
Given n0 sensors at time 0 and n0e t sensors at time t. Therefore, the number of sensors we expect at time t is n0(1   e (t+1))/(1   e ).
Consequently, the probability of an event occurrence at time t is poccur(t) = 1   pn0(1 e (t+1))/(1 e ) f .
We can calculate the probability of event occurrence if we set   = 0.34 and pf = 0.35.
For example, if we receive n0 positive tweets and would like to make an alarm with a false-positive ratio less than 1%, then we can calculate the expected wait time twait to deliver the noti cation as twait = (1   (0.1264/n0))/0.7117   1.
Although many works describing event detection have been reported in the data mining  eld, we use this simple approach utilizing the characteristics of the classi er and the distribution.
Each tweet is associated with a location.
We describe how to estimate the location of an event from sensor readings.
t   Rn t   Rn To de ne the problem of location estimation, we consider the evolution of the state sequence {xt, t   N} of a target, given xt = ft(xt 1, ut), where ft : Rn t   Rn t is a possibly nonlinear function of the state xt 1.
Furthermore, ut is an i.i.d.
process noise sequence.
The objective of tracking is to estimate xt recursively from measurements zt = ht(xt, nt), where ht : Rn is a possibly nonlinear function, and where nt is an i.i.d.
measurement noise sequence.
From a Bayesian perspective, the tracking problem is to calculate, recursively, some degree of belief in the state xt at time t, given data zt up to time t.
Presuming that p(xt 1|zt 1) is available, the prediction p(xt|xt 1) stage uses the following equation: p(xt|zt 1) = p(xt 1|zt 1) dxt 1.
Here we use a Markov process of order one.
Therefore, we can assume that p(xt|xt 1, zt 1) = p(xt|xt 1).
In the update stage, Bayes  rule is applied as p(xt|zt) = p(zt|xt)p(xt|zt 1)/p(zt|zt 1), where the normalizing constant is p(zt|zt 1) = p(zt|xt)p(xt|zt 1)dxt.
t To solve the problem, several methods of Bayesian  lters are proposed such as Kalman  lters, multi-hypothesis tracking, grid-based and topological approaches, and particle  l-ters [7].
For this study, we use Kalman  lters and particle  lters, both of which are widely used in location estimation.
The Kalman  lter assumes that the posterior density at every time step is Gaussian and that it is therefore param-eterized using a mean and covariance.
We can write it as xt = Ftxt 1 + ut and zt = Htxt + nt.
Therein, Ft and Ht are known matrices de ning the linear functions.
The respective covariants of ut and nt are Qt and Rt.
The Kalman  lter algorithm can consequently be viewed as the following recursive relation: p(xt 1|zt 1) = N (xt 1; mt 1|t 1, Pt 1|t 1) p(xt|zt 1) = N (xt; mt|t 1, Pt|t 1) p(xt|zt) = N (xt; mt|t, Pt|t) where mt|t 1 = Ftmt 1|t 1+ut, Pt|t 1 = Qt+FtPt 1|t 1F T t , mt|t = mt|t 1 + Kt(zt   Htmt|t 1), and Pt|t = Pt|t 1   KtHtPt|t 1, and where N (x; m, P ) is a Gaussian density with argument x, mean m, covariance P , and for which the following are true: Kt = Pt|t 1H T St = HtPt|t 1H T t + Rt.
This is the optimal solution to the tracking problem if the assumptions hold.
A Kalman  lter works better in a linear Gaussian environment.
, and  1 t t S When utilizing Kalman  lters, it is important to construct a good model and parameters.
As described in this paper, we implement models for two cases as follows.
Case 1: Location estimation of an earthquake center.
In this case, we need not consider the time-transition property, thereby we use only location information x(dx, dy).
We set xt = (dxt , dyt )t where dxt is the longitude and dyt is the latitude; zt = (dxt , dyt ), F = I2, H = I2, and ut = 0.
We assume that errors of temporal transition do not occur, and assume that errors in observation are Gaussian for simplicity: Qt = 0, Rt = [ 2], and nt = N (0; Rt).
Case 2: Trajectory estimation of a typhoon.
We need to consider both the location and the velocity of an event.
We apply Newton s motion equation as follows: xt = (dxt , dyt , vxt , vyt )t where vxt is the velocity on longitude, and vyt is the velocity on latitude.
We set zt = Algorithm 1 Particle  lter algorithm
 from twitter users  geographic distribution in Japan.
means N discrete hypothesis.
(1) Generate a particle set S0 = (s0
 ) and allocate them on the map evenly: particle sk
 (xk 0 ), where x corresponds to the longitude, y corresponds to the latitude and w corresponds to the weight.
0 , wk 0 , yk 0, s2 0, s1
 (2) Weight them based on weight distribution Dw(x, y).
(1) Re-sample N particles from a particle set St using weights of respective particles and allocate them on the map.
(We allow re-sampling of more than one of the same particles.)
(2) Generate a new particle set St+1 and weight them based on weight distribution Dw(x, y).
Newton s motion equation.
(xk t , yk t ) = (xk t 1 + vxt 1  t + yk t 1 + vyt 1  t +  t2) axt 1  t2,
 ayt 1
 (vxt , vyt ) = (vxt 1 + axt 1 , vyt 1 , ayt 1 ) axt = N (0;  2), ayt = N (0;  2).
m(mx, my) as follows.
dxk t = mx   xk t , t )   t = Dw(xk t , yk wk t = my   yk dyk     exp ( 2 )
 t   (dxk t !
2 + dyk t 2 2
 o(xt, yt) by the average of s(xt, yt)   St.
  ,


   (dxt , dyt )t, F =
 0  t



 Bt = I4, ut = ( axt 2  t2, ayt 2  t2, axt  t, ayt  t)t where axt is the acceleration on longitude, and ayt is the acceleration on latitude.
Similarly to Case 1, we assume for simplicity that errors of temporal transition do not occur, and that errors in observation are Gaussian, as Qt = 0, Rt = [ 2], and nt = N (0; Rt).
A particle  lter is a probabilistic approximation algorithm implementing a Bayes  lter, and a member of the family of sequential Monte Carlo methods.
For location estimation, it maintains a probability distribution for the location estimation at time t, designated as the belief Bel(xt) = {xi t is a discrete hypothesis about the location of the object.
The wi t are non-negative weights, called importance factors, which sum to one.
t}, i = 1 .
.
.
n. Each xi t, wi The Sequential Importance Sampling (SIS) algorithm is a Monte Carlo method that forms the basis for particle  lters.
The SIS algorithm consists of recursive propagation of the sequentially.
We use a more advanced algorithm with re-sampling [1].
We employ weight distribution Dw(x, y) which is obtained from the twitter user distribution to consider the biases of user locations8 .The algorithm is shown in Algo.
1.
time Event Some information related to an event di uses through Twitter.
For example, if a user detects an earthquake and makes a tweet about the earthquake, then a follower of that user might make tweets about that.
This characteristic is important because, in our model, sensors might not be mutually independent, which would have an undesired e ect in terms of event detection.
Figures 6, 7, and 8 respectively portray the information  ow networks for an earthquake, a typhoon, and a new Nintendo DS game9.
We infer the network as follows: Assume that user A follows user B.
If user B makes a tweet about an event, and soon thereafter user A makes a tweet about an event, then we consider the information  ows from B to A10.
This de nition is similar to those used in other studies of information di usion (e.g.
[15, 16]).
In the case of earthquakes and typhoons, very little information di usion takes place on Twitter.
On the other hand, the release of a new game illustrates the scale and rapidity of information di usion.
Therefore, we can assume that the sensors are i.i.d.
when considering real-time event detection such as typhoons and earthquakes.
In this section, we describe the experimental results and evaluation of tweet classi cation and location estimation.
The whole algorithm is shown in Algo.
2.
We prepare a set of queries Q for a target event.
We  rst search for tweets T including the query set Q from Twitter every s seconds.
We use a search API11 to search tweets.
In the earthquake case, we set Q = { earthquake  and  shaking }; in the typhoon case, we set Q = { typhoon }.
We set s as 3 s. After determining a classi cation and obtaining a positive example, the system makes a calculation of a temporal and spatial probabilistic model.
We consider that an event is detected if the probability is higher than a certain threshold (poccur(t) > 0.95 in our case).
The location information of each tweet is obtained and used for location estimation of the event.
In the earthquake reporting system explained in the next section, the system quickly sends an email (usually mobile email) to registered users.
For classi cation of tweets, we prepared 597 positive examples that report earthquake occurrence as a training set.
The classi cation performance is presented in Table 1.
We use two query words earthquake and shaking; performances using either query are shown.
We used a linear kernel for SVM.
We obtain the highest F value when we use feature
 user distribution that is proportional to the number of tweets in each region.
which was recently released in September 3, 2009.
which is a type of message that repeats some information that was previously tweeted by another user.
11search.twitter.com Algorithm 2 Event detection and location estimation algorithm.
tweets T .
the classi cation to obtain value vt = {0, 1}.
T ; if it is above the threshold pthre

 occur, then proceed to step
 gitude lt by i) utilizing the associated GPS location, ii) making a query to Google Map the registered location for user ut.
Set lt = null if both do not work.
using Kalman  ltering or particle  ltering.
Table 1: Performance of classi cation.
(i) earthquake query: Features


 All Recall



 Precision



 F -value



 (ii) shaking query: Features


 All Recall



 Precision



 F -value



 A and all features.
Surprisingly, features B and feature C do not contribute much to the classi cation performance.
When an earthquake occurs, a user becomes surprised and might produce a very short tweet.
It is apparent that the recall is not so high as the precision.
That result is attributable to the usage of query words in a di erent context than we intend.
Sometimes it is di cult even for humans to judge whether a tweet is reporting an actual earthquake or not.
Some examples are that a user might write  Is this an earthquake or a truck passing?  Overall, the classi cation performance is good considering that we can use multiple sensor readings as evidence for event detection.
Figure 9 presents the location estimation of an earthquake on August 11.
We can  nd that many tweets originate from a wide region in Japan.
The estimated location of the earthquake (shown as estimation by particle  lter) is close to the actual center of the earthquake, which shows the e ciency of the location estimation algorithm.
Table 2 presents results of location estimation based on a total of 621 tweets for
 We compare Kalman  ltering and particle  ltering, with the weighted average and the median as a baseline.
The weighted average simply takes the average of latitudes and longitude on all the positive tweets, and median simply takes their median.
Particle  lters perform well compared to other methods.
The poor performance of Kalman  ltering implies that the linear Gaussian assumption does not hold for this problem.
We can  nd that if the center of the earthquake is in an oceanic area, it is more di cult to locate it precisely from tweets.
Similarly, it becomes more di cult to make tion di usion network.
Figure 7: Typhoon information di usion network.
Figure 8: New Nintendo game information di usion network.
Figure 9: Earthquake location estimation based on tweets.
Balloons show the tweets on the earthquake.
The cross shows the earthquake center.
Red represents early tweets; blue shows later tweets.
good estimations in less-populated areas.
That is reasonable: all other things being equal, the greater the number of sensors, the more precise the estimation will be.
Figure 10 depicts a trajectory estimation of typhoon Melor based on a total of 2037 tweets.
In the case of an earthquake, the center is one location.
However, in the case of a typhoon, the center moves and produces a trajectory.
A comparison of the performance is presented in Table 3.
The particle  lter works well and outputs a trajectory resembling the actual trajectory.
We developed an earthquake reporting system using the event detection algorithm.
Earthquake information is much more valuable if it is received in real time.
We could turn o  a stove or heater in our house and hide ourselves under a desk or table if we were to have several seconds  notice before an earthquake actually hits.
Several Twitter accounts report earthquake occurrence.
Some examples are that the United States Geological Survey (USGS) feeds tweets on world earthquake information, but such information is not useful for prediction or early warning.
Vast amounts of work have been done on intermediate-Figure 10: Typhoon trajectory estimation based on tweets.
term earthquake prediction in the seismology  eld (e.g.
[23]).
Various attempts have also been made to produce short-term forecasts to realize an earthquake warning system by observing electromagnetic emissions from ground-based sensors and satellites [3].
Other precursor signals such as ionospheric changes, infrared luminescence, and air-conductivity change, along with traditional monitoring of movements of the earth s crust, are investigated.
In Japan, the government has allocated a considerable amount of its budget to mitigating earthquake damage.
An earthquake early warning service has been operated by JMA since 2007.
It provides advance announcements of the estimated seismic intensities and expected arrival times.
It detects P-waves (primary waves) and makes an alert immediately so that earthquake damage can be mitigated through countermeasures such as slowing trains and controlling elevators.
In fact, P-waves are a type of elastic wave that can travel faster than S-waves (secondary waves), which cause shear e ects and engender much more damage.
The proposed system, called Toretter12, has been operated since August 8 of this year.
A system screenshot is depicted in Fig. 11.
Users can see the detection of past earthquakes.
They can register their emails to receive notices of future earthquake detection reports.
A sample email is presented It alerts users and urges them to prepare for in Fig. 12.
of the estimated latitude and the longitude to the actual ones, and their Euclidean distance.
Smaller distance means better performance.
Date Aug. 10 01:00 Aug. 11 05:00 Aug. 13 07:50 Aug. 17 20:40 Aug. 18 22:17 Aug. 21 08.51 Aug. 24 13:30 Aug. 24 14:40 Aug. 25 02:22 Aug. 25 20:19 Aug. 31 00:46 Aug. 31 21:11 Sep. 3 22:26 Sep. 4 11:30 Sep. 05 10:59 Sep. 08 01:24 Sep. 10 18:29 Sep. 16 21:38 Sep. 22 20:40 Oct. 1 19:43 Oct. 5 09:35 Oct. 6 07:49 Oct. 10 17:43 Oct. 12 16:10 Oct. 12 18:42 Average distance Actual center long.
lat.
Median (baseline) Weighted ave. (baseline) Kalman  lters Particle  lters lat.
-0.40 -1.90 -2.90
 -0.40 -4.50

 -2.70 -3.60 -5.90
 -11.10
 -3.70
 -3.50
 -2.00 long.
-0.80 -0.90 -9.60

 -4.40

 -3.90 -1.80 -3.60 -3.60 -0.10 -1.70 -8.30 -8.90 -10.20 -0.20 -7.50 -3.80 -3.10
 -5.40
 -4.40 dist.
lat.
-0.50 -1.30 -6.10
 -1.10


 -1.40 -2.50 -4.90
 -10.80 -0.60 -2.70 -0.20 -1.40
 -1.50 long.
-0.10 -0.30 -2.30

 -1.00

 -3.80 -0.70 -2.30

 -0.90 -3.10 -3.90 -7.10
 -3.10 -1.80 -2.00
 -2.10
 -0.90 dist.
lat.
-0.50 -1.50 -5.20
 -1.30


 -1.30 -4.50 -4.50
 -11.30 -0.30 -2.60 -0.10 -2.20
 -1.70 long.
-0.50 -0.20 -3.75

 -0.60

 -3.70 -1.60 -2.20

 -1.00 -3.30 -6.00 -7.20
 -3.80 -1.50 -1.60
 -2.60
 -1.40 dist.
lat.
-0.80

 -1.80
 -0.30 -0.20

 -2.10
 -0.90 -0.20 -7.80 -0.70



 -1.00 long.
-0.90 -2.70 -0.80



 -1.90
 -0.30 -1.70

 -5.80 -3.60 -7.00 -2.50 -3.00
 -1.70
 -1.30
 -0.60 dist.
Table 3: Trajectory estimation accuracy of typhoon Melor based on tweets.
Date Location Oct. 7 12:00 Oct. 7 15:00 Oct. 7 18:00 Oct. 7 21:00 Oct. 8 0:00 Oct. 8 6:00 Oct. 8 9:00 Oct. 8 12:00 Oct. 8 15:00 Oct. 8 18:00 Oct. 8 21:00 Average distance lat.
long.
Median (baseline) Weighted ave. (baseline) lat.
-1.90 -3.70 -4.10 -3.90 -2.30
 -0.60



 long.
-1.90 -2.60 -1.90 -3.50 -0.10





 dist.
lat.
-5.20 -3.80 -4.40 -3.60 -2.30





 long.
-3.60 -2.40 -3.50 -3.30 -0.90





 dist.
Kalman  lters Particle  lters lat.
-3.90
 -6.40 -10.90 -12.60





 long.
-1.10

 -1.60 -20.40



 -18.80
 dist.
lat.
-4.70 -2.70 -3.20 -3.70 -2.90 -0.60




 long.
-0.70 -0.50 -3.50 -2.50 -0.80



 dist.
Table 5: Earthquake detection performance for two months from August 2009.
 Promptly detected  denotes detection within a minutes.
JMA intensity scale Num.
of earthquakes Detected Promptly detected 2 or more 3 or more 4 or more








 the earthquake.
It is hoped that the email is received by a user shortly before the earthquake actually arrives.
An earthquake is transmitted through the earth s crust at about
 arrival at a point that is 100 km distant.
Table 4 presents some facts about earthquake detection and noti cation using our system.
This table shows that we investigated 10 earthquakes during 18 August   2 September, all of which our system detected.
The  rst tweet of an earthquake is usually made within a minute or so.
The delay can result from the time for posting a tweet by a user, the time to index the post in Twitter servers, and the time to make queries by our system.
We apply classi cation for 49,314 tweets retrieved by query words in one month; re sults show 6,291 positive tweets posted by 4,218 users.
Every earthquake elicited more than 10 tweets within 10 min, except one in Bungo-suido, which is the sea between two large islands: Kyushu and Shikoku.
Our system sent emails mostly within a minute, sometimes within 20 s. The delivery time is far faster than the rapid broadcast of announcements of JMA, which are widely broadcast on TV; on average, a JMA announcement is broadcast 6 min after an earthquake occurs.
Statistically, we detected 96% of earthquakes that were stronger than JMA seismic intensity scale13 3 or more as shown in Table 5.
Twitter is an interesting example of the most recent social media: numerous researchers have examined Twitter.
Aside from the studies introduced into Section 1, several
 and Taiwan to indicate earthquake strength.
Unlike the Richter magnitude scale, the JMA scale describes the degree of shaking at a point on the earth s surface.
For example, the JMA scale 3 is, by de nition, one which is  felt by most people in the building.
Some people are frightened .
It is similar to the Modi ed Mercalli scale IV, which is used along with the Richter scale in the US.
Date Aug. 18 Aug. 18 Aug. 21 Aug. 25 Aug. 25 Aug. 27 Aug. 27 Aug. 31 Sep. 2 Sep. 2 Magnitude









 Location Tochigi Suruga-wan Chiba Uraga-oki Fukushima Wakayama Suruga-wan Fukushima Suruga-wan Bungo-suido Time









 Email sent time #tweets within 10 min Announce of JMA





























   and products for marketing purposes.
It can classify positive and negative tweets, and can identify in uential users.
The classi cation of tweets might be done similarly to our algorithm.
Web2express Digest15 is a website that auto-discovers information from Twitter streaming data to  nd real-time interesting conversations.
It also uses natural language processing and sentiment analysis to discover interesting topics, as we do in our study.
Various studies have been made of the analysis of web data (except for Twitter) particularly addressing the spatial aspect: The most relevant study to ours is one by Back-strom et al.
[2].
They use queries with location (obtained by IP addresses), and develop a probabilistic framework for quantifying spatial variation.
The model is based on a decomposition of the surface of the earth into small grid cells; they assume that for each grid cell x, there is a probability px that a random search from this cell will be equal to the query under consideration.
The framework  nds a query s geographic center and spatial dispersion.
Examples include baseball teams, newspapers, universities, and typhoons.
Although the motivation is very similar, events to be detected di er.
Some examples are that people might not make a search query earthquake when they experience an earthquake.
Therefore, our approach complements their work.
Similarly to our work, Mei et al. targeted blogs and analyzed their spatiotemporal patterns [17].
They presented examples for Hurricane Katrina, Hurricane Rita, and iPod Nano.
The motivation of that study is similar to ours, but Twitter data are more time-sensitive; our study examines even more time-critical events e.g.
earthquakes.
Some works have targeted collaborative bookmarking data, as Flickr does, from a spatiotemporal perspective: Serdyukov et al. investigated generic methods for placing photographs on Flickr on the world map [24].
They used a language model to place photos, and showed that they can estimate the language model e ectively through analyses of annotations by users.
Rattenbury et al. [22] speci cally examined the problem of extracting place and event semantics for tags that are assigned to photographs on Flickr.
They proposed scale-structure identi cation, which is a burst-detection method based on scaled spatial and temporal segments.
Location estimation studies are often done in the  eld of ubiquitous computing.
Estimating an object s location is arguably the most fundamental sensing task in many ubiquitous and pervasive computing scenarios.
Representing locations statistically provides a uni ed interface for location information, which enables us to make applications independent of the sensors used even when using very di erent sensor types, such as GPS and infrared badges [7], or even Twitter.
Well known algorithms for location estimation are Kalman  lters, multihypothesis tracking, grid-based, and topological approaches, and particle  lters.
Hightower and Borriello investigated the application of particle  lters to location sensors deployed throughout a lab building [10].
More  Figure 11: Screenshot of Toretter, an earthquake reporting system.
Dear Alice, We have just detected an earthquake around Chiba.
Please take care.
Toretter Alert System  Figure 12: Sample alert email.
others have been done.
Grosseck et al. investigated indicators such as the in uence and trust related to Twitter [8].
Krishnamurthy et al. crawled nearly 100,000 Twitter users and examined the number of users that each user follows, in addition to the number of users following them.
Naa-man et al. analyzed contents of messages from more than
 categories [19].
The numerous categories are  Me now  and  Statements and Random Thoughts ; statements about current events corresponding to this category.
Some studies have examined novel applications of Twitter: Borau et al. tried to use Twitter to teach English to English-language learners [4].
Ebner et al. investigated the applicability of Twitter for educational purposes, i.e. mobile learning [6].
The integration of the Semantic Web and mi-croblogging was described in a previous report [20] in which a distributed architecture is proposed and the contents are aggregated.
Jensen et al. analyzed more than 150 thousand tweets, particularly those mentioning brands in corporate accounts [12].
In contrast to the small number of academic studies of Twitter, numerous Twitter applications exist.
Some are used for analyses of Twitter data.
For example, Tweet-tronics14 provides an analysis of tweets related to brands 14http://www.tweettronics.com 15http://web2express.org timated accurately using the particle  lter approach.
We plan to expand our system to detect events of various kinds using Twitter.
We developed another prototype that detects rainbow information.
A rainbow might be visible somewhere in the world; someone might be twittering about a rainbow.
Our system can identify rainbow tweets using a similar approach to that used for detecting earthquakes.
The di erences are that in the rainbow case, the information is not so time-sensitive as that in the earthquake case.
Our model includes the assumption that a single instance of the target event exists.
For example, we assume that no two or more earthquakes or typhoons occur simultaneously.
Although that assumption is reasonable for these cases, it might not hold for other events such as tra c jams, accidents, and rainbows.
To realize multiple event detection, we must produce advanced probabilistic models that can accommodate multiple event occurrences.
A search query is important for seeking tweets that might be relevant.
For example, we set query terms as earthquake and shaking because most tweets mentioning an earthquake occurrence use either word.
However, to improve the recall, it is necessary to obtain a good set of queries.
We can use advanced algorithms for query expansion, which is a subject of our future work.
As described in this paper, we investigated the real-time nature of Twitter, in particular for event detection.
Semantic analyses were applied to tweets to classify them into a positive and a negative class.
We consider each Twitter user as a sensor, and set a problem to detect an event based on sensory observations.
Location estimation methods such as Kalman  ltering and particle  ltering are used to estimate the locations of events.
As an application, we developed an earthquake reporting system, which is a novel approach to notify people promptly of an earthquake event.
Microblogging has real-time characteristics that distinguish it from other social media such as blogs and collaborative bookmarks.
As described in this paper, we presented an example using the real-time nature of Twitter.
It is hoped that this paper provides some insight into the future integration of semantic analysis with microblogging data.
