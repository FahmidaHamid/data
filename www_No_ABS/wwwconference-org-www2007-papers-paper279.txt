Database design and normalization, which originated with early papers by Codd [12, 13, 14], is one of the classical areas of relational database theory, and a standard textbook topic.
With a recent shift to XML as a data model, many of classical database subjects have been reexamined in the XML context, among them design and normalization [4, 35,
 redundancies from a database or an XML document, and by doing so, eliminate or reduce potential update anomalies.
With that goal in mind, XML normal forms have been introduced [4, 38, 36] and proved to eliminate redundancies in data storage [5].
However, all the work on XML design was making an assumption of a native XML storage for reasoning about redundancies and anomalies.
While native XML storage facilities exist [31, 30, 23, 1], many XML processing systems take advantage of relational databases to store and query XML data [21, 39, 32, 34, 18].
The issues of storing and querying relational representations of XML have been studied extensively (refer to [26] for a survey).
So the rationale for good XML designs that can be found in the literature applies to the storage model that is not the prevalent one in practice.
Thus, a natural question to ask is: Do the existing principles of XML design apply when one stores XML in relational databases?
And, in case there is a mismatch between the native XML representation and a relational one, how can one adjust XML design principles to guarantee well-designed relational representation of XML documents?
As we try to formulate these questions in a more precise way, one issue arises immediately: how do we compare XML designs and designs of their relational translations?
After all, the notions of redundancies, updates, queries, etc.
are rather di erent in these two worlds.
To overcome this problem, we use an information-theoretic approach to database designs proposed in [5] and further developed in [25].
The idea of this approach is that it measures, in a way independent of features such as updates and queries, the information content of data, as an entropy of a suitably chosen probability distribution.
The higher this information content is, the less redundancy the design carries.
This measure applies across di erent data formats and integrity constraints, and allows us to reason about and compare data designs over di erent data models.
The values of the information-theoretic measure are real numbers between 0 and 1, with 0 meaning  completely redundant information  and 1 corresponding to no redun-have measure 1.
It is known, for example, that over relational databases this corresponds to BCNF (Boyce-Codd Normal Form) [2, 24, 28], and over XML documents, to a normal form XNF introduced in [4], if only functional dependencies are involved.
When XML documents are stored as relations, constraints may not remain in the same forms, e.g.
XML keys may change to functional dependencies over the relational schema [17].
However, the information-theoretic approach applies to any kind of constraints, and as our  rst result, we are able to show that the normal form XNF corresponds precisely to the perfect designs of relational translations of XML.
For this result, we impose fairly mild conditions on translations of XML; in fact for most translations used in the literature [33, 21] the result holds.
While one often tries to achieve a perfect design, in practice it is not always possible.
For example, if we deal with relational databases and functional dependencies, the perfect design that eliminates all redundancies is BCNF, but if one needs to enforce all the functional dependencies at the same time, a decomposition into BCNF may not exist [2].
In that case, one usually tries to obtain a 3NF (3rd Normal Form) design; in fact 3NF is much more commonly used in practice than BCNF.
It was recently shown that 3NF can be explained information-theoretically as the best relational normal form achievable if all constraints are preserved [25].
Using the information-theoretic measure, one can also characterize it as a normal form always guaranteeing values of the measure at least 1 2 , which is the highest value that one can guarantee if the preservation of functional dependencies is important.
Here we show that there is a simple XML design criterion that guarantees this second-best relational design.
Namely, our XML design criterion says that every constraint violating XNF should be relative [10, 3], i.e. restricted to some element type of a DTD that occurs under the scope of a Kleene star.
Thus, our results suggest the following guidelines for XML design if one stores XML documents in relations:
 rithm from [4]);
 by relative ones.
This way one guarantees good design not only of an XML document itself, but also of its relational storage by removing redundancies.
Our  nal result deals with a relational representation of documents in which we essentially store the document as a tree (the edge relation) [21].
This representation shares some of the information-theoretic characteristics with those more commonly used, but we show that it may require arbitrarily many more relational joins for enforcing XML constraints even for well-designed documents in XNF.
Organization.
The paper is organized as follows.
In Section 2 we de ne relational and XML constraints and DTDs.
In Section 3 we give a brief overview of normal forms BCNF,
 4, we give an overview of the information-theoretic measure, explain how it characterizes good designs.
The precise formal de nition is in the appendix.
In Section 5 we overview relational translations of XML and XML constraints.
In Section 6, we show that perfect XML designs (i.e., XNF) correspond precisely to perfect designs of relational representations.
In Section 7 we  nd conditions on XML documents guaranteeing the best non-perfect relational designs, akin to 3NF.
In Section 8 we discuss the edge representation, and in Sections 9 and 10 we give conclusions and directions for future work.
Relational schemas and instances.
A relational schema, usually written as S, is a set of relation names.
With each m-ary relation R   S, we associate a set of attributes attr(R).
We assume that all data values in a database instance are from a countably in nite domain, N+ (the set of positive natural numbers) for simplicity.
Therefore, an instance I of S assigns to each m-attribute relation R in S a  nite subset I(R) of Nm + .
The active domain of I, denoted by adom(I) is the set of all elements of N+ that occur in I.
The set of positions in an instance I of S, denoted by Pos(I), is the set {(R, t, A) | R   S, t   I(R) and A   attr(R)}.
Schemas may contain integrity constraints.
We denote such schemas by (S,  ), where S is a set of relation names and   is a set of constraints.
In this paper, we deal with constraints such as equality-generating dependencies (EGDs), and functional dependencies (FDs) as special cases of EGDs.
An EGD is an expression of the form   (R1( x1)   .
.
.
  Rm( xm)   x = y) , where   represents the universal closure of the formula, x, y    x1   .
.
.
   xm, and there is an assignment of variables to columns such that each variable occurs only in one column, and x, y are assigned to the same column.
We assume that FDs are of the form X   Y , where X, Y are nonempty sets of attribute names.
If   is a set of constraints, then  + denotes the set of all constraints implied by it, and inst (S,  ) stands for the set of all instances of S satisfying  .
We write inst k(S,  ) for the set of instances I   inst (S,  ) with adom(I)   [1, k].
DTDs and XML trees.
Assume that we have the following disjoint sets: El of element names, Att of attribute names, Str of possible values of string-valued attributes.
All attribute names start with the symbol @.
A DTD D is de ned to be D = (E, A, P, R, r), where   E   El is a  nite set of element types;   A   Att is a  nite set of attributes;   P is a set of rules     P  for each     E, where P  is a regular expression over E   {r};   R assigns a subset of A of attribute names to each element     E;   r   E is the root element.
For simplicity, we do not consider PCDATA elements in XML trees since they can be represented by attributes.
An XML tree is a  nite rooted directed tree T = (N, G), where N is the set of nodes, and G is the set of edges, together with db student student @name "Smith" contact @name "Collins" contact @name "Wilson" contact phone address phone address phone address @number @streetNo "416 2561212" "55 Queen St." @city "Toronto" @number @streetNo "416 3408888" "55 Queen St." @city "Toronto" @number @streetNo "613 1267777" "95 Dundas St." @city "Ottawa" @aptNo @postalCode "310"
 @aptNo @postalCode "210"
 @aptNo @postalCode "510"
 Figure 1: An XML tree.
Att.
We say tree T conforms to DTD D = (E, A, P, R, r), written as T |= D, if   the root of T is labeled r;   for every x   N with  (x) = a, the word  (x1) .
.
.
 (xn) is in the language de ned by Pa where x1, .
.
.
, xn are children of x in order;   @l   R(a) i  the function  @l is de ned on x.
The set of positions in an XML document is intuitively the set of places where values (i.e. attribute values) occur.
Formally, for a tree T = (N, G) that conforms to DTD D, the set of positions is de ned as the set {(x, @l) | x   N, @l   R( (x))}, and is denoted by Pos(T ).
Given a DTD D = (E, A, P, R, r), an element path q is a word in the language E , and an attribute path is a word of the form q.
@l, where q   E  and @l   A.
An element path q is consistent with D if there is a tree T |= D that contains a node reachable by q; if the nodes reachable by q have attribute @l, then the attribute path q.
@l is consistent with D. The set of all paths consistent with a DTD D is denoted by paths(D).
The last element type that occurs on a path q is called last(q).
A functional dependency over a DTD D [4] is an expression of the form {q1, .
.
.
, qn}   q, where q, q1, .
.
.
, qn   paths(D).
To de ne satisfaction of functional dependencies, we need a notion of tree tuples in XML documents.
Given an XML tree T = (N, G) such that T |= D, a tree tuple [4] is intuitively a subtree of T rooted at r containing at most one occurrence of every path.
Then satisfaction is de ned in the usual way: if two tree tuples agree on all the paths q1, .
.
.
, qn, then they must agree on q.
The precise de nition requires a bit of care since a tree tuple may not be de ned on some paths (as tree tuples have at most one occurrence of every path, and may have zero occurrences).
Let   represents such missing values.
A tree tuple is formally de ned as a mapping t : paths(D)   N   Str  { } such that if for an element path q whose last letter is a, we have t(q) 6=  , then t(q)   N and  (t(q)) = a; if q0 is a pre x of q, then t(q0) 6=   and t(q0) lies on the path from the root to t(q) in T ; if @l is de ned for t(q) and its value is v   Str, then t(q.
@l) = v.
Then a tree T satis es an FD {q1, .
.
.
, qn}   q if for any two tree tuples t1, t2 in T , whenever t1(qi) = t2(qi) 6=   for all i   [1, n], then t1(q) = t2(q).
If in an FD {q1, .
.
.
, qn}   q, for some i the path qi is an element path, and for all j   [1, n], j 6= i, the path qi is a pre x of qj, then we say that such an FD is relative (more precisely, relative to qi).
Example 1.
Consider the XML tree of Figure 1 that conforms to DTD D = (E, A, P, R, db), where E = {db, student, contact, address, phone} A = {@name, @streetN o, @aptN o, @city, @postalCode, @number} P = {db   student , student   contact, contact   address , address   , phone   } R(student) = {@name} R(address) = {@streetN o, @aptN o, @city, @postalCode} R(phone) = {@number} R(db) = R(contact) =   This XML tree satis es the following constraints: (1) for each student, no more than one address is kept with a single postalCode, and (2) the value of postalCode uniquely determines streetNo and city.
These constraints can be formulated as the following FDs: db.student, db.student.contact.address.
@postalCode   db.student.contact.address db.student.contact.address.
@postalCode   db.student.contact.address.
@city (1) (2) The  rst FD is an example of a relative FD, where the constraint holds within each  xed element student.
A normal form speci es a set of syntactic conditions over the constraints de ned for a database that will lead to less redundant instances.
We brie y review some normal forms surveys [7, 22, 9], texts [2, 24, 28], and papers [4, 38] for additional information.
Relational normal forms.
A schema (S,  ) is in BCNF if for every relation name R in it and every nontrivial FD X   Y over attributes of R, X is a key of R. Prime attributes are those that belong to a candidate (minimal) key.
A schema (S,  ) is in 3NF if for every relation name R in it and every nontrivial FD X   Y over attributes of R, either X is a key, or every attribute in Y   X is prime.
Given a single-relation schema (R,  ) and some normal form NF, a lossless NF-decomposition is a set of schemas (Rj ,  j ), j   J, such that each (Rj ,  j ) is in NF, and for every I   inst(R,  ) we have  attr(Rj )(I) |=  j and furthermore I =1 { attr(Rj )(I) | j   J}.
Such a decomposition is called dependency-preserving if (cid:0)Sj  j(cid:1)+ =  +.
It is well-known that both 3NF and BCNF admit lossless decompo-sitions, which in the case of 3NF can be guaranteed to be dependency-preserving.
In the case of BCNF dependency preservation is not always possible (consider a schema with attributes A, B, C and FDs AB   C and C   A).
A normal form for XML.
Given a DTD D and a set   of FDs over D, (D,  )+ is the set of all FDs implied by (D,  ).
An FD is called trivial if it belongs to (D,  )+.
We say that (D,  ) is in XML Normal Form (XNF) [4] if for every nontrivial FD X   q.
@l in (D,  )+, the FD X   q is also in (D,  )+.
Intuitively, this condition prevents redundancies among values of attributes @l of q.
It was shown in [4] that if relational databases are translated into XML documents (say, as instances of DTDs r   t , where t has all the attributes of a relation R), then XNF coincides with BCNF.
Thus, it is a natural extension of BCNF to XML documents.
For further results on XNF, and its justi cation, see [4, 5].
We can see an example of XNF violation by FD (2) in Example 1.
While the path on the left-hand side db.student.contact.address.
@postalCode implies the attribute path db.student.contact.address.
@city, it does not imply the element path db.student.contact.address.
INFORMATION THEORY AND NOR(cid:173)
 Since we shall be comparing XML designs and relational designs, we would like to work in a framework that applies across several data models and is independent of concepts such as query languages and updates (which are not yet as fully understood for XML as for relational world), and concepts such as dependency preservation (which has not been adequately explored in the XML context).
Such framework is provided by the classical information theory and its central concept of entropy which measures information content.
Information theory has recently been used to characterize well-known relational normal forms, such as BCNF, 4NF, and 3NF, as well as XML normal forms [5, 25].
Given a database schema S, a set of integrity constraints   and an instance I of (S,  ), the information-theoretic measure, introduced in [5], assigns a number to every position p in the instance that contains a data value.
This number, which is called relative information content with respect to constraints   and is written as RicI (p| ), ranges between 0 and 1 and shows how much redundancy is carried by position p. Numbers close to 0 mean high redundancy, while numbers close to 1 mean no or low redundancy for the data value in position p.
Example 2.
(see [5]) Consider relation R(A, B, C) with the set of FDs   = {A   B}, and three instances I1, I2, and I3 of (R,  ) shown in Figures 2(a), 2(b), and 2(c) respectively.
Let p1, p2, and p3 denote the position of the gray cell in the instances.
We can observe that the information content of the gray cell decreases as it becomes more redundant by adding tuples to the instances.
To de ne this measure intuitively, suppose that we have n positions (data elements) in a relational or XML instance I, whose values are drawn from a domain of size k (which we may assume without loss of generality to be the interval [1, k]).
We want to measure, on average, how much information is contained in position p with respect to all other sets X of positions   or, in other words, how much we can derive about p from values in positions in X.
When we can derive the value in p unambiguously, the information content will be 0; when we cannot say anything about it, it will be 1.
This in turn is measured as follows.
Suppose X is a subset of P os(I)   {p}.
Suppose the values of positions in X are lost, and then somehow restored from the set [1, k].
We measure how much information this gives us about the value of p. This is done in a standard information-theoretic fashion, by computing an entropy of a certain distribution1.
Then Rick I (p| ) is the average of such entropy over all such sets
 We want the information content to be a value in [0, 1].
It is known that the maximum entropy for a discrete distribution on k elements is log k [15].
So we consider the ratio Rick I (p| )/ log k, and then de ne the relative information content of position p as RicI (p| ) = lim k  Rick I (p |  ) log k .
A key result of [5] is that this limit exists for all reasonable classes of constraints (e.g., all those de nable in  rst-order logic, such as functional, multi-valued, join, etc.
dependencies).
The following de nition is from [5] and it applies across di erent data formats, including relational and XML data.
Definition 1.
A database schema (S,  ), with a set of constraints  , is well-designed if for every instance I of (S,  ) and every position p in I, we have RicI (p| ) = 1.
In other words, a schema is well-designed if in every instance, no position has any redundancy at all.
Here we concentrate on designs guided by functional dependencies.
For them, well-designed schemas have been precisely characterized in [5].
Fact 1.
(see [5])
 dependencies, then (S,  ) is well-designed if and only if it is in BCNF.
of entropy are in the appendix.
RicI1 (p1| ) = 0.875 RicI2 (p2| ) = 0.781 RicI3 (p3| ) = 0.711 (a) (b) (c) Figure 2: Information content vs redundancy.
pendencies, then (D,  ) is well-designed if and only if it is in XNF.
We also note that the framework applies well beyond functional dependencies.
For example, [5] used it to characterize designs based on multi-valued and join dependencies, and we shall use it soon for schemas for equality-generating dependencies (EGDs).
Some popular relational normal forms, such as 3NF, are not well-designed according to our de nition, because they allow some amount of redundancy to compensate for preserving all the constraints.
A way to measure and compare information contents over multiple schemes satisfying a particular condition, such as a normal form, was introduced in [25].
Let C be some condition on relational schemas, e.g., BCNF or 3NF.
Now consider all instances I of these schemas (S,  ), and all the possible values RicI (p| ).
Definition 2.
The guaranteed information content of a condition C is the largest number c   [0, 1] such that RicI (p| )   c for all such instances I and positions p. It is denoted by GIC(C).
Formally, GIC(C) = inf{RicI (p| )}, where I ranges over instances of schemas (S,  ) that satisfy C, and p ranges over positions in I.
Using this, one can characterize 3NF.
In fact, it was noticed long ago that 3NF designs can di er signi cantly [40], and in general those accepted as good ones are the ones produced by the standard 3NF synthesis algorithm by Bernstein [8].
In fact such a subset of 3NF, which we denote by
 lows: Fact 2.
(see [25]) GIC(3NF+) = 1 if C is any other normal form that guarantees dependency-preserving decompositions, then GIC(C)   1

 Note that we can reformulate Fact 1 as GIC(BCNF) = 1.
This means that if we cannot achieve the maximum information content equal to 1 for all positions, the next best thing that we guarantee is the value of the information-theoretic measure equal to 1


 The main goal of this paper is to show how a good XML design can result in having a less redundant relational storage for XML documents.
Redundancies occur when DTDs permit adding more redundant values, or redundant tree tuples, to XML documents.
In particular, they occur when element types occur under the scope of a Kleene star in the DTD.
This is indeed what is required for the worst cases of redundancy, so for lower bounds we can safely concentrate on DTDs that basically model nested relations, i.e. non-recursive disjunction-free DTDs, where each element type appears once or under a Kleene star in the production rule of its parent.
We shall use the inlining technique [33] as our XML-to-relational mapping scheme.
While the inlining technique is not the only [21, 39, 32, 6, 19, 18] or necessarily the best mapping scheme (see [26] for a survey), it produces the most natural relational schema for DTDs that are essentially nested relations.
But our results are more general: they apply to any other mapping scheme that produces a similar relational schema for nested-relation-like DTDs.
Given a DTD, the basic idea of the inlining mapping is that separate relations are created for the root and the element types that appear under a star, and the other element types are inlined in the relations corresponding to their parents.
Each relation corresponding to an element type has an ID attribute that is a key for that relation as well as a parent ID attribute that is a foreign key pointing to the parent of that element in the document.
All the attributes of a given element type in the DTD become attributes in the relation corresponding to that element type.
For example, the relational schema for storing XML documents conforming to the DTD in Example 1 would be student(stID, name, conID) address(addID, conID, postalCode, streetN o, aptN o, city) phone(phID, conID, number) Key attributes are underlined, and the following foreign keys also hold: address[conID]  FK student[conID] and phone[conID]  FK student[conID].
The inlining schema generation can be formally captured as follows.
Definition 3.
Given a DTD D = (E, A, P, R, r), we de- ne the inlining of D to be a relational schema S, where   S = {Re | e   E, and e  occurs in Pe0 for some e0   E or e occurs in Pr}, and   there is a mapping   : E   S recursively de ned as  (e) = (cid:26) Re  (e0), where e occurs in Pe0 if Re   S if Re 6  S such that for each Re   S,  {e0ID | e occurs in Pe0 } .
Then given an XML tree T = (N, G) conforming to D and satisfying  , we can straightforwardly shred it into an instance IT of relational schema S, the inlining of D. Note that we can use node identi ers in N for values of ID attributes when populating IT .
The precise de nition of this transformation is omitted here.
It is easy to observe that the FDs de ned over a DTD do not necessarily translate into FDs over the relational schema, simply because the paths involved in an XML functional dependency may not all occur in a single relation.
Therefore, we need to join di erent relations to enforce the integrity constraints that are now in the form of equality-generating dependencies (EGDs).
For example, the FDs in Example 1 would translate into the following EGDs.
Note that EGD (4) is an FD, but EGD (3) is not.
  student(s, n, c)   address(a, c, pc, st, apt, ct)   student(s, n, c)   address(a0, c, pc, st0, apt0, ct0)   a = a0,   address(a, c, pc, st, apt, ct)   address(a0, c0, pc, st0, apt0, ct0)   ct = ct0.
(3) (4) We can show that every constraint expressed in the form of an FD for XML can be written as an EGD over the in-lining relational storage.
More formally, Proposition 1.
For every DTD D and set of XML functional dependencies   de ned over D, there is a set of EGDs  E over the relations of S, the inlining of D, such that for every XML tree T conforming to D, the tree T satis es   if and only if IT satis es  E.
Note that there are also some key and foreign key constraints  K,FK over the ID attributes of S, as shown in previous example.
We then call (S,  S) the inlining translation of (D,  ), where  S =  E    K,FK .
We know that if we want a perfectly non-redundant design for XML, we should try to achieve XNF [4].
XML is most commonly stored in relational databases, in order to take advantage of fast relational query engines and well-developed storage facilities.
We therefore need to study the design and normalization not only for XML per se, but also for the relational storage of XML documents.
Here we study the e ect of XNF normalization on the relational storage, and in the next section we will see how the relational storage looks, in terms of redundancy, for non-perfect XML designs.
We observe that the inlining mapping preserves a good XML design by showing that the information content of data values will remain maximum after transforming XML data into relational storage.
Note that the FDs over XML data will become EGDs over the relational storage.
Let D be a DTD,   be a set of XML functional dependencies de ned over D, and (S,  S) be the inlining translation of (D,  ).
Consider an XML tree T conforming to D and satisfying  .
Let IT be the instance of (S,  S) that is obtained by shredding T into relations of S. Now every position p in T is naturally mapped into a unique position  (p) in IT .
Definition 4.
We say that an inlining translation (S,  S) of (D,  ) is well-designed i  for every XML tree T conforming to D and satisfying   and every position p in T , we have RicIT ( (p)| S) = 1.
In other words, in positions corresponding to positions from the XML document, there is no redundancy whatsoever in the shredded documents according to the translation of XML constraints.
Theorem 1.
The following are equivalent for an XML speci cation (D,  ) and its inlining translation (S,  S):

 This means that in order to ensure a non-redundant relational storage for our XML data, we need to have an XNF design.
In other words, XNF achieves nonredundant design no matter what type of storage   native or relational   is used.
Like in the relational case, bad XML designs may lead to very low information contents for positions in the relational storage.
In fact, the information content of a position in a relational storage of an XML document can potentially be arbitrarily low.
Proposition 2.
For every   > 0, we can  nd an XML design (D,  ) with inlining translation (S,  S) and an XML tree T conforming to D and satisfying   with a position p, such that for the corresponding position  (p) in IT , we have RicIT ( (p)| S) <  .
To avoid the possibility of having such a high redundancy, we need some restrictions that guarantee a reasonable information content for all positions in the relational storage of XML.
We showed in the previous section that an XNF design corresponds to maximum information content for the relational storage, but is it always possible to achieve XNF?
Recall that in the relational context it is not always possible to achieve a dependency-preserving perfect design.
Therefore to guarantee dependency preservation, we may have to tolerate some redundancy, at most equal to one half of the maximum information content, and this is exactly what a good 3NF (i.e., 3NF+) normalization gives us.
Here we want to show that if a dependency-preserving XNF design is not achievable, then a simple restriction on FDs de ned for XML guarantees the second best information content for the relational storage of an XML document.
The restriction is simply that all FDs should satisfy XNF or be relative to an element that occurs under the scope of a Kleene star.
Then the information content of all positions of the relational storage of the XML document will be at least 1
 Let D = (E, A, P, R, r) be a DTD,   be a set of XML functional dependencies de ned over D, and (S,  S) be the inlining translation of (D,  ).
is relative under the Kleene star if   qi is an element path for some i   [1, n],   for all j   [1, n], qi is a pre x of qj, and   for some p which is a pre x of qi and     E, last(p) occurs under a Kleene star in P  .
An example of FD that violates this condition is FD (2) in Example 1.
We refer to such FDs as absolute or global FDs.
We now extend the de nition of guaranteed information content for relational storage of XML documents.
Let C be some condition on XML functional dependencies de ned over a DTD, e.g.
XNF or relative under the Kleene star.
Now consider all XML trees T conforming to some DTD D and satisfying FDs  , such that FDs in   are of type C. The guaranteed information content of a condition C for inlining translation, written as GICinl(C) is the largest number c   [0, 1] such that for all such trees T and position p in T , RicIT ( (p)| S)   c, where IT is the shredding of T into the inlining translation (S,  S) of (D,  ), and  (p) is the position in IT to which p is mapped.
Formally, GICinl(C) = inf{RicIT ( (p)| S)}, where T ranges over trees conforming to D and satisfying FDs   of type C, and p ranges over positions in T .
Using this, we can reformulate Theorem 1 as GICinl(XNF) = 1.
Now let relative denote the condition of being relative under star.
Then we can formally state the main result of this section: Theorem 2.
GICinl(relative)   1
 In other words, if we manage to design an XML document in such a way that there is no global FDs, then the redundancy of each data value in the relational storage of the XML document would not be worse than 1
 We can explain this result more intuitively by looking at update anomalies that could happen in the relational storage of an XML document.
Most database management systems disallow updates that violate key constraints, but the only mechanism to enforce FDs or EGDs would be through writing assertions.
In the absence of global or absolute FDs on the XML side, the possibility of FD or EGD violation due to a bad update in the relational storage will be restricted to a small portion of the entire database.
Informally speaking, if we are to numerically evaluate the possibility of having update anomalies, our results state that by having global FDs, the relational storage of an XML document could be exponentially more prone to anomalies, compared to the case when we are restricted to XNF and relative FDs.
Beside inlining, there are other XML-to-relational data and query mapping schemes [21, 39, 32, 6, 19, 18], among them being the Edge representation [21], which is used as a basis for many XML query translation techniques.
Here we would like to study this mapping scheme from two points of view: 1) redundancy and information content, and 2) the complexity of enforcing integrity constraints.
In the Edge representation, an XML tree is viewed as an edge-labeled graph.
Each element-to-element and element-to-attribute edge of the tree has a tuple in Edge table, and for each data value in the tree, there is a tuple in Value table associating the node identi er to a value.
The relational storage for any XML tree, regardless of its schema, has the following relations: Edge(source, target, label), Value(vid, val).
In the original de nition of this schema [21], there are two more attributes in the Edge relation: ordinal, which speci- es the ordinal of the target among children of the source, and f lag which speci es whether the tuple corresponds to an element-to-element edge or an element-to-attribute edge.
We simplify the schema by removing these attributes, as they do not have any e ect on the redundancy of data values.
Assume that we have a set El of element names, Attr of attribute names, and Str of all possible string-valued attributes.
Then given an XML tree T = (N, G), with labeling function   : N   El and attribute functions  @a : N   Str for each @a   Attr, we can populate Edge and Value such that   for each edge (x, y)   G, there is a tuple (x, y,  (y))   Edge, and   for each x   N and @a   Attr such that  @a is de ned for x, there is a tuple (x, y, @a)   Edge as well as a tuple (y,  @a(x))   Value, where y 6  N is a fresh node identi er.
Other variants of this approach also exist.
One of them is the binary approach [21, 32], where the Edge relation is horizontally partitioned based on attribute label.
The schema would then have the following relations: Blabel(source, target) Value(vid, val).
In this representation, edge labels or element types are not stored as attributes.
We can therefore assume that the domain of each attribute is an in nite set, and thus the measure of information content can be directly applied.
Here we focus on the binary representation and show that redundancy-wise it looks the same as the inlining representation.
Given a set of FDs   de ned over a DTD D, the translation of   over the binary representation of D will again be a set of EGDs.
We denote the binary translation of (D,  ) by (SB,  B), where  B contains some key and foreign key constraints, as well as some EGDs obtained from  .
Every T conforming to D and satisfying   can be trivially shredded into an instance IB of (SB,  B), and each position p in T is mapped to a unique position  B(p) in IB.
Then the de nitions of being well-designed and guaranteed information content for binary translation, GICbin, would be very similar to those of inlining translation.
Not surprisingly, the binary translation also preserves a perfect XML design: Theorem 3.
The following are equivalent for an XML speci cation (D,  ) and its binary translation (SB,  B ):
 Similarly, to guarantee an information content of 1 2 for po- sitions in the binary representation of an XML document, it is enough to make sure that all the XML functional dependencies are relative: Theorem 4.
GICbin(relative)   1
 This might make us think that, from the design point of view, binary and inlining representations are equivalent.
However, we will next show that they di er signi cantly when it comes to the complexity of enforcing integrity constraints.
Here by complexity, we mean the number of joins needed to write a SQL assertion that enforces an EGD translated from an XML functional dependency.
Given an XML functional dependency f over a DTD D, we use the notation # 1f inl and # 1f bin to denote the number of joins required to enforce the translation of f on the inlining and binary relational representation of D respectively.
Consider for instance FD (2) of Example 1.
The translation of this FD over the binary representation of the DTD is an EGD that involves  ve joins, whereas over the inlining translation, it can be written as an FD requiring only one join as shown by (4).
In fact, we can show that even for key or XNF dependencies, the number of joins needed for the binary representation is never smaller than under inlining, and can be arbitrarily higher.
Proposition 3.
we have # 1f bin  # 1f inl.
functional dependency f over D, such that # 1f bin f # 1 inl > m.
We have studied design and normalization for XML documents stored in relations, rather than in native XML storage facilities (which was the assumption of the previous work on XML normalization).
To be able to compare relational and XML designs, we applied the information-theoretic framework of [5] that can be used for many di erent data models, and is independent of data model features such as update and query languages (which are still in the development stage for XML).
The main conclusions are as follows:
 eralization of BCNF for XML documents, achieves the best possible design from the point of view of eliminating redundancies in both native and relational storage of XML.
Note that algorithms for converting XML designs into XNF exist.
sign is achieved by relativizing all constraints that violate XNF.
By relativizing we mean restricting them to the scope of an element that occurs in a DTD with a Kleene star (or under the scope of another element with a Kleene star).
When we say  the next best possible design , our criterion is the information content of redundant values in the relational storage of XML documents.
pare di erent shredding techniques from the point of view of redundancies in XML documents.
We show that two popular techniques   inlining [33] and the edge representation [21]   behave in the same way information-theoretically, while the latter can behave arbitrarily worse in terms of enforcing integrity constraints.
While the situation with the best possible design from the point of view of eliminating update anomalies has now been completely clari ed for both native and relational storage, it is not yet entirely clear how to handle non-perfect designs that do not eliminate all redundancies.
Such designs are necessary, and in fact essential, in the relational world, where they guarantee database consistency by means of dependency preservation.
This in fact explains why 3NF designs in practice are more popular than BCNF designs.
In the XML world, we do not yet have an adequate understanding of the notion of dependency preservation and its impact on XML design, whether for native or relational storage.
Another open issue is whether one can relativize constraints, as suggested in this paper for achieving the best non-XNF design, and do it while preserving XML constraints.
We also would like to extend the idea of using the information-theoretic framework for reasoning about and comparing di erent shredding techniques for XML documents.
Acknowledgments.
We thank Wenfei Fan and Rene e Miller for comments and suggestions.
Both authors are supported by a grant from NSERC.
Part of this work was done while Kolahi was visiting the University of Edinburgh.
Libkin is on leave from the University of Toronto, supported by the European Commission Marie Curie Excellence grant MEXC-CT-2005-024502 and EPSRC grant E005039.
