Passwords play a large part of the typical web user s experience.
The are the near universal means for gaining access to accounts of all kinds.
Email, banks, portals, dating and social networking sites all require passwords.
So important are they that HTML has a special form  eld to allow for the special treatment they require, and an important r ole of SSL is protecting the secrecy of passwords from observers of the connection.
Alternative to passwords certainly exist.
Hardware authentication, e.g.
[1], is sometimes used for access to corporate networks.
However, this requires an issuing authority and seems to be limited to environments that justify the cost, such as in the employer-employee relationship.
Challenge response authentication has the advantage that observing a single successful sign in does not allow an attacker Copyright is held by the International World Wide Web Conference Committee (IW3C2).
Distribution of these papers is limited to classroom use, and personal use by others.
to gain the secret.
However, challenge response systems are generally regarded as being more time consuming than password entry and do not seem widely deployed.
One time passwords have also not seen broad acceptance.
The dif- culty for users of remembering many passwords is obvious.
Various Password Management systems o er to assist users by having a single sign-on using a master password [7, 13].
Again, the use of these systems does not appear widespread.
For a majority of users, it appears that their growing herd of password accounts is maintained using a small collection of passwords.
For a user with, e.g.
30 password accounts, the problem becomes not remembering 30 distinct passwords, but rather remembering which of 5 or 6 passwords was used.
This appears to be done using a combination of memory, pieces of paper, trial and error (trying each of the passwords in turn), and password resets.
Since passwords protect accounts with valuable assets they have increasingly been subjected to harvesting attacks.
Phishing attacks, where a victim is lured into submitting her password to a malicious site masquerading as a trusted institution have increased enormously in the last few years [11].
Incidences of keylogging malware, which record keystrokes on a PC have also been rising rapidly.
Unlike brute force attacks on passwords, both phishing and keylogging harvest strong passwords as easily as weak ones.
Thus the nature of the risk surrounding password authentication has altered greatly.
The longstanding problem of users choosing passwords that are too easily brute forced [12, 6, 3] has been joined by the new problem of users unwittingly revealing their passwords in the clear.
The convenience of web access to accounts is extremely compelling, and thus the r ole they play in the average web users life seems likely to increase.
However we  nd that  rm data on users  actual password habits is hard to come by.
It is conventional wisdom that users choose weak passwords, frequently reuse passwords across multiple sites, and often forget them.
In this paper we report on a large scale study of web users habits where we measured and report these and other patterns for the  rst time.
We obtained data from over half a million users over a period of three months.
This is more than 100 times more participants than any previous study we are aware of.
Among our interesting  ndings is how large a r ole web passwords play in users lives.
The average user has 6.5 passwords, each of which is shared across 3.9 di erent sites.
Each user has about 25 accounts that require passwords, and types an average of 8 passwords per day.
That users choose weak passwords has been known informally for some time; passwords with an average bitstrength 40.54 bits.
The overwhelming majority of users choose passwords that contain lower case letters only (i.e. no uppercase, digits, or special characters) unless forced to do otherwise.
We were able to measure that 0.4% of users type passwords (on an annualized basis) at veri ed phishing sites, and at least 0.2% of users actively maintain their own router.
Finally users forget passwords a lot: we estimate that at least 1.5% of Yahoo users forget their passwords each month.
In the next section we cover details of the client and the data gathered.
In Section 3 we present our results, broken into logical sections.
In Section 4 we discuss related work.
Our client software shipped as a component of one skew of Windows Live Toolbar.
Not all toolbar users received the component.
The component was optional, and users were presented with an opt-in agreement.
The toolbar was  rst available for download on the Microsoft web on 7/24/2006, and a total of 544960 clients received, opted in and activated by 10/1/2006.
The client consists of a module within the toolbar that monitors and records Password Reuse Events (PRE s).
It contains the following main components.
HTML password locator: this component scans the document object model in search of  lled-out password  elds, and extracts the passwords.
The  rst task merely involves searching the HTML for  elds declared inputtype="password" and extracting the value  eld.
This search is initiated every time the browser BeforeNavigate2 event occurs.
Thus we  nd completed password  elds before they are sent to the server.
Once the password is found it is hashed and added to the Protected Password List (PPL).
Protected Password List: This list contains the password hash, the full URL of the receiving server, the bit-strength of the password, the current time, and minutes since both the  rst and last time (if any) that password was sent to that server.
All of the information in the PPL is stored using the Data Protection API (DPAPI) provided by Windows [14] (the same API that is used to protect passwords that Windows stores).
Thus any passwords that the HTML Password Locator  nds are stored at least as securely as passwords that a user elects to save.
Passwords with bitstrength < 20 bits generate no entry in the PPL.
Realtime password locator: this component maintains a 16 character FIFO that stores the last 16 keys typed while the browser had focus.
Call this string f0, f1,  , f15.
At every keystroke, while the browser has focus, the realtime password locator  rst checks whether the string f0f1   f6 matches any of the already stored passwords in the PPL.
It then checks whether f0f1   f7 matches, and so on until  nally it checks whether f0f1   f15 matches any of the hashes.
Thus it performs a hash check a maximum of ten times the number of entries in the PPL.
When a match occurs (i.e. when a typed sequence in the FIFO matches a password in the PPL) it checks whether the URL of the current server is among the URLs previously associated with the password.
If not a Password Reuse Event (PRE) report is sent to the server.
with the password with the password word (secondary URLs) PRE Report: this contains:   the current (primary) URL   all of the URLs previously associated with the pass  time since last login at each URL previously associated   time since  rst login at each URL previously associated   the password strength   number of entries in the PPL, and number of PREs   number of unique passwords used by this client   the age of the client.
The format of the report is  led by client [Up,{sU0, sU1,  , sUN 1},{t0, t1,  , tN 1}, { 0,  1,  ,  N 1}, PwdStr, PPLSz, NPREs, NPwds, CAge].
Suppose for example that a user has a password that is used at PayPal, Yahoo, eBay and YouTube.
The  rst time the password is typed (say at eBay) it will be added to the PPL, and no report made to the server.
This password can then be typed at eBay over and over and will generate no PRE reports and no additions to the PPL.
The next time it is typed at a site other than eBay (say Yahoo) a PRE report will be sent listing www.yahoo.com as the primary URL Up and www.ebay.com/login as the secondary sU0.
Now typing it at PayPal will cause a PRE report listing www.paypal.
com as Up and www.yahoo.com and www.ebay.com/login as sU0, sU1.
Observe that neither the password, nor its hash are sent in the report.
There is no personally identifying information in the report.
Note: The reason that we perform the realtime password check is that we wish to be sure that we catch every Password Reuse Event.
If a user enters a password at URL A it will be entered in the PPL by the HTML password locator.
However it is possible that the password could be typed at another site that does not use a HTML password  eld.
We wish to capture and report any case where a previously used password is typed at another site.
A number of measures were taken to protect the privacy of those who opted in.
No Personally Identifying Information was gathered from the clients.
Neither passwords, nor usernames, nor their hashes were sent to the server.
IP addresses from which reports were received were not stored at the server.
In addition the time at which PRE reports were received was timestamped at the server with granularity 10 minutes to make identifying users by login times di cult.
Finally, the recorded password strengths were quantized to eliminate the possibility that a unique password strength might identify a user.
A privacy audit was performed and published [10].
This con rmed, among other things that no personally identifying information was transmitted, and that URL information sent could not be used to identify a user s personal information (e.g.
if a userid or name appeared as part of a URL).
None of the aggregated statistics we present here involve data from fewer than 250 users.
Server The server records each received report and stores with a per-PRE report ID and a timestamp.
It does not record any identi cation of the user or his/her location.
Downloads began almost as soon as the client became available on the web, and data from the clients began to  ow shortly thereafter.
The client reports the full primary and secondary URL.
Some sites use a unique string per login event, so that the URL will never appear the same.
In T-SQL we canonicalize by setting URLc to substring(URL+ / ,1,charindex( / ,URL+ / ,9)) As an example the URLs www.foo.com/bar/ and www.foo.
com would be mapped to www.foo.com/.
As with any large scale study unforeseen issues caused the data to be noisier than anticipated.
The client reports a PRE whenever a password is typed at a site other than the  rst URL with which it is associated.
For example www.bigbank.com/foo1 and www.bigbank.com/foo2 will count as di erent sites.
We extracted all reports where the authority is determined to be the same.
As detailed in Section 2.1 our component s strategy for adding to the PPL was to check for a nonempty password  eld on the page when the BeforeNavigate2 event  red.
This certainly occurs every time a user types into a password  eld and submits.
However, there are a signi cant number of sites that have a login form pre-populated with default values.
The gaming site www.iwin.com, for example, has a login form pre-populated with the values  username  and  password  and this form is on many of the pages on the site.
A single visit to the site causes a new list to be formed in the PPL.
As the user visits other pages on the site these generate PRE reports against the original page.
Since the user has not actually typed a password we view these entries as spurious (and indeed they tell us nothing about the user s password habits).
By removing all records where the primary and secondary URLs derive from the same authority we eliminate the e ect of such lists.
Note that this operation merely groups reports from the same client; it does not allow us to identify the client.
(cid:80) The PRE reports from clients do not contain an identi er that would allow us to group reports from a single client.
Suppose a client has k passwords, p0, p1,  , pk 1 and pi is i(ni   1) reports used at ni sites.
Thus we would receive from this client, ni   1 for each of the passwords.
Since we do not have a identi er that uniquely identi es the client there is no exact method to group together all of the reports generated by a single client.
It is possible, however, to group the (ni   1) reports that come from the same client using the same password at ni di erent sites.
Grouping P wdStr, CAge, {sU0, sU1}, { 0,  1} (i.e. the strength, client age,  rst two URLs visited using this password, and the visit times) su ces to uniquely identify all (ni   1) of the PRE reports for password pi most of the time.
In only a tiny minority of cases do two distinct users instal the toolbar at the same time, have a same strength password, and visit the same  rst two URLs at about the same time.
We should emphasize that data gathering was not the main goal of the component: there are many things that we would do di erently if we were to design a component purely for measurement.
There are certain limitations of the study and the data.
Users may type passwords from more than one machine, and thus we will miss a potentially large fraction of their password behavior.
Conversely, more than one person might be signing in to various online accounts using the same Windows session, and thus we would get higher password counts in the PPL.
The client generates a PRE whenever a password previously associated with another site is typed.
If a user chooses a password that is a common word a PRE will be generated every time they type that word.
Since, passwords of strength < 20 bits are not entered in the PPL, we view this as a minor source of error.
Since the client was included as part of a toolbar download from Microsoft it is likely that there is a bias toward the sites maintained by Microsoft and away from those of its competitors.
For example users of Yahoo toolbar might be expected to be more likely to have accounts at Yahoo sites than MSN or Google sites.
Thus the Table 1, which contains relative frequencies, should be interpreted as having some bias.
Finally, there is selection bias: we have data only from users who downloaded the toolbar.
These users can be expected to be far more active than the general web using population.
We now present some of the  ndings from the data, beginning with some basic quantities about the nature of clients.
Figure 1 shows the cumulative number of clients as a function of time.
There were approximately 6400 activations per day; and we had 544960 clients installed after 85 days.
This is the client base and time period over which we did the bulk of our analysis.
Except when indicated otherwise it can be assumed that we are referring to this set.
Figure 1: Number of installed clients as a function of time (upper curve).
Number of distinct canonicalized password URLs visited by the whole population as a function of time (lower curve).
To estimate the number of passwords per client we use the NPwds  eld in the PRE report.
Since there is no overall unique identi er per client we have to be careful to ensure that we do not count clients more than once in the calculations.
While we do not have a unique identi er we do know that each client as it  les PRE reports will report a given value for NPREs only once.
To get an idea of how many passwords a client has, and how it evolves with the time since instal we calculated the average NPwds used by a client, as a function of the age of the client in days (at the time of the report).
We performed this calculation at NPREs = 10; the results are shown in Figure 2.
As can be seen clients seem to add passwords rapidly the  rst few days, but this levels o  after a month or so.
The average client appears to have about seven distinct passwords that are actively used, and  ve of them have been used within three days of installing the client.
There can be some over counting here.
Recall from Section 2.1, that the HTML password locator adds an entry to the PPL when a nonempty password  eld is found on the page when the browser BeforeNavigate2 event  res.
There is no veri cation that a successful login occurs.
Thus a user who mistypes a password and submits it would generate a spurious entry in the PPL.
However, any typing mistake that is not submitted would not (the BeforeNavigate2 event  res only when the user clicks or submits).
To calculate the number of times the average user reuses a password we count the number of secondary URLs accompanying the primary URL in each PRE report.
Since some sites show up as a di erent URL on each visit we canoni-calize URLs (as in Section 2.2.1) before counting.
Thus a PRE report that contains https://www.paypal.com as the primary URL and http://www.yahoo.com/foo1 and http: //www.yahoo.com/foo2 as secondaries would be counted as being reused at one site rather than two.
Again, we must avoid over counting.
We calculate the averages over all available lists, using the list identi er calculated in Section 2.2.3.
The resulting number of sites per password is shown in Figure 3.
As can be seen the average password appears to be eventually used at just under 6 distinct login sites, but it takes on the order of two months to reach that point.
The  rst four or so sites that share a password are all visited in the  rst week.
Note that passwords used at only one site generate no PRE reports.
Again there will be some over-counting caused by users forgetting passwords and trying several passwords before logging in.
We also measure the number of sites that share a password on average.
This is shown in Figure 4, where we compute the fraction of passwords (across all clients) that are shared by two sites, three sites etc.. Recall that unique passwords do not show up.
This is because PRE reports are sent to the server only when a password reuse event has occurred.
A client who uses a password once will have that entered in the PPL, but if it is never reused the server will never receive a report on it.
Since it takes some time for the client s PPL to  ll, we have used data only from reports  led by clients at least 30 days old at the time of the report.
The average number of sites sharing a password (averaged across all passwords on which we received PRE reports) is
 We also show the histogram for weak passwords, those with bitstrength < 30 bits, and strong passwords, those with bit-strengths > 60 bits.
Observe that the strong passwords are used at fewer sites on average (the mean is 4.48 sites).
Weak passwords are used at more sites on average (the mean is at
 employ weak passwords at multiple sites when the password rules are lax.
Sites that impose password strength rules make it harder to share, and users probably have fewer such accounts.
There were 24k, 118k, 7.2k passwords used for the weak, average and strong password distributions respectively (all from clients more than 30 days old).
There is also a possibility of over counting in our numbers.
Occasionally a user with an account at, say, Yahoo will forget which of his k passwords is used for that account.
Suppose his Yahoo password is p0, but he initially tries p2 and p1 before logging in correctly.
In using passwords that are already in his PPL the user causes PRE reports to be sent, and for Yahoo to be added to the list of sites sharing passwords p1 an p2.
Thus this site now appears to share 3 of the passwords in the user s PPL.
Since we count the number of secondary URLs with the number of sites sharing a password (without verifying that an actual login has occurred) this causes some over counting of the number of sites per password.
We examine bitstrength by site in Section 3.3.1.
We examine password forgetting in Section 3.3.3.
Figure 2: Number of distinct passwords used by a client vs. age of client in days.
The average client appears to have about 7 passwords that are shared, and 5 of them have been reused at least once within 3 days of installing the client.
To estimate this we examined the  rst 24 hours of the life of a client.
Recall, each PRE report carries information about the password being reused, as well as information about the client.
The average number of distinct secondary URLs (canonicalized as in Section 2.2.1) reported by each PRE in the  rst 24 hours, plus one (for the primary URL) is a good estimate of the number of times that password is used per day.
To avoid overcounting we take only the last PRE per list (using the list ID generated in Section 2.2.3).
This estimate may be somewhat high, since users may be more active, and more inclined to login at multiple sites the day they install the client.
There is also a bias against infrequent
 Pwds per Client   Sites per pwd = 6.5   3.9   25, accounts.
We use the estimate of sites per password at 7 days to avoid bias toward passwords that still generate PRE reports after a long period of time.
We point out that there may be some over counting caused by typos, and users trying more than one of their passwords (thus boosting the sites per password count).
Here we estimate how often users login at di erent sites.
This data is not directly available, since we only generate a report the  rst time a site is visited.
To obtain an estimate, we use a  eld in the PRE report that indicates how much time has elapsed since last visit to each of the sites in the reuse list.
This is generated only when a user types the same password at a di erent site.
If the visits to the sites were independent, the average of the elapsed time would be half the mean time between visits.
The problem with that is that users tend to group their web usage.
So, if they go to web sites in random order, data would show that about half the time, they have just visited each other site.
To complicate things further, the ordering of visit to sites is probably not random: for example, users may tend to check their email accounts  rst thing when they login.
So, in trying to obtain an unbiased estimate of how often users login at several web sites, we get a slice in time of the PRE reports, ignore the reports with less than 5 minutes, and use the median of the time elapsed from the remaining reports.
Table 1 the estimates for the 15 most popular sites.
Worth mentioning is the fact that sites that allow you to keep logged for a long time (e.g., passport) have a reasonably long time between login events.
Casual sites, like youtube or paypal have a longer times between login events than, say email sites.
Similarly, addictive sites, like social networking sites, or adult sites seem to have a smaller time between logins.
We evaluated the distribution of login times.
Remember logins di er from normal browsing, as they require an account relationship with the hosting site.
Figure 5 shows a distribution of a few representative sites across the week.
Interestingly, sites like 4kids.tv have an increased tra c during the weekend, while most other sites present generally higher number of logins during the weekdays.
Note how logins correlate with the nature of the site; e.g.
note the similarity between Chase.com and BankOfAmerica.com.
Figure 6 shows the login distribution along the day.
Here the match between the banks is not as perfect, what can be attributed to di erences in the time zones of each bank costumers, for example.
In fact, by looking at merchants that use di erent domains in di erent countries, we can get a feeling for the in uence of the time zone.
For example, Figure 7 shows the time of the day distribution for 3 different sites of Amazon: amazon.co.uk, amazon.co.jp, and amazon.com.
Figure 3: Number of sites per password vs. age of client in days.
The average password appears to be used at about 6 di erent sites.
Figure 4: Fraction of the number of sites that share a password for weak passwords (bitstrength < 30 bits), strong passwords (> 60 bits) and the overall average.
Observe that weaker passwords tend to be shared at more sites, and stronger ones at fewer.
internet users.
For example a user who goes online only once a week, and checks multiple accounts that day would bias this estimate upwards, since they would have no activity for the rest of the week.
Since infrequent users are unlikely to be early adopters of toolbar downloads we view this as a minor source of bias.
The number of distinct passwords used by a client is given in the report.
Thus averaging we get (for 24 hours) Pwds per Client   Sites per pwd = 2.519   3.2202   8.11, passwords that a user types per day.
There is also a certain measure of under counting in this estimate.
A user who checks web email several times a day and retypes the password will have that counted only once in this estimate.
user have?
Passwords per client times sites per password is a good estimate of the number of passwords a user types per day if we measure both those numbers in the  rst 24 hours, and assume that few passwords are typed more than once per day.
If we wait until the client PPL has  lled the same product, measured for clients older than 30 days, allows us to estimate the number of password accounts that the average
 aol.com bebo.com ebay.co.uk ebay.com google.com hi5.com live.com match.com msn.com myspace.com passport.net paypal.com yahoo.co.jp yahoo.com youtube.com # PRE reports Avg.
mins (thousands) between logins





























 Table 1: The 20 most commonly used login sites order by frequency.
Figure 8 shows the distribution of password strengths for a number of sites.
These are the New York Times, PayPal, Fidelity and Microsoft s Outlook Web Access (a web interface that allows Microsoft employees access to email and calendar information).
Observe that there is a huge di erence between the NY Times passwords (average strength 37.86) where users are merely protecting a newspaper subscription, and Microsoft OWA (average strength 51.36) where employees are forced to choose strong passwords to protect the corporate network.
Figure 8: Histogram of password bitstrengths at various sites.
The strength appears to be a function of the users  perceived importance of the site.
New York Times subscription passwords (average bitstrength 37.86) are noticeable weaker than the average over all sites (average bitstrength 40.54), while PayPal and Fidelity (average bitstrengths 42.04 and 39.92) are stronger.
Microsoft OWA, which mandates strong password rules has the highest (average bitstrength 51.36).
The password bitstrengths allow us to determine the length of the password and the number of character types it includes.
By tabulating all possible password lengths from 7 to 16 (no passwords shorter than length 7 generate en tries in the PPL, and the realtime locator FIFO is length 16) and all combinations of the 4 di erent types we  nd a unique mapping between the quantized password strength Figure 5: Distribution of logins during the week.
Figure 6: Distribution of logins along the day.
We next examine the strength of passwords that users choose and how it varies with site.
Recall that each PRE contains a quantized bit strength, PwdStr, for the password being reused.
This was calculated as log2((alph.
size)len).
The alphabet size is the sum of the sizes of the di erent types of characters.
These types and sizes are lowercase (26), uppercase (26), digits (10) and special (22).
Thus a 9 character password that contains both upper and lower case characters and digits would have bitstrength log2(629)  
 Figure 7: Distribution of logins for amazon at di erent countries: USA, Japan and UK.
SuMoTuWdThFrSa051015204kids.tvadultfriendfinder.comamazon.combankofamerica.comchase.com% traffic 2am 6am10am 2pm 6pm10pm024684kids.tvadultfriendfinder.comamazon.combankofamerica.comchase.com% traffic 2am 6am10am 2pm 6pm10pm02468amazon.co.jpamazon.co.ukamazon.com% traffictime (PST)051015202530354045502030405060708090Bit StrengthPercentNY TimesAveragePaypalFidelityOWAWWW 2007 / Track: Security, Privacy, Reliability, and EthicsSession: Passwords and Phishing662Figure 9: Di erent types of passwords as a function of length averaged across all sites.
Observe that a clear majority of all passwords are lower case letters only.
PIN s, or passwords that are purely numeric, account for about 20 % of passwords (note that we did not record numeric passwords of length 7 or less).
Alphanumeric passwords, consisting of upper case, lower case and digits constitute small portion.
A tiny minority of passwords are strong, in the sense of containing upper, lower, digits and special characters.
and length, type.
This allows us to analyze not merely the strengths of passwords but also the types.
Figure 9 shows the percent of passwords that are of a particular type as a function of length (averaged across all login sites).
We already know from Section 3.3.1 that users choose weak passwords, but Figure 9 breaks this down even further.
We plot, as a function of length, the fraction with lowercase only, lowercase and digits, lowercase, uppercase and digits and all four types.
Note the fractions do not precisely sum to one as we have omitted rare combinations for clarity (e.g.
passwords that contain only digits and special characters but no upper or lower case letters are extremely rare).
What is remarkable is that passwords containing only lowercase letters dominate at all lengths.
Even as users perceive the need, or are forced, to use stronger passwords, it appears that they use longer lowercase passwords and use uppercase and special characters hardly at all.
Figure 10 repeats the calculation, but restricts to Paypal passwords only.
Again the trend is very pronounced: lowercase only passwords dominate overwhelmingly.
Even for passwords that are 13 characters long, lowercase-only accounts for 78% of the cases.
The situation appears to be changed only when a site forces password policies that use a greater number of types.
Figure 11 show the plot for Microsoft Outlook Web Access.
Like many corporations, Microsoft forces employees to choose strong passwords and codi es certain passwords strength requirements.
In this case passwords that employ both upper and lower case and special characters account for non-negligible fractions of the passwords.
This accords well with the  nding of [9] where very few users used a special character unless instructed to do so.
People forget passwords a lot.
In the case of Yahoo logins to user accounts generally occur at https://login.yahoo.
com while forgotten passwords, new registrations etc occur at https://edit.yahoo.com.
Table 2 shows the number of PRE reports listing various Yahoo edit URLs as the primary Figure 10: Di erent types of Paypal Passwords.
The most common types of passwords follow the average trend (as shown in Figure 9) quite closely, with the exception that numeric passwords are less common.
Figure 11: Di erent types of Microsoft Outlook Web Access Passwords.
The most common types of passwords follow the average trend (as shown in Figure 9) quite closely, with the exception that numeric passwords are less common.
Figure 12: Number of previously unseen password URLs visited by new clients as a function of time.
Observe that the number of new sites plateaus relatively quickly.
pw and forgot pwex as a reasonable approximation to the number of users who forgot passwords we get 2149, out of a total of 50.1k PRE reports against the main login site.
This implies 4.28% of Yahoo users forgot their passwords over a three month period.
Also observe that combined visitors to the password change and reset pages (2149) amounted to 60% of the visitors to the new registration page eval register.
Observe that all of the instances of users typing passwords to perform administrative functions amounts to
 except the  rst as a percent of the  rst).
https://login.yahoo.com https://edit.yahoo.com/config/eval register https://edit.yahoo.com/config/change pw https://edit.yahoo.com/v/full https://edit.yahoo.com/config/register https://edit.yahoo.com/config/login verify2 https://edit.yahoo.com/config/eval forgot pw https://edit.yahoo.com/config/id check https://edit.yahoo.com/v/recv https://edit.yahoo.com/config/forgot opt https://edit.yahoo.com/config/delete user https://edit.yahoo.com/config/login https://edit.yahoo.com/config/forgot pwex https://edit.yahoo.com/config/child register https://edit.yahoo.com/config/child trap https://edit.yahoo.com/config/mail https://edit.yahoo.com https://edit.yahoo.com/config/mail mev https://edit.yahoo.com/config/parent verify https://edit.yahoo.com/v/send https://edit.yahoo.com/config/set profile https://edit.yahoo.com/config/forgot pw.html https://edit.yahoo.com/config/edit account






















 Table 2: Users appear to forget passwords and perform other administrative functions a lot.
For the example of Yahoo, password change operations occurred 15 % as frequently as sign-in operations.
We had access to a list of phishing sites that were active during a three week period toward the end of the study.
These sites were determined and veri ed to be phishing by a third party vendor.
There was an average of 436k clients during this three week period.
We recorded 101 PRE reports listing one of the veri ed phishing sites as the primary URL.
This implies that the client has typed at the phishing site a password previously used at another site on the user s PPL, which is a fairly good indication that the user has been  phished.  We can use this to get an estimate of the annualized fraction of the population being phished as

   0.00403.
Thus the data indicates that on the order of 0.4% of the population falls victim to a phishing attack a year.
Self-maintained Routers We found a total of 1203 PRE reports listing http://192.
168.0.1, http://192.168.1.1 or http://192.168.2.1 as the primary URL.
These addresses are used almost exclusively for router setup pages.
Since we have 544k clients, this indicates that roughly 0.2% of users maintain their own router, have a nonempty password (since addresses of the form http://192.168.*.
* are not accessible from the outside network this is a common practice), and logged in at least once during the period of our study.
Since many users will con gure a router once, and seldom need to login again, the actual percent who maintain their routers is probably much higher.
A partial list of the frequency with which URLs appeared as the primary URL in a PRE report was given in Table 1.
If we compile the full table of frequencies we  nd a huge range of login frequencies.
From login.live.com which occurs
 once.
Call Nr the number of distinct URLs that appear r times as primary URL of a PRE report.
Since we have observed a certain set of clients for a limited period it is natural to wonder how accurate a picture this data gives us of the entire universe of login URLs.
It is reasonable to infer that the most popular sites, listed in Table 1, would remain the most popular if we had 2, 10 or 100 times as many clients.
But, how many more new login URLs might we  nd?
(cid:80) The standard means of estimating the probability mass of unseen species in a limited observation is the Good-Turing estimate [8].
From the full version of Table 1 we have N = rNr = 1320515 and N1 = 103978.
Thus the Turing-Good estimate [8] of the amount of the probability mass missing is N1/N   0.079 or 7.9%.
This tells us that our estimate of the distribution of login frequencies is reasonably accurate, in that the bulk of the mass has been captured.
So, if the probability mass of the unseen urls is around
 question is  how many new sites are added for each new user we add? .
Figure 12 shows the number of previously unseen password URLs visited by new clients as a function of number of users considered.
The  gure was obtained by considering only a (varying size) partial subset of the users.
Observe that the number of new sites plateaus relatively quickly: at the user base we had in the experiment, each of the last few users add only about 1.3 new sites, down from more than seven for the  rst 1% of the clients.
Extrapolating from the existing users to obtain the actual number of login sites is much trickier than estimating the overall probability mass.
Efron and Fisher [4] use a Poisson distribution of the frequencies and derive an estimate  (cid:88)  (t) = ( 1)r 1Nrtr, r=1 where t is the size of a new sample relative to the size of the existing sample.
For example  (1/2) would be the estimate of the number of unseen URLs to be expected in sample that included half as many PRE reports as our existing sample.
Using our PRE report date we  nd  (1)   80811, with a standard deviation of 428, meaning that a second sample would be expected to turn up 80k new login URLs previously unseen.
Unfortunately the estimate for  (t) is unstable for t > 1, hence we cannot estimate beyond that with any accuracy.
Raghava Kashyapa, Steve Miller, Anthony Penta and Steve Rehfuss for enormous help in acquiring and analyzing the data.
