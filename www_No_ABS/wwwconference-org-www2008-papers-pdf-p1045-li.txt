Keyword search is a proven and widely accepted mechanism for querying in textual document systems and World Wide Web.
The research community has recently recognized the bene ts of keyword search and has been introducing keyword search capability into XML documents [2, 4, 5, 6, 7].
In this paper, we study the problem of keyword proximity search over XML documents by considering the disjunctive semantics (i.e., the OR predicate) among the input keywords, and provide a novel ranking mechanism for e ective keyword search, by taking into account both the structural n
 n
 n
 n
 n
 n
 n
 n
 n
 n
 n
 n
 n
 n
 n
 n
 n
 n
 n
 n
 k
 k
 n
 n
 k
 k
 k
 n
 n
 n
 n
 n
 n
 n
 n
 n
 n
 k
 k
 n
 n
 k
 k
 k
 n
 n
 n
 n
 k
 k
 n
 n
 n k

 n
 n
 k
 k
 n
 n
 n
 n k

 n 16 n
 k
 k
 k
 k
 k
 k
 k
 k k

 k
 k
 k
 Figure 1: Maximal Compact Connected Trees similarity from the DB point of view and the textual similarity from the IR viewpoint.
We introduce the notions of Compact LCA (CLCA) and Maximal CLCA (MCLCA) to capture the focuses of keyword queries, and propose Compact Connected Trees (CCTrees) and Maximal CCTrees (MCC-Trees) to e ciently and e ectively answer keyword proximity queries.
Moreover, we devise a novel ranking mechanism, RACE, to Rank compAct Connected trEes.
RACE not only considers the textual similarity like document relevancy in IR literature, but also incorporates the structural similarity into the ranking function from the DB point of view.
Traditional methods usually compute the LCAs of content nodes to answer keyword queries.
However, it is inef- cient to compute all the LCAs as given a keyword query (cid:2)m {k1, k2,  , km}, there are i=1|Ii| combinations of LCA candidates, where Ii denotes the set of content nodes that directly contain keyword ki.
To address this problem, we introduce the concepts of Compact LCA (CLCA) and Compact Connected Trees (CCTrees).
i+1,  ,v(cid:2) q),  v(cid:2)
 Definition 2.1.
(CLCA and CCTree) Given q content nodes, v1 I1, v2 I2,  ,vq Iq, and w=LCA(v1,v2,    ,vq).
w is said to dominate vi w.r.t.
{k1,k2,  ,kq}, if w(cid:3)LCA(v(cid:2) v(cid:2) i 1,vi,v(cid:2) q Iq.
w is a CLCA w.r.t.
{k1,k2,  ,kq}, if w dominates v(cid:2) each vi for 1 i q.
The tree rooted at a CLCA and containing the paths from the root to the nodes dominated by the root, is called a CCTree.
i 1 Ii 1, v(cid:2)

 i+1 Ii+1,  , Copyright is held by the author/owner(s).
A CLCA is the LCA of some relevant nodes and the irrelevant nodes cannot share a CLCA.
For example, in Figure
 n2 is not the CLCA of n4 and n17, although n2 is their LCA.
Because n3 dominates n4, and n15 dominates n17, but there is no node which dominates both n4 and n17.
We observe that n3 and n15 are more relevant to {k1,k2} than n2.
i ) s m ( e m
 d e s p a l
 The subtree rooted at n3 is a CCTree.
CLCA is orthogonal to SLCA [7] and avoids false negatives introduced by SLCA.
For example, in Figure 1, n0 and n6 are both CLCAs w.r.t.
{k1,k2,k3,k4}, and they dominate {n20,n21,n23,n24} and {n8,n9,n11,n12}, respectively.
n0 is a false negative for SLCA as n0 has a LCA descendant n6.
CLCA can avoid those false negatives and thus is a more meaningful methodology to answer keyword queries.
We give the least upper bound of the number of CLCAs as stated in Lemma 2.1, which is much smaller than the number of LCAs.
i=1|Ii|-1 CLCAs w.r.t.
a query K=(k1,k2,    ,km) and an XML document D in terms of the disjunctive semantics (i.e., the OR predicate).
Definition 2.2.
(MCLCA and MCCTree) Given a keyword query K={k1,k2,  ,km} and Ki={ki1 ,ki2 ,  ,kiq} K.
Suppose w= CLCA(vi1 ,vi2 ,  ,viq ), where vi1 Ii1 ,  ,viq Iiq .
w is a Maximal CLCA (MCLCA), if  k(cid:2) (K-Ki), v(cid:2) k Ik(cid:2) , (cid:7) w(cid:2) k and every vij for 1 j q.
The CCTree rooted at an MCLCA is called an MCCTree.
, which dominates both v(cid:2) Lemma 2.1.
There are at most 2 (cid:3)m To e ectively answer keyword search, we propose the concepts of Maximal CLCA and Maximal CCTree.
An MCLCA is also a CLCA, which has no ancestors that still dominate some other content nodes besides the content nodes dominated by the MCLCA.
Therefore, an MCLCA dominates a maximal set of content nodes and is more meaningful than a CLCA.
An MCCTree is the CCTree rooted at an MCLCA and contains more keywords than CCTrees.
For example, in Figure 1, the four circled trees are MCCTrees.
T F IDF based methods for ranking relevant documents have been proved to be e ective for keyword proximity search in text documents.
However, traditional ranking techniques in IR literature may not be e ective to rank MCCTrees, as besides the term frequency (tf ) and inverse document frequency (idf ), MCCTrees also contain rather rich structural information.
We take into account both the structural similarity and traditional IR metrics to rank MCCTrees.
There are three parameters - the number of content nodes in T , nc, the number of distinct input keywords contained in T , nk, and the number of all nodes in T , ns, which will a ect the score assigned to an MCCTree, and we will employ these three parameters to rank MCCTrees.
Intuitively, the larger nc, the higher the score of the MCCTree should be; on the other hand, the larger nk, the more likely the MCCTree is relevant to K. On the contrary, ns should be inverse with the score of the MCCTree.
In addition, the succinctness of the MCCTree should be re ected in the structural similarity function, and the more succinct of the MCCTree, the higher score of the structural similarity should be.
Based on above observations, we can compute the structural similarity.
Accordingly, we combine the textual similarity and structural similarity to e ectively rank the MCCTrees.
We have conducted a set of experiments to evaluate the performance of our approach.
We used real dataset DBLP in our experiments.
The raw  le was about 420MB.
The experiments were conducted on an Intel(R) Pentium(R) 2.4GHz computer with 1GB of RAM.
The algorithms were implemented in Java.
We compared RACE with state-of-the-art methods, XSEarch[1], XRank[2], GDMCT[3] and MSLCA




 XSEarch XRank

 MCCTree





 (a) Conjunctive Semantics i ) s m ( e m
 d e s p a l
 1e+007 1e+006





 XSEarch XRank

 CCTree





 (b) Disjunctive Semantics i ) s m ( e m
 d e s p a l
 1e+007 1e+006





 XSEarch XRank





 (c) Disjunctive Semantics+Rank


 Figure 2: E ciency of various algorithms n o i s i c e r











 Precision

 ) % ( y c n a v e l e
 k p o







 XSEarch XRank





 Top-k

 Figure 3: Top-k answer relevancy [7].
We selected six groups of queries, G1,  ,G6.
Each group has ten queries and the queries in the same group have the same number of keywords.
For example, each query in G3 has 3 keywords.
Figure 2 illustrates the experimental results on search e ciency and Figure 3 gives the experimental results on search quality.
In this paper, we have investigated the problem of keyword proximity search over XML documents.
We proposed the notions of CLCA and MCLCA to capture the focuses of keyword queries and adopted CCTrees and MCCTrees to e ec-tively and e ciently answer keyword proximity queries.
We demonstrated a novel ranking mechanism, RACE, to Rank the compAct Connected trEes, by taking into account both structural similarity from the DB viewpoint and textual similarity from the IR point of view.
The experimental results show that our approach achieves high search e ciency and quality, and outperforms existing methods signi cantly.
This work is partly supported by the National Natural Science Foundation of China under Grant No.60573094, the National High Technology Development 863 Program of China under Grant No.2007AA01Z152 and 2006AA01A101, the National Grand Fundamental Research 973 Program of China under Grant No.2006CB303103.
