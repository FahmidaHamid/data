Traditionally, developing Web applications and consuming web services on mobile devices is very hard or impossible.
Nowadays, web browsers and internet connections that these devices are equipped with are increasingly used to make the development and consumption of mobile services much easier.
However, mobile Web remains very limited in terms of functionality and usability.
The web experience is very frustrating for most of the mobile users.
Ajax is one of the delivery mechanisms of mobile Web2.0 that leverages existing Web standards such as HTTP, xHTML, XML,
 asynchronous nature of XHR (XmlHttpRequest) to avoid whole web page refreshes.
The main objective of our research work is validating some concepts related to mobile Web architectures in the business context.
The ultimate goal is to define an architecture that can reduce the load on the Web servers and ease the consumption of web services on mobile devices.
This is achieved by leveraging the processing and communication capabilities of current mobile browsers while providing an acceptable user experience.
First, we will present a brief overview of Mobile Ajax followed by a description of our MobileWeaver Ajax framework and its components.
We will provide some future research directions in the last section.
and the
 Little Rock AR 72204
 serhan_dagtas@yahoo.com

 The basic technology in Mobile Ajax is not much different from desktop Ajax.
Basically, XHR or an equivalent ActiveX component is used to handle asynchronous communications.
However, the way Ajax is used in mobile environments could be different from the way it is used for the desktop.
On the desktop, Ajax is mainly associated with user experience using partial updates, drag and drop, type ahead, etc.
In addition to the user experience enhancements, Ajax provides an answer to a basic need related to communication management on cellular networks and data management.
Because of the latency and perishable nature of the mobile and wireless networks, Ajax can be of great help in managing and optimizing the data exchange between the mobile application and the enterprise system.
Mobile Ajax applications can handle asynchronous messaging and possibly client side business logic for offline processing during periods of disconnection.
MobileWeaver Ajax is an end-to-end infrastructure for composing and consuming mobile Ajax applications that are connected to SAP or third party Web services using either SOAP or other protocols such as XML or JSON.
In addition to the portability issue among different Ajax enabled browsers, MobileWeaver Ajax provides transparent client runtime and middleware components to facilitate SOA consumption on mobile device browsers.
MobileWeaver Ajax provides a simple method for reducing SOAP messages and mitigating the network latency through pre-fetching, batching and client-side processing.
MobileWeaver uses XML to describe the applications and uses JSON for message exchange.
Copyright is held by the author/owner(s).
Figure 1.
MobileWeaver Ajax Framework architecture.
illustrated in Figure 1, will be described in detail in the following sections.
MobileWeaver composer is a completely browser-based environment for mashing-up multiple Web services and binding them visually to mobile forms.
The forms are also designed in a drag-and-drop fashion.
When the composition step is completed, the composer generates an Application Model (AD) and deploys it into the user s work area.
The application model contains a description of the UI and configuration data to be used during runtime for aggregation and reduction of web services.
Figure 2 shows a screenshot of the MobileWeaver Ajax composer in its current state.
Figure 2.
MobileWeaver Ajax Composer.
The middleware consists of four core components:
 This component is responsible for loading WDSL files and creating dynamic proxy clients automatically, which are used to invoke the remote Web service and receive the results as generic Java objects.
Based on the configuration which was designed during the composition phase, the Web service dynamic adapter takes the Web service response object and reduces it to optimized messages following a JSON format.
The resulting JSON message contains only filtered information.
The Web Service User Manager stores the login information that the business users provide to login to the participating web services.
The the participant web services can come from different systems including the freely available ones on the internet.
This component is used to aggregate different Web services and provide a single output.
This component is used in conjunction with Web Service Dynamic Adapter.
Aggregating web services may seem straightforward; however, many challenges need to be important because login component is addressed in the upcoming months.
The major challenges are related to visual composition of business logic concurrency and transaction management.
This component is a set of JavaScript utilities used to abstract the specificities of mobile browsers and provide them as a unified and browser-independent set of interfaces.
The Application Model Parser is a JavaScript parser that is capable of transforming MobileWeaver Ajax Framework application models into an xHTML and JavaScript code.
The parser generates xHTML pages, generates the client side validation code and the necessary bindings between the UI components and the remote services.
OpenAjax Hub is an implementation of the Pub/Sub specification of OpenAjax organization.
The OpenAjax Hub allows client-side JavaScript components to collaborate in a loosely coupled fashion through an event management mechanism.
The Cache Manager is a JavaScript component responsible for holding and indexing JSON objects.
The technique used to organize the cache follows REST architecture URIs and uses a timestamp.
The cache manager attempts to clean the cache every time a new append is requested.
The messages manager is used for managing the XHR object and for queuing and batching asynchronous requests.
Queuing is used in case of disconnection.
If the browser gets disconnected for any reason, the Message Manager can queue the user requests for future trials.
In the near future, we plan to assess and measure the usability of our framework against real customer needs.
We also plan to test the framework on a number of different smartphones and cellular networks and adapt the architecture consequently.
Special thanks to Ris Stephane, Andreas Goeb and Daniel Koelsch, Christian Eck and Jean-Francois Desjeans Gauthier.
Thanks also to our fourth author Abdel Benharref.
