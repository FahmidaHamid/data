Currently, voice applications are accessed using a telephone device as shown in Figure 1.
A Voice Browser is used to access multiple applications A1, A2, ..., An that are hosted on the same Application Server (App Server in the  gure).
Since all the voice applications are on the same server, and are accessed by the same Voice Browser, it is possible for the Application Server to maintain a browsing history of the applications being browsed.
The applications A1 to An can provide a link to each other [1] .
+

 An  App Server
 +

 Bn  App Server Voice Browser Voice Browser Figure 1: The current deployment and access model.
However, in this architecture, the Voice Browser at the  rst site will not be able to surf a link from an application in set A to any application in B.
How to enable sur ng such cross-browser links is the problem we address in this paper.
By allowing a voice application on one Voice Browser to link to another voice application deployed on another Voice Copyright is held by the author/owner(s).
Browser, the reachability of these applications can be significantly increased.
This is analogous to the web applications in the World Wide Web, where any website can connect to any other website, regardless of where they are deployed.
Continuing the Web analogy further, we have shown that creating and deploying voice applications (called VoiceSites) is as easy as creating a webpage [3].
This is especially important for people in developing countries where Internet/PC availability is low, since creating VoiceSites can be done by speaking through an ordinary telephone.
We also described the process of enabling hyperspeech link to another voice application.
and presented a Hyperspeech Transfer Protocol to support hyperspeech links [2].
Such an interconnection of VoiceSites open several possibilities for telephony voice applications and can create a web parallel to the WWW, known as WWTW [4].
As an example, a  sherman can create his VoiceSite that has information and pricing of the  shes available with him.
He can link his VoiceSite to a payment gateway VoiceSite to enable transactions.
Villagers can call his VoiceSite and order a  sh and make payment while the  sherman is busy at his lake farm.
In a practical scenario, it is likely that these two VoiceSites are hosted at di erent Voice Browsers.
In this paper, we present the concept and architecture of a T-Web Browser.
This browser will enable navigation of interlinked voice applications that are deployed across di erent Voice Browsers.
The architecture illustrates that the Browser can be implemented as a special VoiceSite (Section 2) and can support standard browsing features such as go-back and bookmark.
The T-Web browser can also be implemented on the device itself, but that would require speech recognition support on the device.
We implement the T-Web Browser as a special VoiceSite.
In addition to a dialog  ow (authored as VoiceXML-jsp), the T-Web Browser VoiceSite uses a database to maintain a history of the current user session.
It uses an additional database to store the caller bookmarks.
The history consists of the title and the phone numbers of the VoiceSites called by the user.
The bookmarks contain the phone number and a name tag for each bookmarked VoiceSite.
The operational model of the T-Web Browser is shown in Figure 2.
We describe the working of T-Web Browser using the circled steps shown in the  gure.
number of the VoiceSite through HSTP.
Voice Site
 Voice Site
 Voice Site



 Voice Site
 Voice Site
 HSTP Transfer


 Voice Site


 Back Voice Site
 Voice Site
 T-Web Browser
 History Bookmarks

 +
 Dialog Flow App Server Voice Browser Figure 2: The T-Web Browser interaction with VoiceSites.
the other VoiceSite, the session is transferred to the target VoiceSite and HSTP passes the call transfer information to the T-Web Browser.
current VoiceSite to initiate a transfer to the earlier VoiceSite phone number.
the currently browsed VoiceSite.
The HSTP layer implements the protocol for transfer of user session from one VoiceSite to another.
We will have to modify the HSTP protocol and the message format for it to support browsing features.
An additional  eld will have to be added to the HSTP message.
This is the phone number of the next VoiceSite to which the user will surf.
The current VoiceSite application context will be transmitted to the T-Web Browser in the application context  eld of the HSTP message.
The above architecture requires that a user can access the VoiceSite and the T-Web Browser simultaneously.
This requires the availability of two simultaneous voice channels from the user phone.
This can be realised in two ways: (a) through a three-party conference call between the user, the T-Web Browser and the VoiceSite, (b) by having both the voice channels active, and the user can put one channel on hold while talking through the other.
The  rst approach requires that the VoiceSite and the T-Web Browser should be able to disambiguate the user utterance and identify whether it is a command to the browser or an interaction with the VoiceSite.
The latter approach needs a phone (and the service provider) that has the ability to provide two simultaneously active calls.
Since neither of the two requirements are unsurmountable, any of these methods can be used in the implementation of the T-Web Browser.
This architecture can support rich browsing features similar to multi-tabbed browsing on the WWW by enabling simultaneous active calls to di erent VoiceSites.
A user can put other VoiceSites on hold while interacting with one.
We have implemented the HSTP protocol layer that will enable the call and context transfer required by the T-Web Browser.
The HSTP protocol has been implemented as a Java class library and the API can be accessed from any VoiceXML application through a Java Bean.
We are in the process of developing the prototype of the T-Web Browser VoiceSite.
The VoiceSite will be authored in VoiceXML-jsp.
We will deploy this VoiceSite in Apache TomCat.
This will be accessed through phone calls that are intercepted by the Dialogic telephony card.
We use the Genesys Voice Browser to interpret VoiceXML.
In this paper, we brie y presented the requirement for a Browser that can browse VoiceSites that are deployed across domains.
We described the concept and a high level architecture of a T-Web Browser that is implemented as a Voic-eSite.
We are in the process of implementing this browser, and keenly await user feedback through  eld studies.
