A great number of remote binary execution vulnerabilities including bu er over ow and format string vulnerabilities have been found in web servers and web applications [1].
This type of vulnerabilities allow attackers to use a crafted HTTP request to inject a piece of exploit binary code into the  body  of the web servers and applications.
Once such exploit binary code injection attacks succeed, the attacker may gain full control of the victim machine.
In di erent attacks, exploit code may be either a piece of shellcode to break into web servers or an infection vector for worms.
We propose STILL, a real-time, out-of-the-box, signature-free, remote exploit binary code injection attack blocker to protect web servers.
STILL is motivated by an important observation that the request messages to web servers are exclusively data and not binary executable code.
Since remote exploits are typically binary executable code, this observation indicates that if we can precisely distinguish (service requesting) messages that contain binary code from those that do not contain any binary code, we can protect web servers as well as other Internet services (which accept data only) from binary code-injection attacks by blocking the messages that contain binary code.
Figure 1 shows that an application layer proxy-based STILL is deployed between the web server and the corresponding  rewall to protect web servers.
STILL (including static taint analysis and initialization analysis) detect not only unobfuscated exploit code, traditional polymorphic and metamorphic exploit code, but also self-modifying and indirect jump obfuscation code that could easily defeat previous static analysis approaches.
Indeed, STILL is robust to almost all anti-signature, anti-Copyright is held by the author/owner(s).
static-analysis and anti-emulation obfuscation.
STILL is signature free, thus it can block new and unknown remote code injection attacks such as zero-day exploit code.
STILL is also good for economical Internet wide deployment with very low deployment cost.
Http Requests Firewall Proxy-based STILL (Application Layer) Web Server Figure 1: Deployment of STILL.
This paper is mainly relevant to the previous static analysis exploit code detection approaches [3, 4, 6].
One bene t of these static analysis approaches is that they can detect both foreseen exploit code exploiting known vulnerabilities and zero-day exploit code exploiting unknown vulnerabilities.
In addition, they are in general more resilient to poly-morphism and metamorphism (than string-matching signatures).
However, Polychronakis et al. [5] demonstrated that some anti-static-analysis techniques such as self-modifying can easily thwart these existing static analysis techniques.
Polychronakis et al. [5]  rstly proposed a CPU emulator to detect polymorphic shellcode.
The emulators, being a dynamic analyzer, are immune to most anti-static-analysis techniques.
However, dynamic analysis is vulnerable to several anti-emulation techniques, which have existed in virus writer community for many years.
Motivated by [5], we proposed STILL, which is robust to both anti-static-analysis and anti-emulation techniques.
Figure 2 depicts how STILL works.
We next brie y describe its working  ow.
It works as a proxy-based blocker in the application layer.
When it captures a data stream, it disassembles the data stream and generates a control  ow graph.
It analyzes the disassembled result in two stages.
First, STILL detects self-modifying and indirect jump obfuscation code.
Although the real exploit code may be hidden by self-modifying and indirect jump, the obfuscation code itself provides some strong evidences of self-modifying and/or
 Disassembly and control flow generation Self-modifying or indirect jump obfuscation code ?
No Plain exploit code, metamorphic code, etc ?
No Pass Yes Block/Alert Yes Block/Alert Figure 2: The activity diagram of STILL system indirect jump behaviors.
STILL detects these behaviors by static taint analysis and initialization analysis.
Since poly-morphism is a kind of self-modifying, STILL can also detect polymorphic code in this stage.
However, attackers may use neither self-modifying nor indirect jump obfuscation.
In the second stage, STILL detects the plain exploit code based on system calls and/or function calls that could even have been obfuscated by metamorphism.
STILL also exploits static analysis and initialization analysis in this stage to combat other obfuscation techniques.
Below we will describe the mechanisms in greater details.
Generation We exploit the O(N) disassembly algorithm used in SigFree [6] to disassemble the input data stream and generate a control  ow graph.
Here N is the length of the data stream.
It  rst decodes all possible instructions and  nds all possible transfer of control in a data stream, and then creates a control  ow graph based on these instructions and transfers of control.
We note that in the presence of indirect jump and self-modifying obfuscation, it is impossible to completely and statically disassemble the entire body of the exploit code embedded in a data stream using the recursive traversal algorithm.
Fortunately, the partially disassembled result may already provide some strong evidences of self-modifying and/or indirect jump behavior.
Jump Obfuscation Code The new techniques we propose to detect self-modifying and indirect jump exploit code are called static taint analysis and initialization analysis.
We observe that self-modifying and indirect jump exploit code  rst need acquire the absolute address of payload.
Accordingly, we  rst try to  nd the piece of code which acquires the absolute address of payload at runtime from an instruction sequence.
The variable which holds the absolute address will be marked tainted.
Then, we use the static taint analysis approach to track the tainted values and detect whether tainted data are used in the ways that could indicate the presence of self-modifying and indirect jump exploit code.
A tainted variable is propagated to a new tainted variable by data transfer instructions that move data (e.g., push, pop, move) and data operation instructions that perform arithmetic or bit-logic operations on data (e.g., add, sub, xor).
For data transfer instructions, the destination operand will be tainted if and only if the source operand is tainted.
For data operation instructions, the destination operand will be tainted if and only if either source or destination operand is tainted.
Finally, we use initialization analysis to reduce false positives.
We observed that the operands of self-modifying and indirect jump code must be initialized.
Speci cally, the jump target of indirect jump should be initialized; the operands of memory updating or writing instructions in self-modifying code should be initialized.
If they are uninitialized, we will not consider them as attacks.
To evaluate the detection e ectiveness of STILL, we collected 12,000 polymorphic attack messages from 10 publicly available polymorphic engines, all of which encrypt the original shellcode.
Among these ten, seven engines are from the Metasploit framework [2], including Countdown, Alpha2, JumpCallAdditive, Pex, PexFnstenvMov, PexFnstenvSub, and ShikataGaNai.
The other three engines are CLET , AD-Mmutate, and JempiScodes .
ShikataGaNai, CLET, AD-Mmutate, and JempiScodes are advanced polymorphic engines, which also obfuscate the decryption routine by metamorphism such as instruction replacement and garbage insertion.
CLET also uses spectrum analysis to defeat data mining methods.
We generated 1,000 di erent attack messages per each of ADMmutate and CLET.
For JempiScodes, we generated 3,000 di erent attack messages, 1,000 per each of its three obfuscation algorithms.
We also generated 7,000 di erent attack messages using the Metasploit Framework, 1,000 per each of the following engines, Alpha2, JumpCallAdditive, Countdown, Pex, PexFnstenvMov, PexFnstenvSub, and Shikata-GaNai.
We tested the standalone prototype of STILL using these 12,000 attack messages.
All of these messages are successfully detected.
We proposed STILL, a novel static taint and initialization analysis approach, to protect web servers from binary code-injection attacks.
Our experiments show that STILL detect self-modifying code or indirect jumps with a high accuracy.
Acknowledgments This research was supported by the National Science Foundation (CAREER NSF-0643906).
