WS-BPEL is emerging as the prominent language for modeling executable business processes.
This is because WS-BPEL provides an appropriate set of constructs to design a process in an intuitive way.
One of these is the ability to synchronize concurrent  ows within a process by specifying control links between activities.
There could be additional types of constraints between concurrent activities.
Consider a trip planner that executes the activities of booking an airline ticket and a hotel concurrently to improve its e ciency.
Of course, the date of arrival in the airline ticket must coincide with the date of check-in at the hotel.
In the event that the reserved airline ticket becomes unavailable, a new airline reservation with a di erent date must be coordinated with a new hotel booking for that date.
In the example, the constraint that airline and hotel booking dates must coincide requires that actions in response to events be coordinated.
We call such types of constraints between concurrent activities as coordination constraints.
These constraints assume Copyright is held by the author/owner(s).
signi cance as processes become  exible and must adapt to events to preserve their optimality.
Unfortunately, coordination constraints are not natively supported by WS-BPEL.
We show how coordination constraints may be generally represented in processes speci ed using WS-BPEL, by utilizing its extensibility constructs.
Previous research [3] has shown how concurrent activities participating in coordination constraints may adapt to events while respecting the constraints.
From these approaches, we deduce a generalized model of adaptation in conjunction with a constraint enforcement mechanism.
WS-BPEL process designers may utilize these generic models for adapting the process while respecting the constraints.
We also show how we may transform the process extended with coordination constraints and adaptation models into a core WS-BPEL process that does not utilize the extensibility constructs and is capable of executing on standard WS-BPEL implementations.
Karastoy-anova et al. [2] extend BPEL to allow for runtime selection of services using  nd and bind .
A manually provided policy is used and constraints on activities are not considered.
Motivating scenario Consider a Web services based process for organizing a trip that consists of concurrently booking an airline ticket, and hotel and rental car at the destination.
We consider the event where a reservation of the airline subsequently needs modi cation because the airline becomes unavailable, perhaps due to overbooking.
In response, the planner may choose to change the date of departure, change the destination airport to another one in the city, or simply wait hoping that a vacancy arises.
Note that a change in departure date will require coordinated re-bookings of all three   airline, hotel and the rental car.
A change in the destination airport will need modi cation in the booking of the airline and rental car agency concurrently.
If coordination inducing constraints exist between concurrent activities, we specify them within the < ow> activity in a WS-BPEL document.
Analogous to the speci cation of synchronization constraints, we utilize the <links> construct to list the di erent coordination constraints.
Within this construct, we utilize a new namespace-quali ed element <cc ns:ccLink> to declare each unique coordination constraint.
Each constraint is de ned as a rule using the syntax of the semantic Web rule language (SWRL).
The decision of how to react to external events becomes di cult in the presence of inviolable constraints between activities.
The MDP-CoM approach [3] associates a service manager with each activity and formalizes each man-
It ensures coordination between the concurrent activities involved in a constraint using a simple coordination enforcement mechanism (CoM) such as a  nite state machine.
Given the structural similarity between the decision models for di erent scenarios [3], it is possible to deduce a general-purpose decision making model for adapting to multiple events.
In the model, occurrence of each external event (say E1) with a probability (P e1) leads to a state signifying that the event occurred (Se1).
Some states signify that multiple events have occurred.
Coupling the generalized adaptation model with the CoM model of MDP-CoM enables the process to adapt to external events while respecting any coordination constraint, thereby making the process  exible.
Observe that event handlers in WS-BPEL provide a simple way to adapt by performing prede ned actions if certain events occur.
We use WS-BPEL s extensibility in the form of a new namespace-quali ed element, <cc ns:alt activity>, to specify a choice of actions that could be performed on receiving an event.
Our approach is to allow the designer to reference the generalized adaptation model and the CoM.
We also require that the designer indicate which of the concurrent activities and its operations are part of some coordination constraint.
This is analogous to specifying if an activity is source or target of a synchronization constraint.
< eventHandlers > <onEvent partnerLink= AirlineWSLnk  operation= Reserve  messageType= ticketUnavail > <scope> <invoke name= invoke  partner= AirlineWS  portType= tpns:ReservationPT  operation= ChangeDate  inputVariable= ticketDate > <cc ns:ccLinkInst name= date  /> <cc ns:adaptModel ref= uri:genericMdl1 /> <cc ns:comModel ref= uri:CoM1 /> </invoke> <cc ns: alt activity> <invoke name= invoke  partner= AirlineWS  portType= tpns:ReservationPT  operation= ChangeAirport  inputVariable= ticketAirport > <cc ns:ccLinkInst name= airport  /> <cc ns:adaptModel ref= uri:genericMdl1 /> <cc ns:comModel ref= uri:CoM1 /> </invoke> </cc ns:alt activity> </scope> </onEvent> </eventHandlers> corresponding state, Se1.
Other parameters of the decision model such as the cost of performing an adaptive operation, are often speci ed in the agreements between the process and the partner Web services using WS-Agreement [1].
We outline the steps to transform the extended WS-BPEL process into a fully standards-compatible adaptive process:
 referenced by the BPEL process.
Speci cally, we utilize the information about the events and the corresponding action choices (Fig. 1) to establish the structure of the decision model.
We utilize the costs of performing the di erent operations and probabilities of events obtained from the service agreements to parameterize the models.
2.
We combine each decision model speci c to an activity with the CoM and formalize the combined model as a Markov decision process (MDP), as shown in [3].
We may then utilize standard solution techniques to solve the MDP.
3.
Solution of the MDP is a policy which maps each combined state (state of the decision model and the CoM) to an action that is optimal at that state.
This action is one of the adaptive action choices available to perform.
We transform the policy into WS-BPEL code for constructing the  nal WS-BPEL process.
4.
We generate the adaptive WS-BPEL process using a custom serializing library based on the open source ActiveBPEL library.
We utilize the policies to guide the adaptive behavior of each concurrent activity in the process.
Coordination is ensured by signaling an internal exception using the <throw> <catch> statements whenever a coordination inducing operation is performed.
We compare the rewards gathered when executing a traditional non-adaptive WS-BPEL process (denoted as orig-inalBPEL) that responds with a single action to external events, with our transformed adaptive WS-BPEL process (denoted as adaptiveBPEL).
We varied the probability that the ticket is available after an external event occurs.
When the probability of availability is low, adaptiveBPEL chooses to change the date in a coordinated manner.
In comparison, the originalBPEL continues to wait incurring a high cost.
d r a w e
 e g a r e v








 adaptivedBPEL originalBPEL




 Probability of availability Figure 1: Specifying alternative actions to perform in response to an event and the constraints on these actions.
As the generalized adaptation model is a template, we need to instantiate it for the process.
In doing so, we do not assume any knowledge about the operation of the adaptation model and CoM from the process designer.
Fortunately, this information could easily be provided in the <eventHandlers> section of the WS-BPEL process as partially shown in Fig. 1.
Here, each <onEvent> element speci es an event, say E1, and the activities within the nested <scope> are the appropriate adaptive action(s) that could be performed from the Figure 2: Performances of the traditional and adaptive WS-BPEL processes for the trip planner problem.
