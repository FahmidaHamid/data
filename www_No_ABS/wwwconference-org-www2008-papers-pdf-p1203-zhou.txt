In the real world, web service selection is heavily affected by the environment.
E.g., one service provider may announce that their web service is only compatible with some specified vendor s web services, so it excludes some other candidates; another service provider may claim that if you buy Service A from them, you will get Service B cheaper, so one service QoS values are dependent on other services.
We call this situation as a context sensitive QoS based service composition.
In the conventional context free QoS model, QoS value of the web services is constant during composition process.
By contrast, in the context sensitive QoS model, a QoS value of a service is determined by this service together with other services related to this service.
There are three main contributions in the paper.
The first is to introduce a context sensitive QoS model and a context function g() to calculate the impact of context on each QoS value of a service.
The second is to propose a rule model to represent context based on real world business perspective.
The third is to apply the rule model in validation of service selections and changes of QoS values, which are not considered in the context free QoS model.
Copyright is held by the author/owner(s).
)) k w f k q  =
 It s defined as the goal of P.
There are two layers in a web service composition model: abstract service (AS) layer describes the business process, and concrete service (CS) layer decides the concrete web services to use [1].
In traditional model, a business process P can be represented as a set of ASs: P={AS1, AS2, , ASn}.
Each ASi can have m CSs as its candidates: ASi=CSi1|CSi2|   |CSim, 0<i n.
Therefore, for each business process P, we have a set of service selections:  ={ 1,  2, ,  w}.
So Service selection is a set of concrete services that can achieve follows  j={CS1,k1,CS2,k2, ,CSn,kn} |  j    , 0<j w.
For each CSij, its quality metric Qij is a vector, Qij=<cij, lij, aij, rij>.
And then an is introduced to represent user objective function requirements.
In traditional model, no matter which CS has been chosen previously, Qij= <cij, lij, aij, rij> is constant, and all the candidates are available for ASi.
In our context sensitive QoS model, not all the service selections are valid and Qij= <cij, lij, aij, rij> is no more constant.
Let   be a set of service selections and R a set of constraints (from both service providers and users), then we can define a valid service selection as an element of a set   whose elements satisfy the   .
In order to cope with following condition: context sensitive situations, we introduce a context function g().
The function g() has two parameters, denoted below: g(qi,  k ) where qi=ci|li|ai|ri (0<i n) is one of the QoS values for
 is the currently selected valid service selection.
The return value of function g() indicate the impact of context on the QoS value of CSij.
Below is an explanation for different return values: g(qi,  k )>0, the context positively influences qi; g(qi,  k )<0, the context negatively influences qi; g(qi,  k )=0, the context has no influence on qi or there is no relevant context defined.
We take the equation for the total cost C in the sequence pattern as an example.
The equation for the cost is rewritten as C= , 0<k w  (1).
This paper focus on business rules that adjust and restrict selecting suitable CS for AS, so we classify business rules into 3 types: The qualitative constraints which describe the validation of the selected candidates of CSs; The quantitative rules which describe the ways in which the CS QoS values change; and the user satisfaction enhancement rules which describe the extra }               + 
 c < < k w g c   ( ,   k <   i = { | and )) k ', 0 | k
 , i i | i i n i = ' ' , 0 n k
 In general, each business rule can be represented as below: H, LHS RHS, where H normally contains the attributes of the rule; LHS normally contains the rule fire conditions; RHS normally describes the actions to fire.
Based on our requirements, we have extended H and LHS to contain more information about a rule.
The extended H is denoted as a 4-tuple: H=< n, p, Vg, Vc>, where n is the name of the rule; p is a priority value of the rule; Vg={vg1, vg2,  , vgn}: is a set of global variables; Vc={vc1, vc2,  , vcn}: is a set of user defined variables.
The extended LHS can be denoted as a 2-tuple: LHS=< t, C>, where t is a time period to specify when the rule is active; C={c1, c2,  , cn} is a set of conditions.
The above three rule types can be formally defined as below: Definition 3.
A qualitative constraint is a rule that triggers a validation action to validate the validity of a service selection according to the constraints provided in LHS, denoted as H, LHS validate( k)=true/false, where validate() is the validation action;  k  is a service selection; true is a possible return value of validate() action to indicate valid selection; false is a possible return value of validate() action to indicate invalid selection.
Definition 3.1 Validation phase: Assume we have a set of qualitative constraint R={r1,r2, ,r } and a set of service selections  ={ 1,  2, ,  w}, then after the validation phase all the service following condition    k   rj selections [ k ,rj R|rj validate(si,  k)=true], 0<k w, 0<j , 0<i n.
Definition 4.
A quantitative rule is a rule that triggers a series of actions to update the QoS values of the services in a valid service selection, denoted as H, LHS Update, where Update = {update( k)1, update( k)2,  , update( k)m}, m>0: is a set of update actions to update the QoS values of the services in a service selection according to the conditions in LHS;  k    is a valid service selection.
Definition 4.1 QoS value update phase: Once a quantitative rule is fired, its update actions generate a set of value X={x1, x2,  , xn} for each relevant QoS value of all the services in a service selection to indicate the impact of the context.
The xi can be considered as a return value of the function g().
Therefore, the Eq.
(1) can be rewritten as satisfy the .
= x ) n + 
 c = i i i Definition 5.
A user satisfaction enhancement rule triggers a series of actions that add user satisfaction enhancement but do not directly update the QoS values of a selected service or validate a service selection, denoted as H, So LHS Action where Action={ action( k)1, action( k)2,  , action( k)m}, m>0, which are a set of actions that add user satisfaction enhancement onto certain following condition: service Action Action Update ; selections.
  satisfies valicate It =       .
'     the ( )     k k Definition 5.1 Satisfaction enhancement adding phase: By firing the user satisfaction enhancement rules, the relevant service selections will be added user satisfaction enhancement provided by the service providers.
At the current stage of our work, the enhancement is represented to the user as messages.
We emulated a web service composition environment by creating about 2000 web services, and generated 1000 test cases to evaluate the advantages of the context sensitive QoS model.
The evaluation is performed through two steps: QoS improvement evaluation: In this step, we evaluate whether the context sensitive QoS model can improve the overall QoS of a composite service.
From the result we can see 58.4% positive effect, 39.8% no effect and 1.8% negative effect.
Improved No Change Reduced

 Fig.1.
shows the QoS improvement evaluation result.
Execute-ability evaluation: In this step, we evaluate how many composite services generated under the two QoS models can be actually executed.
From Fig.2 we can see that when the number of AS in a composite service getting bigger, more and more invalid composite services are generated from the context free QoS model.
Fig.2.
shows the execute-ability evaluation result.
In this paper, we proposed a context sensitive QoS model in contrast with the conventional context free QoS model.
The model constraints in order to compute correct QoS value of a composite service.
A context function g() is proposed to calculate the impact of context on each QoS value of a service.
we also proposed a rule model which categorize and construct rules not only from the service composition perspective, but also from the business perspective so that it can correctly represent both user and service provider s requirements and constraints.
We believe by combining the satisfactory model with the context sensitive QoS model, service composition can be performed more efficiently and effectively so that it can be applied widely in the real world business.
