The interface of a Web service is de ned as the set of messages it can send and receive and the inter-dependencies between them.
It is a contract the service and its partners must respect.
When an existing service has to interact with another one, their interfaces are more likely to be incompatible [?].
When this happens, they are two options: (i) force one of the services to support a new (compatible) interface.
This solution is usually unsatisfactory because services then  This work is funded by the project Web Intelligence granted by the French Rh one-Alpes Region.
Most of it was done when Yehia Taher was visiting the BPM Group at QUT, Brisbane.
Copyright is held by the author/owner(s).
have to expose as many interfaces as interactions they are involved in.
(ii) supply an adapter responsible for receiving, adapting, and transmitting messages from one service to the other despite incompatibilities of their interfaces [?
].
Implementing ad-hoc adapters is a costly and tedious task.
Moreover, most of the time an adapter is speci c to a pair of services and cannot be reused [?
].
The study presented in this paper aims at designing a framework for specifying and generating Web service adapters.
Our contribution is twofold: (i) The proposed framework supplies operators corresponding to di erent situations of adaptation, and these operators may be composed to deal with more complex incompatibilities of interfaces.
The resulting reusable mapping is then compiled and deployed into a CEP engine.
(ii) We de ned a methodology for using CEP technology in a Service Oriented Architecture.
Illustration As a motivating example we consider a service Ssel intended to o er products for sale, and a service Scons which is meant to place orders against Ssel.
While Scons was designed in such a way an order of n items is realised by sending n messages, Ssel expects an order to be sent at once.
To deal with the resulting incompatibility the behaviour of the required adapter is as follow.
Messages sent by Scons are received and stored, and messages related to the same order are grouped together.
When a condition is satis ed, meaning that an order is completed, an aggregation operation is applied on all related messages.
This process results in forwarding to Scons a message that contains the order as expected by Ssel s interface.
Since multiple conversation could coexist between Scons and Ssel, there is a need to correlate message belonging to the same conversation.
Figure ??
depicts such an adaptation process.
An Event Driven Architecture (EDA) is a software architecture paradigm promoting the production, detection, consumption of, and reaction to events.
Event consumers subscribe to an intermediary event handler, and event producers publish to this handler.
When an event is received, the event handler forwards it to the consumer.
While EDA deals with patterns of simple and ordinary events, Complex Event pro-
could be addressed by composing these operators.
Designers of adapters have to identify which adaptations need to be performed between two services, and then wrap the corresponding composition of operators into a map.
A graphical user interface meant to ease this task is supplied.
Subsequently, maps are exported to the CCQ code generation tool, which integrates a compiler component used to produce a CEP execution-time module.
Eventually, maps are loaded into the CEP execution engine.
We model each operator by a speci c automaton therefore easing veri cation of operator composition correctness.
This latter is then compiled and deployed as a CEP module.
The run-time environment consists of a CEP infrastructure including a CEP execution engine and a set of SOAP Integration layers, which allow a CEP engine to be integrated in a Service Oriented Architecture.
The CEP engine is embedded as the most important component in the system architecture.
It provides the core service of receiving, correlating, analyzing and processing messages against loaded CCQ.
Upon a situation detection, events such as message manipulation and production, are generated in response.
While Web services communicate through the use of SOAP messages, the intermediate adapter should be able to consume, analyze, and forward SOAP messages.
To deal with this issue, we have designed a SOAP Integration Layers model meant to wrap the CEP infrastructure.
Such a model consists of input and output wrappers.
A SOAP input wrapper is used to consume SOAP messages issues from an output action at the sender service interface.
After receiving a message, the input wrapper is meant to transform it to a representation appropriate to the CEP engine, and then publish it into the engine.
Similarly, an output wrapper gets produced event from the engine, transform it in a SOAP message and then forward it to the corresponding input action at the  nal receiver service.
In this paper, we have integrated CEP technology with Service Oriented Architecture.
In particular, we have described how to use an event driven system to adapt message interactions between Web services with incompatible interfaces.
An ongoing study, still relying on the CEP technology, aims at addressing more complex adaptation challenges in service oriented architecture, such as dealing with incompatibilities between Web service interaction protocols.
