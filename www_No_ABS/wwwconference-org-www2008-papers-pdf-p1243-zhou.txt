Sponsored search auction is an e ective way of monetizing search query activites for the search engine provider, while shifting the burden to the advertiser to  gure out how to automate and optimize the keyword bidding process.
In this work we focus on the bid optimization question under the budget constraint.
Keyword Bidding Models.
For simplicity, assume that the default advertiser has a budget B over a  xed time horizon, discretized into time periods 1, .
.
.
, T .
He is interested in a single keyword with expected value-per-click V .
There are bidders {1,   , N} at time t for this keyword and their bids are sorted in decreasing order b1(t) > .
.
.
> bN (t).
There are S ad slots, and are assigned to the top-S bids as follows: bidder s gets slot s; for each user click on his ad, bidder s is charged a price bs+1, if s < S or a minimum fee bmin (usually 10(cid:0)).
Each slot s has a click-through-rate   Work was done while the author was an intern at HP Labs.
Copyright is held by the author/owner(s).
(CTR), denoted  (s), which is de ned as the total number of clicks on an ad divided by the total number of impressions (displays).
Therefore the default advertiser can obtain slot s by bidding slightly over bs(t); for each user click, he incurs a cost of bs(t), obtains an expected revenue V and pro t V   bs(t).
Online Knapsack Problems.
Let us start with the relatively simple single-slot case.
At time t, b(t) is the maximum bid among bidders 1 to N , and X(t) is the number of clicks at period t. Winning at time t costs the advertiser w(t) and earns him a pro t of v(t) where w(t)   b(t)X(t) , v(t)   (V   b(t))X(t) .
(1) For revenue maximization, v(t) = V X(t) .
Since the default bidder has to decide either overbidding b(t) or not at time t, thus keyword bidding corresponds to the online knapsack problem (Online-KP).
The case of multiple slots is captured by the online version of the multiple-choice knapsack problem (Online-MCKP), where each time the advertiser can win at most one ad slot.
Our Assumptions.
In general, no online algorithm can achieve any nontrivial competitive ratio (the ratio between the output of the given algorithm and the o ine optimum) for Online-KP [4].
Fortunately, in our setting, we make two reasonable assumptions on the knapsack items, which allow us to develop interesting online algorithms.
These two assumptions are: (i)w(t) (cid:4) B; (ii)L   v(t) w(t)
  t.
(2)

 Keyword Bidding.
Sponsored search auctions have attracted a lot of attention, for both auctioneer revenue maximization and advertiser bidding optimization.
Among all these work, Mehta etc al. [5] studied the auctioneer revenue maximization with budget-constrained bidders, using a trade-o  function   (compare it to our threshold function) to grant queries to bidders, and the technique they use is probably most similar to the threshold function we use.
Online Algorithms.
Awerbuch et al. [2] studied the online call routing which generalizes the online classical knapsack problem.
More recently, Buchbinder et al. [3] designed online algorithms for fractional versions of general packing problems which imply an O(ln(U/L))-competitive algorithm for the online knapsack problem.
In this section we design competitive algorithms for the Online-KP with assumptions (2)(i),(ii).
We describe two (ln(U/L) + 1)-competitive algorithms for the problem.
Randomized Algorithm: Let D be the continuous distribution from 0 to U , with the following density function: x , for L   x   U , and f (x) = c/L for 0   x   L, f (x) = c where c =
 simply picks a threshhold   from the distribution D; at each time, it picks item t i  its e ciency is at least   and its budget allows.
Deterministic Algorithm: Our deterministic algorithm for Online-KP works against all adversaries..
Algorithm Online-KP-Threshold Let  (z)   (U e/L)z(L/e).
At time t, let z(t) be the fraction of capacity  lled, pick    (z(t)).
element t i  v(t) w(t) Theorem 3.1.
Both Online-KP-Randomized and Online-KP-Threshold have a competitive ratio of ln(U/L) + 1.
A matching lower bound: Theorem 3.2.
The competitive ratio of any (possibly randomized) online algorithm for the online knapsack problem is at least ln(U/L) + 1.
we can translate the algorithms Online-KP-Threshold to bidding strategies for single-slot keyword auctions for both pro t and revenue maximization, based on Eq.
(1).
Details are omitted due to space constraints.
The Online-MCKP.
The Online-MCKP is a generalization of the Online-KP.
At each time period, at most one item can be selected from the item-set Nt = {(vs(t), ws(t))}.
The goal again is to maximize the total value of items selected.
The Algorithm Online-MCKP-Threshold is a generalization of Alg Online-KP-Threshold, and it works as follows: Let  (z) and z(t) be the same as before.
At time t, let Et   .
If Et (cid:9)=  , pick element s   Et with maximum vs(t).
s   Nt | vs(t)    (z(t)) (cid:2) (cid:3) ws(t) Theorem 4.1.
Online-MCKP-Threshold has a competitive ratio of (ln(U/L) + 2).
Multiple-Slot Bidding.
Next we translate Alg.
Online-MCKP-Threshold to bidding strategies for both pro t and revenue maximization.
It turns out the revenue maximization strategy is the same as the single-slot case, thus omitted.
The pro t-maximization bidding strategy is below: Bidding Strategy Profit-Maximizing Multiple-Slot Fix  > 0.
Let  (z)   (U e/)z(/e).
At time t, let z(t) be fraction of budget spent, (cid:4) (cid:5) , Et   s | bs(t)  

 bid bs(t) where s = arg maxs Et (V   bs(t)) (s).
In this section, we evaluate our bidding algorithms using both synthetic and real-world data, and discuss two useful heuristics: sniping and parameter tuning.
The Sniping Heuristic.
Simulation of the bidding algorithm described above with synthetic dataset shows that the bidding algorithm is too conservative, and leaves a sig-ni cant fraction of budget unspent.
Thus a potential performance improvement is sniping towards the end of the auction.
If the bidder has knowledge (reliable estimates) about the click tra c (X(t)) and the click-through rates, then the bidding strategies can be modi ed to increase its bid appropriately.
Theoretically, we can prove that sniping strictly improve the performance of the algorithm.
For details, see the technical report [6].
Parameter Tunning.
If the lower bound L in the online knapsack problem is too small, we can replace it with a larger value L(cid:3) > L for the threshold function  .
This essentially discards items with very low e ciency, and the loss is minimal if the optimal solution consists of items with relatively high e ciency .
It turns out tuning the parameter L makes a signi cant performance improvement.
Evaluation using Real Bidding Data.
Next we report some experimental results on evaluating bidding algorithms for multiple-slot auctions using real bidding data.
We scraped bidding data from the now defunct Overture webpage [1] with continous crawling for about two weeks, for one of the most dynamic and expensive keyword  auto insurance.  There are totally T = 1842 distinct time periods in our collected data, and most top-5 bids are larger than $10.
For the experiments, we use B = 1000, and three di erent values V = 8, 10, 12.
We evaluated both the pro t-maximizing and revenue-maximizing strategies with and without sniping.
For all these experiments, we use U = V /bmin   1 for pro t maximization and U = V /bmin for revenue maximization, and bmin = 0.9.
Since results are very similar for di erent parameter values, we summarize them in Table 5.
For all the examples we run, sniping improves the bidding performance signi -cantly while exhausting the budget.
Table 5 seems to tell us, for almost all values, with parameter tuning of L, the performance ratio (ALG/OPT) is around 70%-75% without sniping, and 90%-95% with sniping.
