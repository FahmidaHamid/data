Online advertising is one of the most pro table business models for Internet services to date, accounting for annual revenues approaching $17 billion dollars according to the Internet Advertising Bureau [21].
According to the same report, 22% of this revenue comes from banner advertising, or graphic-based advertisements which appear embedded in content pages on a host website.
Current models of banner advertising require advertisers to negotiate rates directly with the sales representatives of the host on a monthly basis.
These negotiations involve several parameters.
First, the advertiser speci es a subset of content pages which are relevant to his or her ad.
Next, the advertiser requests a desired number of impressions, or advertising opportunities, on pages from among his or her speci ed subset, and a per-impression price.
Finally, if the negotiation is successful and the contract is accepted, the advertisement is shown on some subset of the speci ed content pages.
By accepting a contract the supplier is committed to the supply.
If the supply is not met, the bidder is compensated in two ways: he is not charged for the parts that are not met, and moreover, he gets them for free in the next time period.
This process requires a lot of overhead for advertisers who must negotiate with sales representatives, and a lot of guesswork for sales representatives who must decide based on intuition which advertising contracts to accept.
As a result, small advertisers tend to be locked out of the system, unable to bear the cost of the smallest-sized contracts, and the system overall su ers additional ine ciencies from the sub-optimal decisions of the sales representatives.
In this paper,
 which each month considers the supply of page views and a set of bids, each specifying a desired set of pages, a desired number of impressions, and a per-impression value, and then selects a subset of bids which maximizes the value while sustaining penalties for under-allocated impressions.
Whereas in practice, the penalties are realized in the form of free impressions, in our system we represent these penalties with a monetary payment from the host to the advertiser equal to a speci ed multiple of the per-impression value for each under-allocated impression.
The penalty factor re ects an estimate of how much next month s impressions are going to be worth.
There are several factors which make this system harder to design than general combinatorial allocation mechanisms.
The most signi cant di erence comes from the fact that the host must  guarantee  supply by paying a penalty for under-allocated impressions.
Such guarantees are quite characteristic of the banner advertising market, and are important in branding campaigns where it is essential for the advertiser to receive at least some minimum number of impressions   the McDonald s arches or the Nike swoosh are recognizable precisely because they are ubiquitous.
However, these guarantees also make the underlying optimization problem hard to approximate: for example, if the penalty is very large, then each winner must receive all of his requested impressions and so we can reduce our problem from the well-known set packing problem [15].
In fact, as we show, even for small penalties, our problem is not approximable within any constant factor.
We therefore focus on designing heuristics with varying sorts of provable guarantees.
A common approach to combat inapproximability is to develop bi-criteria approximations, or algorithms that do almost as well as the optimum solution on a slightly harder problem.
For example, in  balanced graph partitioning, the goal is to cut the minimum number of edges to divide a graph on n vertices into two parts, each with at most  n vertices.
The seminal paper of Leighton and Rao [18] provides a bi-criteria approximation algorithm for (2/3)-balanced graph partitioning which cuts at most a factor of O(log n) more edges than the optimum solution on the harder problem of bisection, or (1/2)-balanced graph partitioning.
This was improved to O( log n) by Arora et al. [3].
The bi-criteria framework has also been applied to min sum clustering [5] and sel sh routing [22].
In our case, we apply the bi-criteria framework by designing an algorithm that does approximately as well as the optimum algorithm with larger penalties.
Our algorithm is extremely simple and trivial to implement: it selects at each iteration a new winner and a corresponding set of impressions with maximum marginal per-impression pro t.
We show that this algorithm gets at least 23% of the optimum pro t on a problem with 2.26 times the penalty (i.e., whereas our algorithm just pays an advertiser his per-impression bid for each under-allocated impression, the optimum must pay 2.26 times the per-impression bid).
Despite the bi-criteria guarantee, we note that this greedy algorithm may perform poorly when the optimum solution has large value.
These are exactly the instances in which we would like to perform well.
Hence, we present a re ned greedy algorithm which involves solving a  ow computation and prove guarantees on its performance in the structural approximation [10] framework, a newly developed framework for evaluating the approximation factor of heuristic algorithms.
This framework allows one to evaluate the approximation factor of an algorithm based on the structure of the optimal (or any) solution, and not only the value of the optimal solution.
In particular, it provides a performance guarantee that improves as the performance of the optimum solution improves, and unlike the bi-criteria framework, it provides these guarantees with respect to the optimum on the same problem instance.
Our re ned greedy algorithm iteratively selects advertisers with maximum marginal per-impression pro t, as before, but additionally considers reallocating impressions to already selected advertisers at each step.
In evaluating this algorithm, we consider the fraction of demand that the optimum satis es for each advertiser.
We show as this fraction increases, hence increasing the optimum value, our algorithm s value also increases.
For example, if the optimum always satis es 75% of the demand of each advertiser, then our algorithm gets at least 10% of the optimum, wherease if the optimum satsi es 99% of the demand of each advertiser, then our algorithm gets at least 30% of the value of the optimum.
See Section 5.1 for the exact trade-o  curve.
We note that the re ned greedy algorithm outperforms the simple greedy algorithm on many classes of instances.
However, this improved performance comes at the expense of increased di culty in the implementation (and an additional linear factor in the running time).
It is important to note that we ignore incentives throughout this work, i.e., we analyze the value of our allocation mechanism in an idealized world where advertisers truthfully report their types and not in an economic equilibrium.
While incentive issues are very important in practice, they tend to have less e ect in highly competitive settings.
In successful banner advertising systems, where lots of advertisers compete for limited supply, we intuitively expect incentives to play a minimal role.
We leave it as further work to study incentives in our proposed systems and/or calculate payments to make our proposed systems truthful.
The problem of maximizing welfare is a central problem in algorithmic mechanism design.
This problem, even for special cases such as single-minded bidders, is known to be hard even to approximate [23, 17, 16, 7, 8].
However, under some conditions such as submodularity or subadditivity of valuations, constant-factor approximation algorithms have been developed [8, 9].
For several problems with packing constraints linear programming-based and greedy constant-factor approximation algorithms have been proposed [1, 13].
In the context of Internet advertising, sponsored search auctions have been studied extensively.
The closest works to ours in this literature are the 1  1 e competitive algorithms that have been designed for maximizing revenue for online allocation of advertisement space [20, 6, 19].
Our work is distinguished from previous work in the literature by the existence of supply guarantees, implemented through penalties.
These penalties re ect the non-linearity of bidder valuations, a characteristic of advertisers in banner advertising markets.
This paper is organized as follows.
We give a formal definition of the model in Section 2.
In this section, we also
 the guaranteed banner advertisement problem, if the set of served advertisers is  xed, the optimal allocation can be found in polynomial time.
This indicates that the challenging part of the problem is to  nd the set of advertisers that should be served to maximize the value.
In Section 3, we prove that the problem does not admit a constant-factor approximation algorithm even for weak supply guarantee conditions.
Next, in Section 4, we give a bi-criteria approximation algorithm for the problem.
In Section 5, we give an adaptive greedy algorithm and analyze it in the structural approximation framework.
The banner advertisement problem can be modeled as follows.
We are given a set A of m advertisers {1, .
.
.
, m} and a set U of advertising opportunities that can be allocated to them.
Each advertising opportunity is an impression of an advertisement on a webpage.
For the rest of the paper, we refer to each advertising opportunity as an item.
Without loss of generality, we assume all items of U are distinct.
The bid of an advertiser i is a tuple (Ii, di, bi) where Ii   U spec-i es the subset of items in which advertiser i is interested 1, di speci es the number of items the advertiser requires, and bi speci es the per-unit price the advertiser is willing to pay (up to his required number of units).
Allocating more than di items to advertiser i has no marginal bene t.
Following the convention of current banner advertising systems, we require our system to guarantee the supply of an advertiser.
That is, by accepting the bid of advertiser i, we enter a contract for the sale of di items from the set Ii.
Should we fail to ful ll this contract, we are required to pay a penalty.
This penalty can be a  xed price paid for every under-allocated impressions; or more commonly, can be  lled by delivering the same number of impressions for free during the following period.
Both of these penalty schemes can be formalized in the following way: If the advertiser requested di units and was allocated only xi units for some xi < di, then the system collects only bixi    bi(di   xi) = ((  + 1)xi    di)bi (1) in value, where   is a  xed constant.
The special case of   = 1 can be interpreted as delivering the same number of impression for free the following month.
Henceforth, we will be primarily concerned with the case   = 1, unless otherwise stated, although all results can be appropriately generalized to other values of  .
Now we can formalize the banner advertisement problem in the following way: Given a set of advertisers A and their bids, {(Ii, di, bi)},  nd a subset of advertisers, or winners, for which accepting their bids maximizes the value.
This problem is captured by the following mathematical program.
Let yi be the indicator variable that advertiser i is a winner; zij be the indicator variable that item j is allocated to advertiser i; and xi be the total number of items allocated to advertiser i.
with speci c content such as  nance, sports, etc.
Advertising can be even more targeted by using demographic information of the current viewer of the webpage such as gender, geographic location, or age.
maximize Xi A yi(2xi   di)bi (2) subject to zij  j   U : Xi A zij   1  i   A : xi = Xj Ii  i   A : xi   di  i   A,  j   U : zij   {0, 1}  i   A : yi   {0, 1} As we show in the next section, it is NP-hard to even approximate the solution of this optimization program within any constant ratio.
The main di culty comes from the multiplicative terms yixi in the objective function of the program above.
However, we show that once the set of winning advertisers is determined (i.e., once we  x the {yi} variables), the resulting program can be solved combinatorially using a maximum weighted matching algorithm.
Lemma 2.1.
Given the set T of winning advertisers, the problem of  nding the optimum allocation of items to advertisers in T can be optimally solved in polynomial time.
Proof.
We can rewrite the above mathematical program by setting yi = 1 for i   T and yi = 0 otherwise, and by setting xi = Pj Ii zij.
The negative term in the resulting objective function is now a constant, and so the problem reduces to the following program: maximize Xi T Xj Ii 2zij bi subject to zij   1  j   U : Xi T  i   T : Xj Ii  i   T,  j   U : zij   {0, 1} zij   di (3) This integer program is equivalent to a maximum weighted b-matching problem, or f factor problem, in which, given a weighted graph G, the goal is to  nd a maximum-weight subgraph of G in which the degree of each node i is at most f (i).
The mapping is as follows: consider a bipartite graph G(V, E) with node set V (G) = U   T , edge set E(G) = {(i, j)|i   T, j   Ii}, and edge weights w(i, j) = 2bi.
The solution to the integer program is then the maximum weighted f matching in which f (i) = di for i   T and f (j) = 1 for j   U.
We can therefore use the combina-torial or LP-based algorithms for f matching (see, e.g., [25, 24, 4]) to solve our problem.
The above discussion shows that the challenging part of the banner advertising problem is to decide the set T of winning advertisers.
In this section, we show that the banner advertising problem is NP-hard to approximate within any constant ratio.
In other words, for any constant 0 < c   1, it is not possible
 value (de ned as the value of the mathematical program (2)) in polynomial time unless P = N P .
This result is immediate for arbitrarily large penalties via a reduction from the inapproximable maximum set-packing problem [15], i.e., the problem of  nding the maximum number of disjoint sets in a given set family.
For arbitrary penalties, we provide a reduction from the k uniform regular set cover problem.
In this problem, we are given a family of sets over a universe of elements.
Each set in the family has exactly k elements, and each element in the universe is covered by exactly k sets.
The goal is to select the minimum number of sets which cover all the elements.
It is shown in Feige et al. [14], Theorem 12, that: Proposition 3.1.
[11, 14] For every choice of constants s0 > 0 and   > 0, there exists k dependent on   and instances of k uniform regular set cover with n elements on which it is NP-hard to distinguish between the case in which all elements can be covered by t = n k disjoint sets, and the case in which every s   s0t sets cover at most a fraction of 1   (1   1 t )s +   of the elements.
By introducing an advertiser with bid (Ii,|Ii|, 1) for each set Ii in the set cover instance, there is a trivial reduction from the problem above which shows that it is NP-hard to compute the optimum value of the banner advertising problem.
In the case in which all elements can be covered by t = n k disjoint sets, the optimum value would be n, but, the case in which every s   s0t sets cover at most a fraction t )s +   of the elements, the optimum value would of 1  (1  1 be less than n.
In order to prove hardness of approximation, we  nd an upper bound on the value of the optimum solution in the second case, which leads to the theorem below.
Theorem 3.2.
The banner advertising problem is NP-hard to approximate within any constant ratio 0 < c   1.
The theorem is proved by showing that if one can approximate the solution within a constant ratio, then it is possible to distinguish between the instances of the set cover problem described above.
The complete proof is given in appendix A.
Although the proof in the appendix is presented assuming the penalty   is equal to one, the result holds for any constant linear penalty.
In lieu of the above hardness result, we present a greedy heuristic which at each step assigns items to an advertiser that maximizes the pro t-per-item.
The description of the algorithm is given in Figure 1.
Note that it is important to choose an advertiser that maximizes pro t-per-item.
The example below shows that a naive greedy algorithm which chooses the advertiser with maximum overall pro t performs quite poorly even in  easy  instances.
Example Suppose there are n + 1 advertisers and n items.
Advertiser i, 1   i   n, is interested only in item i and bids 1 for it.
Advertiser n + 1 bids 1 +   for receiving all the n items.
While the optimal solution yields a value of n by allocation items 1 to n to advertisers 1 to n, the naive greedy algorithm obtains a value of just 1 +  .
The value that algorithm greedy obtains from the instance in the previous example is equal to the optimum value.
Approximation We analyze algorithm greedy by developing bi-criteria approximations for our problem.
To do so, we compare the value of our solution to the value of the optimal solution with a greater penalty.
We say an algorithm is an ( ,  )approximation if it always outputs a solution with value at least   times that of the optimal solution with (larger) penalties  .
More formally, an algorithm is an ( ,  )approximation for the problem of selling banner ads if it can always obtains a   fraction of the value of the linear program below   this is the same as LP 2 but with a di erent objective.
maximize Xi A yi((  + 1)xi    bidi)bi (4) subject to zij  j   U : Xi A zij   1  i   A : xi = Xj Ii  i   A : xi   di  i   A,  j   U : zij   {0, 1}  i   A : yi   {0, 1} In other words, while our algorithm pays a penalty of 1 for under-allocation, the optimal solution is charged a penalty of   for some   > 1.
For algorithm greedy we can prove the following theorem: Theorem 4.1.
For     ln 2 ratio of greedy algorithm is 1 ln 2 ln 2 1 ln 2 , the approximation ratio is 1 ln 2   2.26, the approximation
 2x   1   ln 2x (  + 3)x       1   ln 2x (5) where x   [   1/ ) ln 2x = 2.  +1 , 1] is the root of the equation 1/x + (1 + Proof.
For any   > 1, let opt  be an optimal solution for the penalty  .
We provide lower bounds on the approximation ratio of greedy and opt .
Let A be the set of all advertisers who contribute a positive pro t to opt .
For i   A, let Si be the set opt  allocated to advertiser i.
To simplify notation, we use si to denote |Si| .
Without loss of di generality, we may assume    +1 < si   1.
In the analysis of greedy algorithm, we will partition each item into two subitems: the P subitem that takes up a p fraction of the item, and the Q subitem that takes up a (1   p) fraction of the item; we will determine the value of p later.
We will develop lower bounds on the pro t of greedy by a case analysis.
In each case, we will compare the pro t opt  gets to one of two kinds of pro t that greedy gets: only to the part computed over P subitems, or only to the part computed over Q subitems.
Summing over all
 Initialize the set of allocated items Q to be the empty set While there exists an unassigned advertiser:
 (a) Let J 0 i = Ii \ Q be the set of remaining items that we can allocate to i and Ji   J 0 i be an arbitrary subset of size min(di,|J 0 i|).
(b) Let pi = (2   di/|Ji|)bi be the pro t-per-item obtained by allocating Ji to i.
otherwise terminate the algorithm.
Figure 1: greedy algorithm advertisers, the P part and Q part of each item, and hence the whole item, is counted at most once.
For i   A, there are two cases:
 from Si.
In this case we consider the pro t greedy obtains from P subitems assigned to i.
j When j elements of Si are remaining, greedy could allocate these elements to i with pro t-per-item 2j di bi.
This pro t is positive for ddi/2e < j   |Si|.
Therefore, in this case, greedy must have allocated a nonempty set to advertiser i since otherwise greedy could get positive per-item pro t by adding i to the solution and allocating the unallocated items of Si to i. Furthermore, as greedy has items of Si available when assigning items to i, it follows that the demand di of advertiser i is fully satis ed.
Hence greedy gets complete pro t for P subitems, giving a pro t of pdibi.
In this case we consider the pro t greedy gets from Q subitems of Si.
Note, greedy must have obtained a pro t of at least 2j di bi from the (|Si|   j + 1) th item allocated from Si as this is the per-item pro t greedy obtains by allocating the remainder of Si to i. Summing over j, bdi/2c + 1   j   |Si|, greedy must have allocated these items with total pro t at least: j most once since the assignment in case 1 is a subset of the solution for greedy and hence disjoint.
Similarly, the Q part is also counted at most once since the Si considered in case 2 is a subset of the optimum solution and hence disjoint.
Therefore, we have shown that greedy gets a pro t of at least: Xi A min{p, (1   p)(2si   1   ln 2si)}dibi.
(7) The pro t of opt  from Si is ((  + 1)si    )dibi.
Therefore, the ratio of the pro t of greedy to opt  is at least min{p, (1   p) }, where   is de ned as   = min i { 2si   1   ln 2si (  + 1)si     } (8) Choosing p =   1+  gives the approximation ratio   1+  .
We  nd a lower bound on   using the  rst and second order conditions.
The details of calculations are given in appendix B.
For     ln 2 1 ln 2 ,   takes its minimum for si = 1.
Plugging in (8), we get   = 2 1 ln 2 ( +1)si  = 1   ln 2 and p = 1 ln 2 2 ln 2 For 1 <   < ln 2
 a point x in [    +1 , 1] for which si = x gives the minimum value of  .
This point is the root of the equation below which is derived by taking the derivatives of (8): |Si| Xj=bdi/2c+1 2j   di j x di/2 bidx 2x   di bi  Z |Si| =Z |Si| = (2|Si|   di   di(ln |Si|   ln = (2si   1   ln 2si)dibi (2   )bidx di x di/2 (6) di
 ))bi Taking into account that this pro t comes only from the Q part of items, this gives a pro t of (1   p)(2si   1   ln 2si)dibi.
For each advertiser i, exactly one of the above cases happens.
Furthermore, for each item, the P part is counted at  /x   2  + (  + 1) ln 2x = 0.
Plugging this value for   into bound on the approximation ratio for 1 <   < ln 2   1+  , we get (5) as a lower 1 ln 2 .
1 ln 2 .
We give an example which shows the analysis is tight for     ln 2 In this example, the optimal solution allocates all of the items to the advertisers without paying any penalty.
However, the greedy algorithm obtains just a 1 ln 2 2 ln 2 fraction of the optimal solution.
Example Assume for an even number k, there are m =
 represented by an m   k matrix C. Each advertiser has a demand of k items.
Advertiser i, 1   i   k, is only interested in items in row i, i.e. {cij|1   j   k}, and bids 1 for each of these items.
Advertiser i, k+1   i   3k/2, bids 2  i+1 (k/2) k









 Figure 2: The bi-criteria approximation ratio of greedy for 1 <   < ln 2 1 ln 2 for each item in row i.
He also bids 2   item in column i   k/2.
By induction, one can show that at step j, for 1   j   k/2, greedy may allocate the top k items in column k  j + 1, to advertiser 3k/2 j +1.
Therefore, the total pro t of greedy is: i+1 (k/2) for each k k 3k/2 Xi=k+1
 k i + 1   (k/2) = 2k k/2 Xi=1

 1 + (2i + 1)/k We can make k arbitrary large.
Hence, pro t of greedy can be approximated by k2(1   ln 2), with arbitrary high accuracy: k 3k/2 Xi=k+1
 k i + 1   (k/2)   k2(1  Z 1 = k2(1   ln 2) x=0
 1 + x dx) The optimal solution gives advertiser i, 1   i   m, all the items in row i.
Hence, it gets a pro t k2 from the  rst k advertiser and a pro t k2(1  ln 2) from the rest.
Therefore, the approximation ratio of greedy is bounded by 1 ln 2 2 ln 2 .
As suggested by Example 4.1,  xing the items allocated to each advertiser may hurt the performance of the algorithm.
In this section, we give an adaptive greedy algorithm called adaptive greedy.
Similar to the previous greedy algorithm, this algorithm iteratively selects new winners.
However, in each iteration, it  xes only the number of items assigned to the new winner and not the precise set of items.
This  exibility allows adaptive greedy to  nd the optimum solution in Example 4.1 and, as we will show, allows us to prove better approximation guarantees in general.
We use the following notation throughout this section.
For a winning advertiser i, let ci be the number of items allocated to i.
Note as mentioned above that ci remains  xed although the set of allocated items may change throughout the course of the algorithm.
Let Gt be the set of advertisers chosen by the algorithm up to but not including time t. For j /  Gt, let fjt be the maximum number of items that we could allocate to advertiser j, subject to the constraint that each advertiser i   Gt gets exactly ci items.
More formally, fjt is the solution of the following integer program.
xjk (9) maximize Xk Ij subject to Xk Ij xik = ci xjk   dj  i   Gt : Xk Ii  k   U : Xi A  i   A,  k   U : xik   {0, 1} xik   1 fjt Also, let rjt = 2fjt  dj  bj be the maximum per-item pro t that we could obtain from advertiser j, subject to the constraints.
At step t, algorithm adaptive greedy chooses the advertiser with maximum rjt, j /  Gt.
The algorithm is given in Figure 5.
To compute fjt, one can solve the linear relaxation of the above program and round the solution to an integer solution (without decreasing the objective function).
For a complete description of the algorithm, we refer the reader to [4].
2
 Approximation As we observed in Section 3, the hardness result implies that we do not hope to analyze the adaptive greedy algorithm by the traditional multiplicative approximation framework.
However, in order to distinguish the quality of di er-ent algorithms in practice, we can use other approximation measures such as the bi-criteria approximation.
In this section, we analyze the adaptive greedy algorithm using a newly de ned framework for evaluating heuristics called structural approximation [10].
The main feature of this framework is that it is designed to evaluate the approximation ratio of an algorithm based on the structure of an optimal (or any) solution, and not only the value of an optimal solution.
In this framework, given a solution with some value, we de ne the recoverable value of the solution based on its structure.
The goal is to show that the value of our algorithm is at least as much as the the recoverable value of any solution.
3 We would like to design a recoverable value function that is very close to the real value.
Note that in the traditional multiplicative approximation framework, the recoverable value is restricted to a multiplicative ratio of the value of the solution.
By allowing more general functions for the recoverable value, the structural approximation framework is more  exible, and therefore can distinguish among di erent algorithms with the same worst-case multiplicative approximation guarantees.
Additionally, this framework provides a way for comparing the quality of our solution to that of the optimal solution of the same problem (with the same parameters).
This is in contrast to the bi-criteria approximation framework in which we compare the value of our solution to the value of a problem with di erent parameters.
We refer the reader to [10] for a more detailed discussion of the structural approximation framework.
problem with lower bound and upper bound on the capacities.
tions may di er.
In fact, our guarantees hold with respect to the largest recoverable value of any solution.
Initialize G, the set of chosen advertisers, to be the empty set.
Let t, the number of steps, be zero.
While there exists an unassigned advertiser: 1. t   t + 1
 (a) Let fjt be the maximum number of elements that can be allocated to advertiser j, (b) Let rjt be the maximum pro t-per-item that could be obtained by choosing advertiser j, subject to the constraints that each advertiser i   G gets exactly ci items.
subject to the constraints, i.e. rjt = (2   dj/fjt)bj.
(a) Add advertiser j to G.
(b) Let cj = fjt.
Otherwise terminate the algorithm.
Figure 3: adaptive greedy algorithm We now analyze adaptive greedy algorithm using the structural approximation framework.
Let W be the set of advertisers that are allocated a nonempty set in the optimal solution, i.e., the winners.
For each advertiser i   W, let Si be the set of items allocated to i in an optimal solution.
For i 6  W, Si is taken to be the empty set.
Let si = |Si| .
Then the value of the optimal solution is: Pi W (2si   1)dibi.
We de ne di Xi W (2si   1   ln 2si)dibi as the recoverable value of this solution.
Note that any optimal solution makes pro t only from the advertisers with si > 1
 at least equal to this recoverable value.
This gives a performance guarantee based on the the structure of the optimal solution.
In particular, the performance of the algorithm is better if si s are closer to 1.
This statement is formalized in the following theorem.
Theorem 5.1.
Let Si be the set of items assigned to ad.
adap-vertiser i by an optimal solution.
Also, let si = |Si| di tive greedy algorithm obtains a value of at least: Xi W,si> 1
 (2si   1   ln 2si)dibi.
Corollary 5.1.
Consider a collection {(qi,  i)} corresponding to an optimal solution, where qi is the fraction of the value of the solution comes from the advertisers for which an  i fraction of the demand is satis ed.
Then, the approximation ratio of adaptive greedy is at least: Pi qi(2 i   1   ln 2 i) Pi qi(2 i   1) In particular, when in the optimal solution, at least an s fraction of the demand of all winning advertisers is satis ed, adaptive greedy obtains at least a fraction (2s  1  ln 2s) of the value of the optimal solution.
Figure 4 depicts this lower bound on the value for 1 2   s   1.
Figure 4: The approximation ratio of adaptive greedy when at least a s fraction of the demand of all winner advertisers is satis ed in the optimum solution.
Proof.
To prove Theorem 5.1, without loss of generality, we assume the algorithm chooses advertisers 1, 2, .
.
.
, T in order.
We inductively construct a sequence of assignments of items to advertisers which we call canonical assignments.
Let C0 be the empty set.
The t-th element of the sequence of assignments, denoted by Ct, is an assignment of items to advertisers 1, .
.
.
, t which satis es the following properties.
  Each advertiser i, 1   i   t, is assigned exactly ci items.
  All items that are assigned in Ct 1 are also assigned in Ct, i.e. are assigned to advertisers 1, .
.
.
, t.
  For each advertiser i, 1   i   t, all the items in Si (namely, the items allocated to i by the optimal solution, if i   W) are assigned.
(This property trivially holds for i 6  W.) In the following lemma, we show that such a sequence of assignments exists.
canonical assignments which satis es the properties above.
Proof.
We prove the lemma by induction on t. For t = 1, the only nontrivial property is the third one, if 1   W. In this case we observe that c1   |S1|, and hence a canonical assignment exists.
Therefore, the base of induction holds.
Now consider t > 1.
Assume a sequence of canonical assignments C1, .
.
.
,Ct 1, and let Ct be an optimal solution for LP (9).
We change Ct to a canonical assignment satisfying the above three properties.
For 1   i < t, let Bi be the set of item that are assigned to advertiser i in Ct 1.
Also, let Bt the set of items in St that are not assigned to any advertiser in Ct 1.
Note that |Bt|   ct, because if we assign each item in Bi, 1   i   t, to advertiser i, it gives us a feasible solution of LP (9).
We repeat the following procedure as long as there exists an item x such that x   Bi, for an advertiser 1   i   t, and x is not assigned to any advertisers in Ct.
Since advertiser i has received ci items in Ct, and |Bi|   ci, there exists an item y /  Bi that is assigned to i in Ct. We update Ct by assigning x to i and removing y from the set of items allocated to i.
Note that each time we perform the procedure, the number of items that is allocated to each advertiser remains the same.
However, the number of items that are allocated to the same advertisers in Ct and the assignment de ned by Bi s increases by 1.
Since the number of items that are allocated to the same advertiser in Ct and the assignment de ned by Bi s is at most P1 i t ci, after some number of steps, we reach a point where no such update is possible.
Therefore, the  nal assignment after these set of updates satis es all the three properties.
Now we are ready to prove Theorem 5.1.
Note that the value obtained from each assignment only depends on the number of items allocated to each advertiser.
Therefore, without loss of generality, we might assume that adaptive greedy allocates to each advertiser the same set of items assigned to this advertiser in canonical assignment CT .
For i   W, let kit be the number of items of Si that are not assigned in Ct 1.
Since we can construct a feasible solution with value kit for LP (9) using Ct 1, we observe that fit   kit.
Therefore, the value-per-item that adaptive greedy would obtain at this point if it chooses advertiser i and assigns to it all not previously assigned items of Si at least (2  di )bi.
Thus, the value adaptive greedy obtains by the end of the algorithm is at least: kit m |Si| Xi=1 Xj=kiT (2   di j )bi For i   W, if advertiser i is chosen by adaptive greedy then kiT = 0, and if advertiser i is not chosen by adaptive greedy then necessarily kiT   di
 m |Si| Xi=1 Xj=kiT (2   di j )bi   m Xi=1 |Si| Xj=bdi/2c+1 (2   di j )bi By the same calculation as in Theorem 4.1, equation (6), the value obtained by adaptive greedy is at least: Xi W,si> 1
 (2si   1   ln 2si)dibi








 Adaptive Greedy Greedy




 Figure 5: Comparison of the lower bounds on the competitive ratio of the two greedy algorithms when at least s fraction of the demand of all winners is satis ed by an optimal solution.
Note that while we stated all our results with respect to the recoverable value of an optimal solution, our proofs in fact follow when considering the recoverable value of any solution.
We analyzed adaptive greedy algorithm using the structural approximation framework.
We also analyzed the greedy algorithm using the bi-criteria approximation framework.
In order the compare these two greedy algorithms, we now analyze the greedy algorithm in the structural approximation framework.
Let W be the set of the winners in an optimum solution (or any feasible solution).
Assume that this solution satis es a si fraction of the demand of advertiser i   W. Note that si   1
 for any p, 0   p   1, greedy obtains a value of at least: Xi W,si> 1
 min{p, (1   p)(2si   1   ln 2si)}dibi (10) Given si s, one can compute the value of p which maximizes the sum and gives a recoverable value for each solution.
However, by Theorem 5.1, the value of adaptive greedy algorithm from the same instance is at least: Xi W,si> 1
 (2si   1   ln 2si)dibi This immediately shows that adaptive greedy gives us a better guarantee on the value of the solution.
When in an optimum solution, fraction s of the demand of all advertisers is satis ed, we can easily compare the guarantees on the value given in Theorems 4.1 and 5.1.
In this case, the optimum value for p in (10) is equal to 2s 1 ln 2s 2s ln 2s , which leads to the same guarantee on the approximation ratio of greedy algorithm.
The guarantee on the approximation ratio of adaptive greedy algorithm is 2s   1   ln 2s.
Figure 5 depicts these guarantees on the approximation ratio for 1 2   s   1.
 forms greedy is to observe that adaptive greedy algorithm obtains the optimum value of the instance described in Example 4.1.
As a result, the ratio between the values of the solutions obtained by these two algorithms is 2   ln 2.
In this paper we showed that having supply guarantees makes the problem of maximizing the value of selling banner advertisements inapproximable.
In the lieu of this hardness result, we proposed two greedy heuristics for the banner advertising problem and analyzed them rigorously in the bi-criteria and structural approximation frameworks.
Given the simple and  exible nature of these algorithms, we expect that these algorithms can help in automating the negotiation process for banner advertising.
In order to make our algorithms even more applicable to practical settings, we would like to consider the online or stochastic settings, in which advertisers arrive over time and submit bids which must be immediately accepted or rejected, without knowledge of exact future demand.
Also along these lines, it would also be useful to relax the assumption that the supply of items is known a priori.
In practice, hosts have good estimates of the number of page views.
However, these estimates may have large variance, and we should ideally provide algorithms which are robust with respect to errors in the supply estimates.
Finally, to completely automate the banner advertising process and replace it with a repeated auction mechanism, it is necessary to design a pricing mechanism to accompany our allocation mechanism and analyze the resulting incentives.
