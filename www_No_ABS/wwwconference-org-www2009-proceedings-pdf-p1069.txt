A typical  ight meta-search engine forwards the route query that it receives to other websites in its domain.
The retrieved results are aggregated and presented to the user.
We implemented a system that mimicks the so called creative ticketing practice of travel agencies by searching for the more complex itineraries that involve changing airlines during the journey.
Many special air fare o ers are only available through the airline s websites; but each request to an airline website is a costly procedure.
We thus implemented a system that uses a  ight connection graph and a query planner to limit the number of requests by checking only the most promising paths.
Our system has been built on top of Metamorph, a meta-search framework aiming to   f orderungsgesellschaft FFG under project grant 812991.
Copyright is held by the author/owner(s).
This research is supported in part by the Austrian Forschungs-generate maintainable vertical deep web search engines [1].
We use Metamorph s ontology and rule based form interaction modelling to map and  ll out the web search forms.
In related research, the WISE project [2] aims to integrate access to web databases.
The MetaQuerier [3] uses the regularities of web forms and automatically matches interfaces.
Metamorph focusses on modelling form interactions, and our meta-search system retrieves its initial route knowledge from web forms themselves and concentrates on creative ticketing heuristics via hub identi cation.
Web forms are the gateway to the hidden or deep Web.
It is quite clear that any automated search system has to model the meaning of these forms in order to be able to pose queries.
There is a wealth of literature about mapping forms, and a number of the suggested solutions makes use of the information on the forms themselves such as labels.
Many modern web forms though employ Javascript and AJAX to provide instant feedback about the validity of data, or even suggest possible data.
A technique called dynamic dependent drop-down lists populates a drop-down list according to what a user selected in another drop-down list.
In the  ight search domain, this is often used when a destination airport list is automatically updated when a user selects an origin airport.
In the process of building a model for a web search form, Metamorph uses its ontologies to identify and tag known concepts in that form.
We can use data extraction from forms to extract relations between such concepts; in  ight search, the most important relation is the one between origin and destination airport.
Form data extraction works like this: The connector, which has access to a full-featured web browser component, issues a click event on the origin airport list and sequentially selects each of the options on that list.
After that, it adds an event hook to monitor the destination airport list for possible changes.
The changes could be done by running client-side Javascript code or by reloading from the server.
If changes happen, the destination airport list is analysed for airport or IATA names and stored in the local database together with the origin airport selection it depends on.
This method works on large number of airline websites, and is good enough to bootstrap the system with initial knowledge about  ight connections.
Currently, we are generalizing our form extraction approach by automatically detecting dependencies between form controls and integrating the results directly into the Meta-morph form ontology.
if fares are already available in the database.
Second, direct origin-destination routes for the most promising (according to historic fare data) airlines are generated.
Third, routes to promising transit points are generated.
This is essential for the creative ticketing approach that we have explained above, because this kind of routes will not show up in normal  ight searches.
Since the  ight connection graph that is available to us is incomplete, we have to guess a limited number of itineraries that could be cheap.
We do this by looking for routes through what we call promising hubs.
We use a set of heuristics to rank airports to become promising hubs: A high number of airlines that serve an airport increases promising hub likelihood, as well as its appearance as a transit point in result pages of airlines.
By using a geo location service, we can omit hubs from the search that are obviously too far away.
Additionally, we can also include nearby airports by assuming default ground transfer times per kilometre.
The system was implemented using our own Metamorph framework for form mapping and ontological representation together with all related ontology tools (esp.
the ontology editor and Jena), Lixto Visual Developer, and Post-greSQL/PostGIS.
We attached 15 airline websites to the system and developed a Lixto wrapper for each of the result documents.
From all airline websites, 8 contained dynamic drop down-lists that we could use for the extraction of data.
Upon bootstrapping, the  ight connection graph contained 1612 connections, and was expanded to 2442 connections after 100 randomly generated requests.
Interesting creative ticket itineraries showed up after about 20 queries.
Unlike available  ight search systems, our approach supports dynamic packaging of connecting  ights from di erent airlines, including the consideration of hub points that are usually neglected.
We are well aware that our system is not complete.
Neither the change of fares over time, nor for di erent times of a day are considered by the route  nder.
Also, the logic for allowing su cient transit time at airports is immature.
On the other hand, the main motivation in our research is to prove the validity of our approaches in form interaction modelling, form mapping, and form data extraction, and not to come up with a commercial search system.
We believe we have shown that the development of a lightweight meta-search system with the tools at hand is feasible, that interesting information can extracted from web forms themselves, and that an intelligent query planning in a domain such as  ight search can provide good results by issuing just a limited number of requests.
