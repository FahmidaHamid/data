While publishing online data is now easier than ever, attempts to establish semantic relationships between di erent published data sources has been less successful.
So, from the users  perspective, online sources resemble islands of data (or data silos), where each island maintains only part of the data necessary to satisfy a user s information needs.
Penetrating these silos to both understand their contents and understand potential semantic connections is a daunting task.
What web users need is automated support for creating referential links between data that reside in di erent sources and that are semantically related.
Of course,  nding such links requires the use of both approximate matching (to overcome syntactic representational di erences and errors) and semantic matching (to  nd speci c semantic relationships).
Furthermore, both types of matching must be tightly integrated to accommodate for the tremendous heterogeneity found in web repositories.
 Work done while at IBM T.J. Watson Research Center Copyright is held by the author/owner(s).
In the context of the Linking Open Data (LOD) community project at W3C, a number of tools and frameworks have been developed that allow the generation and publication of linked data from relational databases.
Examples of such frameworks include D2RQ [2] and OpenLink s Virtuoso [1].
Although these frameworks signi cantly simplify the process of publishing linked data, and are a main reason behind the recent growth of the linked data sources, they do not provide tools for discovering links between the data sources.
The number of links between existing LOD data sources is still three orders of magnitude less than the number of base data triples (as of January 2009).
For typical users, this means they must experiment with a myriad of di erent link discovery methods to  nd one that suits their needs.
In this paper, we seek to develop a generic and extensible framework for integrating link discovery methods.
Our goal is to facilitate experimentation and help users  nd and tune the link discovery methods that will work best for their domain and application.
Our framework permits the discovery of links between autonomous relational sources.
As our motivating example, consider the sample relations and data shown in Figure 1, including a database of clinical trials (the CT relation), a source of electronic medical records (EMR) for patients (relation PV ) and a web source extracted from DBpedia (or Wikipedia) which stores information about drugs and diseases (the DBPD and DBPG relations).
Starting from these relations, we now describe brie y the types of links data publishers would like to discover between them.
Patient visit  VID770  with diagnosis  Thalassaemia  in the PV relation should be linked to the trial  NCT00579111  with condition  Hematologic Diseases  since  Thalassaemia  is a di erent representation of  Thalassemia  and according to a medical thesaurus (such as NCI)  Thalassemia  is a type of  Hematologic Diseases .
The prescr iption column of both patient visits in the PV relation should link to trial  NCT00336362  based on the fact that  Hydroxycarbamide ,  Hydroxyura  and  Hydrox-yurea  all refer to the same drug.
Other interesting correlations include linking  Westchester Med.
Ctr  from visit  VID777  to  Columbia University  based on additional geographical information that both locations are in the same state (New York), and  nding other related trials based on a speci c criteria, e.g., based on the similarity of the title and authors of the trials  corresponding publications.
The online trials data source can link the condition  Hemato-

cond Beta-Thalassemia Hematologic Diseases inter Hydroxyurea Campath loc Columbia University Texas Children s Hospital city New York Austin pub

 visitid

 diag Thalassaemia
 prescr Hydroxyura Hydroxycarbamide Westchester Med.
Ctr location Texas Hospital (b) Patient visit (PV ) (a) Clinical trials (CT ) Figure 1: Sample relations name Thalassemia Blood Disorders (c) DBpedia Disease (DBPD) name Alemtuzumab Hydroxyurea (d) DBpedia Drug (DBPG) linkspec_stmt:= CREATE LINKSPEC linkspec name ( col1, col2 ) AS link_method opt_args opt_limit; link_method:= native_link | link_clause_expr | UDF; native_link:= synonym | hyponym | stringMatch; link_clause_expr:= link_clause AND link_clause_expr | link_clause OR link_clause_expr | link_clause; link_clause:= LINK col3 WITH col4 USING link_terminal opt_limit; link_terminal:= native_link | UDF | linkspec name opt_limit:= LINKLIMIT number; Figure 2: The LinQL grammar logic Diseases  to DBpedia resource (or Wikipedia page) on  Blood Disorders , and link the intervention  Campath  to DBpedia resource  Alemtuzumab  using the semantic knowledge that  Campath  is the brand name for the chemical name  Alemtuzumab .
We introduce LinQL, an extension of SQL that integrates querying with link discovery methods.
A query written in LinQL identi es (a) the subset of the local data that must be linked; (b) a source containing external data that are to be linked with the local data from (a); and (c) the meth-ods(s) that must be used to  nd links between the local and external data.
Our framework includes a variety of native (or builtin) methods including synonym, hyponym, and a variety of string similarity functions.
Such native methods can be used as such or they can be customized by setting their parameters and combined to allow both semantic and syntactic matching.
This allows users to interleave declarative queries with interesting combinations of link discovery requests.
The native support for methods also permits customization where domain knowledge is available that can greatly enhance the performance.
The framework is also extensible to additional methods, written as  black-box  user-de ned functions (UDF).
Although the linkage speci cation elements of LinQL are expressible in a number of di erent languages and notations (e.g., RDF/XML, N3, NTriples), in our framework we choose for consistency an SQL-like syntax.
A link speci cation, or linkspec for short, de nes the conditions that two given values must satisfy before a link can be established between them.
In more detail, a linkspec is de ned using the grammar of Figure 2 (we omit here the full grammar and only present its main components).
As shown in the  gure, a CREATE LINKSPEC statement de nes a new linkspec and accepts as parameters the name of the de ned linkspec and the names of the relation columns whose values need to be linked.
A link speci cation can also be de ned in terms of link clause expressions.
Link clause expressions are boolean combinations of link clauses, where each link clause is semantically a boolean condition on two columns and is speci ed using either (a) a native method; (b) a user-de ned function (UDF); or (c) a previously de ned linkspec.
Note the mutual recursive nature of linkspecs and link clauses.
A linkspec can be de ned using link clauses while a link clause can be speci ed using previously de ned linkspecs.
The LIN-KLIMIT allows the users to limit the number of links and only consider k results, or the top-k where ordering is possible.
Irrespectively of the language used, a declarative speci- cation must be translated into some form of a program that  nds the links between the local and external data.
Often, such programs are implemented using programming languages like Java or C by third-party developers, and are automatically invoked with arguments de ned through the declarative speci cation.
As such, for the data publishers these programs act as black-boxes that sit outside the data publishing framework and whose modi cation requires the help of these developers.
We propose an approach to address these shortcomings by providing a native SQL implementation for the link discovery algorithms.
This approach has several advantages including the ability to (a) easily implement this framework on existing relational data sources with minimum e ort and without any need for externally written program code; (b) take advantage of the underlying DBMS optimizations in the query engine while evaluating the SQL implementations of the link  nding algorithms; and (c) use speci c e ciency and functionality enhancements to improve the e ciency of these algorithms.
In this paper, we outlined a declarative extensible framework for link discovery from relational data.
We have implemented the framework on a commercial database engine and validated the e ectiveness of our approach by  nding links between a real clinical trials data source and several other data sources1.
We believe that our framework can greatly enhance the process of publishing a high-quality data source with links to other data sources on the web.
Furthermore, our framework combined with an existing popular declarative approach for generating RDF data on the web such as [2], can lead to a quick and simple way of publishing an online linked data source with high-quality links.
