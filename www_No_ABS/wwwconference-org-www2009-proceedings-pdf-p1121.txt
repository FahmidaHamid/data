Web services are software systems designed to support machine to machine interoperation over the Web.
The Web Service Composition (WSC) problem in this paper is, given a set W of (behavioral descriptions of) web services and a reachability goal G, to automatically synthesize a coordinator web service c that controls W to satisfy G.
Despite abundant researches on the WSC problem, only a few [4, 3, 2] employ realistic models (i.e., with incomplete information) for WSC on behavioral descriptions.
Since this problem is known to be doubly-exponential in the number of variables in web service descriptions [2], studying e -cient approximation approaches is required.
Therefore, we present a novel approach to solve this computationally hard problem, using abstraction and re nement.
To the best of our knowledge, it is the  rst attempt to apply automatic abstraction technique to the WSC problem.
We describe a preliminary implementation, and demonstrate that our automatic abstract-re nement technique can solve e ciently 3 sets of realistic problems 8 instances.
Suppose that clients want to reserve both of a  ight ticket and a hotel room for a particular destination and a period, and there exist only an airline reservation (AR) web service and a hotel reservation (HR) web service separately.
Clearly, we want to combine these web services rather than implementing a new one.
One way to combine them is to construct a coordinator web service (Travel agency system) which communicates with each web service to book up both a  ight ticket and a hotel room.
Fig 1 presents this example.
Copyright is held by the author/owner(s).
Figure 1: Travel agency system A web service w is a 5-tuple (X , X I , X O, Init, T ) where:   X is a  nite set of variables that w controls.
A state s of w is a valuation for every variable in X .
We denote a set of all the states as S .
  X I is a  nite set of input variables which w reads from its environment; X   X I =  , and every variable x   X   X I has a  nite domain.
A state in for inputs is a valuation for every variable in X I .
  X O   X is a  nite set of output variables.
  Init(X ) is an initial predicate over X .
  T (X , X I , X (cid:48)) is a transition predicate over X  X I X (cid:48).
For a set X of variables, we denote the set of primed variables of X as X(cid:48) = {x(cid:48) | x   X}, which represents a set of variables encoding the successor states.
For a state s over X, let s[Y ] where Y   X denote the valuation over Y obtained by restricting s to Y .
Note that the process model for any web service described in WS-BPEL or OWLS can be easily transformed into our representation above.
In the WSC problem, given a set W of available web services, every web service in W communicates only with their coordinator but not with each other.
Based on this assumption, a set W = {w1,  , wn} of web services can be represented by a tuple (X , X I , X O, Init, T ) by a general cartesian product of each web service.
c , X O c , X O c , Init c, Tc) where X I = X O Since a coordinator is also a web service, it is a tuple c = (Xc, X I c , Init c, Tc).
Although Tc can de ne a non-deterministic transition relation, in this problem, we want only a deterministic transition relation for c. Given a set W = (X , X I , X O, Init, T ) of web services and a coordinator c = (Xc, X I c and X O = X I c , we can de ne an execution tree, denoted by W ||c, which represents the composition of W and c as follows:   Each node (s, sc) in W ||c is in S   Sc.
(s, sc) is the root node i  Init(s) = true and Init c(sc) = true.
  Each node (s, sc) has a set of child nodes, {(s(cid:48), sc (cid:48)) | (cid:48))=true, in c= T (s, in, s(cid:48))=true, in=sc[X I ], Tc(sc, in c, sc s(cid:48)[X O]}.
Intuitively, the web services W , by receiving the input in from the current state sc of the coordinator, collectively proceeds from s to the next state s(cid:48), Travel AgencySystemReserve/CancelAccept/RefuseOffer/NotAvailIn/Out datesLocationAccept/RefuseReserve/CancelOffer/NotAvailARHRReserve bothor CancelDatesFrom/To CitiesDatesFrom/To CitiesUserWWW 2009 MADRID!Poster Sessions: Thursday, April 23, 20091121and then the coordinator, by receiving the input in c from the new state s(cid:48) of W , proceeds from sc to sc (cid:48).
A goal G is a set of states to reach, and speci ed as a predicate.
Given a set W of web services, a coordinator c, and a goal G, we de ne W ||c |= G if every path (s0, sc 0)  (sn, sc n) in the execution tree W ||c reaches a goal state eventually (i.e., sn   G).
Formally, given a set W of web services and a goal G, the WSC problem in this paper is to construct a coordinator c such that W ||c |= G.
Theorem 1.
The WSC problem with no internal variable (i.e., X = X O) is EXP-hard, and the WSC problem for a general case is 2-EXP-hard [2].
Theorem 1 implies that more e orts to devise e cient approximation solutions to the WSC problem be needed.
In this paper, therefore, we propose an approximation-based algorithm.
Algorithm 1 presents a high-level description of our algorithm.
First, we abstract a given web service set W into W Abs , which has less variables than W but includes all the behaviors of W .
Given a set of web services W (X , X I , X O, Init, T ) and a set Y   X of variables, the abstraction of W with respect to Y is WY (XY , X I Y = X I , and X O

 Y , Init Y , TY ) where:
   For every sY   SY , Init Y (sY ) = true i   s   S. (Init(s) Y ) = true i   s, s(cid:48)     For every sY , s(cid:48) = true)   (sY = s[Y ]).
S. (T (s, in, s(cid:48)) = true)   (sY = s[Y ])   (s(cid:48) Y = s(cid:48)[Y ]).
Since the abstraction WY contains all the behaviors of W , Y   SY , TY (sY , in, s(cid:48) WY satis es the following property.
Theorem 2.
Given a set W of web services and a goal G, if a coordinator web service c satis es W Abs||c |= G where W Abs is an abstraction of W , then c satis es W ||c |= G.
In Algorithm 1, the procedure Abstraction constructs abstract web services WY for the given variable set Y .
Since our  rst abstraction is performed with Y = X I   X O (lines
 can exploit the procedure WSC NoInternalVars that is more e cient (i.e., EXP-hard).
WSC NoInternalVars (line 3) and WSC General (line 8) try to construct a coordinator c for a given web services WY wihtout/with internal variables, respectively.
If we  nd a coordinator c such that WY ||c |= G, then c also satis es W ||c |= G by Theorem 2.
Otherwise, we re ne WY by adding variables, and try to  nd c for the new abstraction (lines 5 9).
For selecting variables to be added, we construct a variable dependency graph that is a directed graph, in which each vertex is a variable and a directed edge from x to y exists i  the value of y depends on x (e.g., y := x).
We then cluster variables according to the number of hops to variables appearing in a given goal predicate G.
In every iteration of our algorithm, we add a set of variables that is closest to variables in G (i.e., 1-hop, 2-hop,   ).
We repeat the abstration/re nement step until we identify a coordinator c satisfying WY ||c |= G or the variable set used for abstraction equals to the original variable set.
The later case implies no solution for the given problem.
Although from the second loop, we should employ a general algorithm WSC General that is 2-EXP, once we identify a coordinator using small abstract web services, searching space is shrunken (double-)exponentially in the number of variables that we save.
In Algorithm 1, the procedures, WSC NoInternalVars and WSC General, can be Algorithm 1: Abs/Ref Web Service Composition Input : A set W of web services and a goal G.
Output: A coordinate web service c.
WY := Abstraction(W , Y ); if ((c := WSC NoInternalVars(WY , G)) (cid:54)= null) then while ((NewVars := SelectNewVariables(W , G)) (cid:54)= null) do return c; Y := Y   NewVars; WY := Abstraction(W , Y ); if ((c := WSC General(WY , G)) (cid:54)= null) then return c;









 return null; Table 1: Experiment result Problem T var I/O var Basic

























 >7200.0




 Abs/Ref







 S var







 implemented by using automated planning on complete information and incomplete information, respectively.
To demonstrate that our tool e ciently synthesizes coordinator web services, we compared a basic algorithm [4] (i.e., without abstarction/re nement) and our method with
 tem (TAS) explained in Section 2, Producer and shipper (P&S) [4], and Virtual online shop (VOS) [1].
All experiments were performed on a PC using a 2.4GHz Pentium processor, 2GB memory and a Linux OS.
Table 1 presents the number of total variables (T var) and input/output variables (I/O var) in boolean.
It also shows the total execution time in seconds for a basic algorithm (Basic) [4] and our method (Abs/Ref), and the number of boolean variables that we saved (S var).
Our experiment shows that our technique outperforms the basic algorithm in 6 instances (1 tie).
We have proposed an automatic technique for WSC problems based on abstraction and re nement.
Our preliminary experiment shows promising results.
As future work, we plan to investigate other abstraction methods and various re nement techniques in order to early converge the conclusion.
Finally, it is worth pointing out that our approach can readily be adopted for other WSC methods such as knowledge-level composition [3].
