Automated service composition issue has emerged as an important and challenging problem in Web service applications, which is concerned with combining existing web services when a client request cannot be satis ed by any individual service[5].
Most of automated service composition approaches require developers to provide a detailed speci cation of the desired behaviors of a composite service (e.g., goal service in [1] or conversation protocol in [4]) with formal models or a speci cation language (e.g, BPEL4WS).
To ensure the correctness of the design, developers of a composite service need to perform formal veri cation of the correctness constraints such as freeness of deadlock and unspeci ed reception, realizability[4] and temporal properties[4], etc.
The process of design, veri cation, analysis, error detection and correction makes the composition synthesis a di cult and time-consuming task.
Copyright is held by the author/owner(s).
In this paper we propose a novel approach to synthesize the composite service from a given set of services, where the designer only needs to set the correctness constraints on the desired behaviors of the targeted service and the synthesis will be automatically performed with the correctness guaranteed.
We implemented a prototype system and the preliminary experimental results on a practical travel agent example show that our synthesis approach is e ective and e cient.
We specify a service in the level of business protocol or abstract business process in BPEL4WS by using deterministic  nite automata (DFA), where states represent the di erent phases when it interacts with a user and transitions are triggered by its input/output messages.
A composite service M which coordinates available services by routing the output messages of one service to the input messages of another is also modeled as DFA.
We de ne the interaction M ||S between composite service M and services in set S their synchronization on input and output actions.
Besides the conventional correctness constraints such as freeness of deadlock and unspeci ed receptions, we consider temporal properties specifying behavior of services.
Speci -cally, we consider correctness constraints which can be represented as conjunction of two CTL formulas for safety properties and liveness properties, respectively, denoted by  saf e    live.
Due to the space limitations, readers are referred to [3] for details of CTL logic.
As we know, the safety properties and liveness properties are two kinds of important properties in system veri cation [6].
For example, the CTL formula AG P (meaning  along every computation all states satisfy P  ) is a safe property, while EF P (meaning  there is a computation along which some state satisfy P  ) is a liveness property.
Our composition synthesis problem is to generate a composite service M from a given set S of services and correctness constraints  saf e    live in CTL logic formula such that M ||S is free of deadlock and unspeci ed receptions, and M ||S |=  saf e    live.
We denote such composite service by M (S ,  saf e    live).
As shown in Figure 2, we propose an automated synthesis approach which is divided into three steps.
Firstly, we consider synthesizing a most general safe composite service Msaf e such that Msaf e||S |=  saf e and L(M  )   L(Msaf e) for every safe composite service M   ( i.e., M  ||S We know that Msaf e is a pre x-closed regular language because  saf e is a safety property.
We use learning approach, speci cally the L* algorithm in [7], to synthesize Msaf e. Figure 1 shows the overview of L* algorithm (Due to space limitations, we do not present the algorithm in detail).
L* algorithm is a designed for learning an unknown regular language U (in our setting, the L(Msaf e)), by constructing a minimal DFA C (in out setting, the Msaf e) such that L(C) = U .
In this algorithm, a Learner asks two kinds of questions: membership queries and equivalence queries, and infers the C based on answers of teachers.
Here the membership query asks whether a string   is in U and the equivalence query for a candidate DFA C asks whether C is equivalent with U .
An attractive characteristic of L* algorithm is that the number of queries is polynomial in the size of  nal DFA C. Therefore in our composition synthesis problem, L* algorithm is highly desired when the size of Msaf e is much smaller than the size of whole state space in composition.
?U(cid:86)(cid:143)
 Figure 1: Overview of L* Algorithm The second step is to deal with deadlocks in Msaf e||S .
We design an algorithm to determine whether a deadlock state can be removed.
The algorithm is based on an observation that if there exists a action sequence   of Msaf e composed of only input actions, then Msaf e||S will reach deadlock state if services in S send messages consistent with  .
Finally, when Msaf e||S satis es the liveness property  live we get the solution of our composition synthesis problem.
Following the whole synthesis process, the composition synthesis fails when there exists a deadlock state can not be removed or the liveness property veri cation fails.
Failed Sythesis no no Correctness constraints (cid:77) (cid:77)(cid:154)safe live Services set S (cid:311) Msafe Synthesis (cid:312) Deadlock Analysis yes (cid:313) Liveness properties verification employed to answer queries in L* algorithm.
The preliminary experiments focus on the e ciency of synthesis of most safe composite service because the runtime of algorithms for removing deadlocks and checking the liveness properties is neglectable compared with one of L* algorithm.
We use a practical Travel Agency example.
A travel agency TA o ers vacation packages to users by composing an existing  ight booking service FB and a hotel booking service HB.
An example of correctness constrain is that the user must book both  ight and hotel or book nothing when there is no available  ight or hotel, or the user doesn t like the offer.
Due to space limitations, we do not present the DFA models of services and the correct constraints in CTL logic formula.
The most general safe TA is generated by using L* algorithm with 1284 quries where the NuSMV tool was in-vocated 271 times, and the execution time of L* algorithm is about 86.39 seconds.
In the realistic travel agent example, our automated synthesis approach has shown to be feasible.
We have proposed a novel technique for automatically synthesizing a composite service from a given services set and correctness constraints on control  ow and data ow.
The technique is based on learning algorithm.
We also implemented a prototype system and the preliminary experimentation shows promising results.
In future work, we plan to improve our prototype system and perform more experiments to further evaluate our framework.
Moreover, we will analyze the cause of failure in synthesis and design the approach in assisting the developer to perform resynthesis based on the analysis results to improve the successful rate of synthesis.
This work is partially supported by grants from the China

 (2005CB321803), National Natural Science Funds for Distinguished Young Scholar (60525209) and Program for New Century Excellent Talents in University ( NCET-05-0186).
