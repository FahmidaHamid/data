Recently SOA introduced new paradigms in order to make software more flexible and close to business users.
However the flexibility of SOA applications is limited since the business logic is mixed with specific operations used to handle the various syntactical standards (BPEL, WSDL, XPath, XQuery, etc.)
necessary to implement orchestrations.
As a result, these technologies are often too far from original SOA principles.
Moreover, SOA does not bring flexibility at the end-user level: orchestration does not take into account end-users; and user interfaces are usually hardcoded.
To overcome orchestration limitations, various works introduced Semantic Web Services (SWS).
SWS define service semantically, by their goal and the concepts they manipulate, and not only syntactically.
That allows advanced processing such as dynamic orchestration (one service can be substituted by an equivalent one).
Different standards have been submitted or released for SWS (e.g.
SAWSDL [7], OWLS [5], WSMO [3]) and Semantic Orchestration (e.g.
BPEL4SWS[6] adding semantics to executable BPEL[8] orchestrations).
These approaches allow higher Copyright is held by the author/owner(s).
flexibility of applications but have few support in the industry (currently no orchestration engine supports SWS or Semantic Orchestration) and does not address the issue of end-user communication.
This communication with end-users is itself divided in two parts: the ability to introduce user actions in the orchestration, and the construction of the user interface.
BPEL4People [9], an extension of BPEL, was recently proposed to introduce human tasks in orchestration, but this approach is not linked to semantic definitions and industrial support is still missing.
The construction of user interfaces based on semantics was studied in Semantic Portals [2][4] approaches aiming at exploring knowledge-bases.
Although they provide dynamic way to explore data, their features are bounded to the fixed behavior hardcoded in the system.
From this assessment, we developed a portal able to address all the listed shortcomings and taking into account semantics in these two levels.
At the orchestration level it takes advantage of semantic definition to shorten the development of new features.
At the user interface layer, it not only generates all necessary dialogues according to system data needs for different devices, but also uses semantics in a context engine able to assist users in all their interactions.
The details of this portal are given hereafter.
layers: orchestration and user-interface


 We developed a Semantic Portal whose aim is to prove the added-value of semantics at two levels: Improvement of user dialogues and seamless integration of service orchestrations thanks to semantics.
The overall architecture of the portal is illustrated on Figure 1, where semantics take a central role.
The interest of semantics for users is twofold: automatic generation of customized dialogues and assistance to users.
First, the portal dynamically creates all interactions between users and scenarios according to semantic description of manipulated objects (defined in the domain ontology).
For instance, if the scenario needs to ask about a city, the question is formulated automatically: the user is asked about a city as a concrete concept (and not as a syntactic type such as String).
The dialogue generation module then asks this question with a regular form or using a map to visually select a city, according to the device capabilities.
As a result, definition of new scenarios, that is to say new features for the portal, does not need the development of specific pages and interfaces.
Moreover, ontology is used to enrich the user profile and provide assistance through contextualization.
A Context ontology defines the contextual elements to be taken into account for a scenario (e.g.
date, the use of the portal to users in context engine.
This module saves the answers of users along with the current context in a repository of contextual profiles.
This is done using a RDF repository, allowing to save all these information using reification principles.
From this contextual profile, the context engine automatically suggests answers to questions according to previous answers in similar contexts.
For this, we developed a semantic distance processing.
As a result the system can pre-answer most of questions; user can always accept or change the suggestions.
This allows performing some scenario with minimal interaction, what is particularly useful with the use of devices with small or limited keyboards.
The portal was tested on two use-cases.
The first one was a e-government use-case, demonstrating the added-value of our approach compared to web portals; whilst the second use case, dedicated to transportation user-information show the added-value of the contextual approach, allowing users to get the right information in only one click in current cases.
As illustration purpose, we detail here the scenario "Next Train" belonging to this second use-case.
This scenario provides to an user the schedule of the next trains at a given station.
It was defined as the orchestration of different operations such as "get stations", "get available train lines at a station", etc.
Context Ontology was also defined and linked to services providing context data ("get time", "get weather", "get location", etc.).
This scenario was then transformed into an executable orchestration.
Then, when a user launches this scenario, all the interactions are generated according to his/her terminal and to the current context.
As a result the user not only automatically get a targeted information (e.g.
the next train schedule at the station he/she is going at this time) but also interacts with the scenario using his/her device capabilities.
The development of this portal shows that ontology and semantic web services not only brings dynamicity at technical level but also at the functional level, enabling to easily propose new feature in a portal which generates the interface according to the scenarios.
Moreover, the same semantics benefits to user using meaningful concepts instead of syntactic type and contextualization to benefit from previous actions.
The these technologies, and future work will focus on the scalability of the portal.
implementation also shows feasibility of the

 We acknowledge the ITEA project SEMEASY for partly funding our research.
Furthermore, we want to thank all people who contributed to the implementation of the portal.
