Currently, advertising in the online world employs number of pricing models including cost-per-click (CPC) and cost-per-impression (CPM).
While CPM or banner advertising can be implemented with an auction, in some cases brand advertisers might prefer to enter into a long-term contract with the platform provider For example, a movie advertiser might wish to guarantee a minimum number of ad views to coincide with an upcoming theater release.
In order to insure that the advertising message resaches a wide range of unique users and to avoid banner burn out, the advertisers require that the maximum number of impression shown to a unique user in a  xed time period not exceed a  xed frequency cap.
In particular, we take the point of view of the advertising network that has made a number of CPM commitments with an advertiser.
Each commitment speci es a price that will be paid per impression1 and a daily frequency cap.
The advertising network can show the impressions on any of the sites in network.
The user s behavior on the network is assumed to follow a certain user model [4].
The user is assumed
  visits  (as in, website visits) interchangeably.
Copyright is held by the author/owner(s).
to transition from one section of the advertising network to another based on a random yet know probability transition matrix.
The traditional approach to frequency capping is to use cross-site cookies to track users through the web properties where the advertising network is serving ads.
The cookies are used to keep a count of the number of ads the user has seen.
When the user has reached the maximum daily caps, no further ads are shown.
However, there has been growing concern over the privacy issues associated with tracking the user across multiple sites.
Furthermore,up to 33 % of the users delete their cookies making cookie based approach unreliable [3].
We propose a novel algorithm that can be used to insure that the frequency caps are ful lled in expectation.
The approach is based on formulating a linear optimization program that maximizes the expected number of ads seen by the user subject to the frequency caps constraints.
The solution to the linear program gives a set of probabilistic weights used by the ad server to decide whether to serve the ad when a user arrives at a speci c web page.
Various authors have investigated the use of Markov chains to model user behavior on the web .
Despande and Karypis [4] evaluate the use of Markov models to predict user activity during web session.
As pointed out by [4] higher order Markov models tend to give higher predictive accuracy at the expense of increased model complexity.
In this paper, we will use a  rst order Markov models that have been found to give adequate performance without increasing the model complexity.
In the area of privacy Canny [2] gives an algorithm whereby a community of users can compute a public aggreagte of their data that does not expose individual users data.
The aggregate allows personalized recommendations to be computed by members of the community, or by outsiders.
We follow a similar direction where we use aggregate information about users pro le to help guide each users individual experience.
A number of studies have shown that the user browsing behavior can be modelled using a  rst order Markov model.
The user  rst arrives at the site and lands on any one of sections with a  xed probability vector [ts,1, ts,2 .
.
.
ps,n] = ps Depending on the initial landing page, the user can transition to any of other web sections, remain on the same ity of making a transition from page  i  to page  j  where j   [1, 2, .
.
.
n, t] where page  t  is the terminal page.
The transition matrix can be computed from panel data [3].
To illustrate the point.
we consider a small but representative transition matrix.
Table 1: LP Performance greedy lp num visit num visit E(ad)





 p(viol)) E(ad) p(viol))

















 The  rst state  0(cid:48)(cid:48) is the entry state and represents a new user arriving at the network.
State  5(cid:48)(cid:48) is the exit state and represnets the user leaving the network.
Note that the exit state is absorbing, once the user arrives at that state they can not transition to another state.
It is therefore instructive to rewrite the matrix P as  



 Following [1] , we have the fundamental matrix of the Markov Chain M = (I   Q) 1 and the expected number of views from the start state before reaching the absorbing state is given by t = M c (3) where c is a column vector of all ones.
A typical strategy used by ad servers is the the greedy strategy.
In the greedy strategy, a user is always shown the banner unless they had already exceeded the frequency cap in which case they are not shown any ad.
While the greedy strategy is intuitively simple, it has the major draw back that number of views is controlled by the the Markov chain governing the user behavior as described in Equation 3 (unless the advertising network is using cross-site cookies) In our model, at each section  i   of the network, the user can be shown the banner of interest with probability  qi .
Let Ni denote the total number of times a user who has just arrived at section  i  is shown the banner of interest before they leave the network.
Let the vector q = [q1, q2, .
.
.
qn] denote the banner display probability distribution.
Ni = qi + pi,jNj (4) j Equation 4 gives a recursive formula for computing the expected number of banners seen by a user who has just arrived at section  i  .
This number is equal to the probability of seeing a banner on section  i  , qi plus the expected number of banners at each of the subsequent pages.
The initial conditions are given by N0 = p1,sN1 + p2,sNs + .
.
.
pn,sNn.
The platform designer can adjust the serving weights q in order to maximize a utility function.
In a frequency capped setting, the utility is such that the expected number of impressions N0 should be as close as possible to frequency caps
 Ncap without actually exceeding that bound.
(1) maxq,N N0 (5) subject to


 Nn qi   = = =   Ncaps p1,sN1 + p2,sNs + .
.
.
pn,sNn

 j q1 + p1,jNj qn + pn,jNj
 j Equation 5 gives us linear program that can be solved to get the optimal value of the display probabilities.
(2)

 We simulated the policy allocation based on our algorithm.
In each case, we simulated 600,000 users visting a network that is showing banner ads.
The banner ads have a frequency cap of 3.
The transition matrix was motivated by the matrix in Equation 1.
However, we changed the entries such that the expected number of page visits as computed by equation 3 assumed di erent values.
We compared the expected number of ads seen by a user, a E(ad) and the probability of violating the frequency caps p(viol) using our proposed algorithm and greedy algorithm.
Table 1 shows that the LP based serving policy ensures that expected ad views meets the frequency caps and that probability of any user violating the caps is reduced.
We have presented a linear programming approach for selecting serving weights in an ad server We showed that the frequency caps are ful lled in expectation.
In future work, we will address the problem of jointly enforcing the expected number of ad views and the probability of any user violating the frequency caps.
We will also address the issue of maximizing the number of clicks subject to the frequency caps and advertising budget.
