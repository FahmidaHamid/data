The Web is abundant in data-intensive applications such as online stores, digital libraries, and data sharing services (e.g.
Craiglists, Googlebase), which store and maintain high volumes of data in the so called Web databases.
One of the challenges regarding the development of this type of application is building intuitive interfaces for allowing users to interact with their underlying structured databases.
The most prevalent solution in this direction is designing form-based interfaces which contain data input  elds, such as text boxes, radio buttons, pull-down lists, check boxes and other input mechanisms.
This situation is very common in popular auction sites such as eBay and amazon.com which extensively use form-based interfaces for allowing users to register o ers.
In fact, there may be distinct form-based interfaces with speci c  Contact author.
Copyright is held by the author/owner(s).
Figure 1: Overview of a pure form-based interface (a) and iForm (b).
 elds depending on the product being o ered.
For instance, in the experiments presented in this paper, we consider distinct interfaces corresponding to the categories  vehicles ,  mobile phones  from the Brazilian popular auction site To-daOferta.com.
Interestingly, as some of these sites (e.g., eBay and TodaOferta) also allow entering o ers using generic free text descriptions, users often avoid using form-based interfaces.
However, in many cases the lacking of structured information obtained through these interfaces may prevent the proper use of services based on searching, mining, recommendation and integration over o ers.
In this paper we propose an aproach that consists in deploying a system that receives a free text input (e.g., an o er or an ad), and recognizes implicit data values occurring in it that can be used to appropriately  ll out the  elds in a form based interface.
Unlike approaches for information extraction from free text [2, 1], our approach does not require a training phase over manually labeled texts, since it simply relies on values previously entered in form-based interfaces.
In this section, we present the iForm approach in contrast to form-based interfaces as illustrated in Figure 1.
Before using iForm for boosting a form-based interface, we consider that users have been using the interface as shown in Figure 1a, by typing values in  elds to interact with the database DB.
The values manually entered in this process allow us to build and maintain lexicons, which stores terms used for  lling each  eld.
Lexicons are the crux of iForm approach.
Users dealing with iForm, as illustrated in Figure 1b, provide a free text document or portions as input and iForm extract values for  lling the form by matching For simplicity, we refer to the user free text document or portions as input text from now on.
Users may want to verify the form  lled by our method to make corrections and then proceed with the request submission.
After that, iForm automatically updates the lexicon index for improving the extraction quality as users deal with iForm.
The iForm approach consists in extracting values from the input text using lexicons and  lling a target form-based interface using them.
In order to identify suitable  eld values in the input text we  rst break it into segments and then estimate the a nity of each segment to a  eld.
Intuitively, the a nity score would be 1 if the segment is found as a value in the  eld domain (i.e., the set of all possible values of the  eld) and 0, otherwise.
Since this solution is intractable in many cases, we try to estimate the a nity by estimating how frequent terms composing the segment are in the values of a  eld.
For this, we rely on a set of representative terms for each  eld, such that most values in the  eld domain presents at least one term from this set.
In practice, we consider that the lexicon index contains enough representative terms for identifying values.
Once we identify set Pk of potential values Sab for each  eld fk, we aim at  nding a mapping between values in Pk and  elds in the form-based interface with maximum aggregate a nity, such that (1) only a single segment is assigned to each  eld and (2) the segments select are non-overlapping, i.e., there are no segments Sab and Scd for a < c in the mapping such that b   c. The last step in our approach consists in using the  nal mapping to  ll out the  elds of the form-based interface.
We have conducted two sets of experiments.
In the  rst one, we used jobs postings for comparing iForm with CRF [2], a state-of-art data extraction method.In the second experiment we tested our method with real multi-typed web forms for submissions of Car ads/o ers and Mobile Phones o ers.
Comparison with CRF This experiment compares iForm and CRF [2] for the task of extracting segments from text inputs and  lling out a form.
We took from the RISE Jobs collection a subset of 100 job postings whose segments to be extracted were manually labeled.
These job postings form an adequate training set for CRF, since this method requires examples of values to be extracted to appear within the context they occur.
This same set was used to create the lexicons for iForm.
Next, we tested both approaches using a distinct set of 50 documents, whose extraction outcome was available from RISE, allowing us to automatically verify the results.
According to the results presented in the Table 1, iForm had signi cant superior F-measure levels in 7  elds.
The lower quality obtained by CRF is explained by the fact that segments to be extracted from typical free text inputs, such as jobs postings, may not appear in a regular context, which is an important requirement for CRF.
Experiments with a Real Form-Based Interface To evaluate the performance of our approach within typical scenarios, we test iForm with a form-based interfaces from a Brazilian popular auction site (http://www.todaoferta.
com).
We performed experiments with vehicle form, that Field State City Language Required Degree Platform Title Company Salary Average Submission-level


















 iForm CRF T-Test Wilcoxon




















 Table 1: Field-level f-measure for each  eld and submission-level f-measure for the comparative experiment.
contains 4 text boxes and 28 check boxes   a total of 32  elds, and mobile phones form that consists of 2 text boxes and 35 check boxes   a total of 37  elds.
To create the lexicons, we used real o ers submitted during October 2008 to each interface.
Tests were performed using other 50 o ers for each interface, distinct from the offers used to create the lexicons.
The results are presented in Table 2.
A detailed inspection on the o ers entered by users in this interface, revealed that, in many cases, users simply cut and past mobile phone speci cations from the manufacturer s web sites, leading to a high uniformity in the free text advertisements submitted to the text boxes.
Text Box Check Box Type of Field # Fields Precision Recall





 Average

 (a) Vehicles Text Box Check Box Type of Field # Fields Precision Recall





 Average

 F-Measure


 F-Measure


 (b) Mobile Phones Table 2: Field-level results for o ers from TodaOferta.
In this paper we presented a framework called iForm for automatically using data values implicitly available in free text documents as input for a preexisting form-based interface.
We proposed a novel IR-based method for identifying implicit values in the free text documents and  lling the form-based interface using them.
We tested our approach with representative instances of the problem and found that it achieved better results than CRF, a state-of-art data extraction model.
Our experiments also demonstrate that our approach is able to properly deal with di erent types of input  elds, such as text boxes, pull-down lists and check boxes.
