[1] S. Chaudhuri, V. Ganti, and D. Xin. Exploiting web

search to generate synonyms for entities. In WWW
Conference, 2009.

[2] S. Chaudhuri, V. Ganti, and D. Xin. Mining document

collections to facilitate accurate approximate entity
matching. PVLDB, 2(1), 2009.

[3] T. Cheng, H. W. Lauw, and S. Paparizos. Fuzzy

matching of web queries to structured data. In ICDE,
2010.

[4] T. Cheng, H. W. Lauw, and S. Paparizos. Entity

synonyms for structured web search. TKDE, 2011.

[5] D. Defays. An eﬃcient algorithm for a complete link
method. The Computer Journal, 20(4):364–366, 1977.

[6] A. Jain, S. Cucerzan, and S. Azzam.

Acronym-expansion recognition and ranking on the
web. In Information Reuse and Integration, 2007.

[7] R. Jones, B. Rey, O. Madani, and W. Greiner.

Generating query substitutions. In WWW, 2006.

[8] L. S. Larkey, P. Ogilvie, M. A. Price, and B. Tamilio.

Acrophile: an automated acronym extractor and
server. In Proceedings of the ﬁfth ACM conference on
Digital libraries, pages 205–214, 2000.

[9] D. Nadeau and P. D. Turney. A supervised learning

approach to acronym identiﬁcation. In Proceedings of
the 18th Canadian Society conference on Advances in
Artiﬁcial Intelligence, pages 319–329, 2005.

[10] S. Pakhomov. Semi-supervised maximum entropy

based approach to acronym and abbreviation
normalization in medical texts. In Proceedings of the
40th Annual Meeting on Association for
Computational Linguistics, 2002.

[11] P. Pantel, E. Crestan, A. Borkovsky, A.-M. Popescu,
and V. Vyas. Web-scale distributional similarity and
entity set expansion. In EMNLP, 2009.

[12] J. Pustejovsky, J. Castano, B. Cochran, M. Kotecki,

and M. Morrell. Automatic extraction of
acronym-meaning pairs from medline databases.
Studies in health technology and informatics,
84(1):371–375, 2001.

[13] J. Pustejovsky, J. Castano, B. Cochran, M. Kotecki,

M. Morrell, and A. Rumshisky. Extraction and
disambiguation of acronym-meaning pairs in medline.
2004.

[14] R. Sibson. Slink: an optimally eﬃcient algorithm for

the single-link cluster method. The Computer Journal,
16(1):30–34, 1973.

[15] P. D. Turney. Mining the web for synonyms: Pmi-ir

versus lsa on toeﬂ. CoRR, cs.LG/0212033, 2002.

[16] J. Wren, H. Garner, et al. Heuristics for identiﬁcation
of acronym-deﬁnition patterns within text: towards an
automated construction of comprehensive
acronym-deﬁnition dictionaries. Methods of
information in medicine, 41(5):426–434, 2002.

[17] M. Zahariev. Eﬃcient acronym-expansion matching
for automatic acronym acquisition. In International
Conference on Information and Knowledge
Engineering, 2003.

A. APPENDIX: ACRONYM-EXPANSION

CHECKING FUNCTION

Let a and e be an acronym and a query, respectively. The
acronym-expansion checking function returns true if e is an
expansion of a, and false otherwise. We modify the longest
common subsequence algorithm by assigning weights to the
words and letters of the query string. We ﬁnd the subse-
quence with the highest score and use heuristics to decide if
e is an expansion of a as follows.

To increase the chance of matching an acronym letter at
the beginning of a word, we assign weights wns = 2 to the
initial letters of normal non-stop words, ws = 1 to the initial
letters of stop words, and wni = 0.1 to all other letters (i.e.
the non-initial letters of all words). The score s of a match
is the sum of the scores of the participating letters (see Line
15). Then we check if s ≥ 0.68·|a|·wns, where |a| denotes the
number of letters in the acronym and 0.68 is an empirically
set threshold parameter.

A further requirement is that all words in the query con-
tain acronym letters. However, as mentioned earlier, often
stop words are not considered when acronyms are formed
(e.g., “Master of Business Administration” is an expansion
for “MBA”). To solve this we use weights for the non-stop
query words (wns = 2) and for the stop words (ws = 1).
We use another threshold to check if s ≥ 0.8 · T , where T is
deﬁned in Line 2.

If both conditions in Line 16 are satisﬁed, the acronym-
expansion check returns true, and otherwise f alse. For ex-
ample, the score of “master of business administration” for
the acronym “MBA” is 6 and both inequalities in Line 16 are
satisﬁed. The query “master of business administration ed-
ucation” is not expansion of “MBA” as the second inequality
is not satisﬁed (6 6≥ 0.8 · 9). Finally, two initial requirements
are that the acronym consists of one word only, and that the
query contains at least two words.

Algorithm 1 Acronym-Expansion Checking Function

Input: Acronym a; Query e; Weights {wns, ws, wni}
Output: True if e is expansion of a, false otherwise

1: function IsExpansion(a, e, wns, ws, wni)

T ←Pt∈e w(t), w(t) =(wns, t is non-stop word

Let R be (|a| + 1) × (|e| + 1) array of zeros
for i ← 1 to |a| do

t is stop word

ws,

for j ← 1 to |e| do

p ← max (R[i − 1, j], R[i, j − 1])
if a[i − 1] = e[j − 1] then

2:

3:
4:
5:
6:
7:

8:

end if

else

9:
10:
11:
12:
13:
14:
15:
16:
17: end function

end for

wns, non-stop word starts at j −1 in e
ws,
wni, else

stop word starts at j −1 in e

R[i, j] ← max (p, R[i − 1, j − 1] + w)

w ←


R[i, j] ← p

end for
s ← R[|a|, |e|]
return s ≥ 0.68 · |a| · wns and s ≥ 0.8 · T

⊲ Score of the best match

1271
