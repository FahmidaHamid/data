[1] S. Ahmad, A. Battle, Z. Malkani, and S. Kamvar. The
jabberwocky programming environment for structured
social computing. In UIST ’11, pages 53–64. ACM,
2011.

[2] E. Baralis, S. Ceri, and J. Widom. Better termination

analysis for active databases. In Rules in Database
Systems, pages 163–179, 1993.

[5] A. E. Elo. The rating of chessplayers, past and

present. Arco Pub., New York, 1978.

[6] M. J. Franklin, D. Kossmann, T. Kraska, S. Ramesh,

and R. Xin. Crowddb: answering queries with
crowdsourcing. In ACM SIGMOD 2011, pages 61–72.
ACM, 2011.

[7] W. H. Inmon. Building the Data Warehouse. John

Wiley & Sons, Inc., New York, NY, USA, 1992.

[8] A. Kittur, E. H. Chi, and B. Suh. Crowdsourcing user

studies with Mechanical Turk. In SIG-CHI Conf. on
Human factors in comp. sys., pages 453–456. ACM,
2008.

[9] S. Kochhar, S. Mazzocchi, and P. Paritosh. The

anatomy of a large-scale human computation engine.
In HCOMP ’10, pages 10–17. ACM, 2010.

[10] M. Kosinski, Y. Bachrach, G. Kasneci, J. Van-Gael,

and T. Graepel. Crowd iq: measuring the intelligence
of crowdsourcing platforms. In Web Science Conf.
2012 (WebSci), WebSci ’12, pages 151–160. ACM,
2012.

[11] E. Law and L. von Ahn. Human Computation.
Synthesis Lectures on Artiﬁcial Intelligence and
Machine Learning. Morgan & Claypool Publishers,
2011.

[12] G. Little, L. B. Chilton, M. Goldman, and R. C.

Miller. Turkit: tools for iterative tasks on mechanical
turk. In HCOMP ’09, pages 29–30. ACM, 2009.
[13] A. Marcus, E. Wu, S. Madden, and R. C. Miller.
Crowdsourced databases: Query processing with
people. In CIDR 2011, pages 211–214.
www.cidrdb.org, Jan. 2011.

[14] P. Minder and A. Bernstein. How to translate a book

within an hour: towards general purpose
programmable human computers with crowdlang. In
WebScience 2012, pages 209–212, Evanston, IL, USA,
June 2012. ACM.

[15] A. G. Parameswaran and N. Polyzotis. Answering

queries using humans, algorithms and databases. In
CIDR 2011, pages 160–166, Asilomar, CA, USA,
January 2011.

[16] H. Park, R. Pang, A. G. Parameswaran,

H. Garcia-Molina, N. Polyzotis, and J. Widom. Deco:
A system for declarative crowdsourcing. PVLDB,
5(12):1990–1993, 2012.

[17] V. S. Sheng, F. Provost, and P. G. Ipeirotis. Get
another label? improving data quality and data
mining using multiple, noisy labelers. In Proceedings of
the 14th ACM SIGKDD international conference on
Knowledge discovery and data mining, KDD ’08, pages
614–622, New York, NY, USA, 2008. ACM.

[18] P. Venetis, H. Garcia-Molina, K. Huang, and

N. Polyzotis. Max algorithms in crowdsourcing
environments. In WWW ’12, pages 989–998, New
York, NY, USA, 2012. ACM.

[19] J. Widom and S. Ceri. Active Database Systems.

[3] A. Bozzon, M. Brambilla, and S. Ceri. Answering

Morgan Kaufmann, 1996.

search queries with crowdsearcher. In 21st Int.l Conf.
on World Wide Web 2012, WWW ’12, pages
1009–1018. ACM, 2012.

[4] A. Doan, R. Ramakrishnan, and A. Y. Halevy.
Crowdsourcing systems on the world-wide web.
Commun. ACM, 54(4):86–96, Apr. 2011.

[20] W. Willett, J. Heer, and M. Agrawala. Strategies for
crowdsourcing social data analysis. In SIG-CHI Conf.
on Human Factors in comp. sys., pages 227–236.
ACM, 2012.

162APPENDIX
A. RULES FOR THE RUNNING EXAMPLE
The complete rule set of the example is constituted by the
seven rules below and by rules 1, 2, 6; and optionally one of
(3, 4, 5), 7, 8, and one of (9, 10).

rule ObjectEvalCounter

e: UPDATE FOR Execution[Answer]
a: SET Object_CTRL[oid==NEW.oid].Eval += 1

rule PerformerEvalCounter

e: UPDATE FOR Execution[Answer]
a: SET Performer_CTRL[pid==NEW.pid].Eval += 1

rule TaskEvalCounter

e: UPDATE FOR Execution[Answer]
a: SET Task_CTRL[tid==NEW.tid].CompExec += 1

rule CurrentMajorityDem

e: UPDATE FOR Object_CTRL[Dem,Rep]
c: NEW.Dem > NEW.Rep
a: SET NEW.Answer = ’Dem’

rule CurrentMajorityRep

e: UPDATE FOR Object_CTRL[Dem,Rep]
c: NEW.Rep > NEW.Dem
a: SET NEW.Answer = ’Rep’

rule CurrentMajorityTie

e: UPDATE FOR Object_CTRL[Dem,Rep]
c: NEW.Rep == NEW.Dem
a: SET NEW.Answer = ’Undefined’

rule TaskControlOnClosedObject

e: UPDATE FOR Politician[Status]
c: NEW.Status == ’Complete’
a: SET Task_CTRL[tid==NEW.tid].CompObj += 1

|
|
|

|
|
|
|
|
|

B. GRAMMAR OF RULE LANGUAGE
(cid:104)rule(cid:105) ::= ‘rule’ (cid:104)rulename(cid:105) ‘e:’ (cid:104)eventclause(cid:105) [‘c:’ (cid:104)condition-clause(cid:105)]

‘a:’ (cid:104)action-clause(cid:105)

(cid:104)event-clause(cid:105) ::= ‘TIMER FOR’ (cid:104)TABLE(cid:105) (cid:104)timer-expression(cid:105)

‘INSERT FOR’ (cid:104)TABLE(cid:105) | ‘DELETE FOR’ (cid:104)TABLE(cid:105)
‘UPDATE FOR’
(cid:104)TABLE(cid:105) [‘[’(cid:104)ATTRIBUTE(cid:105){,(cid:104)ATTRIBUTE(cid:105)}‘]’]
(cid:104)condition-clause(cid:105) ::= ( (cid:104)predicate(cid:105) ) | ‘not’ (cid:104)predicate(cid:105)

(cid:104)predicate(cid:105) ‘and’ (cid:104)predicate(cid:105) | (cid:104)predicate(cid:105) ‘or’ (cid:104)predicate(cid:105)

|
|

|

(cid:104)predicate(cid:105) ::= (cid:104)expression(cid:105) (cid:104)comp(cid:105) (cid:104)expression(cid:105)
(cid:104)expression(cid:105) ::= (cid:104)expression(cid:105) (cid:104)op(cid:105) (cid:104)expression(cid:105)

(cid:104)op(cid:105) (cid:104)expression(cid:105)
((cid:104)expression(cid:105)) | (cid:104)constant(cid:105)
(cid:104)variable(cid:105).(cid:104)ATTRIBUTE(cid:105) | (cid:104)selector(cid:105).(cid:104)ATTRIBUTE(cid:105)

(cid:104)selector(cid:105) ::= (cid:104)TABLE(cid:105)[(cid:104)condition-clause(cid:105)]
(cid:104)action-clause(cid:105) := (cid:104)statement(cid:105) [{,(cid:104)statement(cid:105)}]
(cid:104)statement(cid:105) ::= ‘IF’ (cid:104)condition-clause(cid:105) ‘THEN’ (cid:104)action-clause(cid:105) [‘ELSE’

(cid:104)action-clause(cid:105)]
‘FOREACH’ (cid:104)variable(cid:105) ‘IN’
(cid:104)selector(cid:105).(cid:104)ATTRIBUTE(cid:105)(cid:104)action-clause(cid:105)
‘SET’ (cid:104)selector(cid:105)‘.’(cid:104)ATTRIBUTE(cid:105) ‘=’ (cid:104)expression(cid:105)
‘SET’ (cid:104)variable(cid:105)‘.’(cid:104)ATTRIBUTE(cid:105) ‘=’ (cid:104)expression(cid:105)
‘DELETE FROM’ (cid:104)selector(cid:105)
‘INSERT INTO’ (cid:104)TABLE(cid:105) ((cid:104)expression(cid:105) {,(cid:104)expression(cid:105)})
(cid:104)FUNCTION(cid:105) ((cid:104)parameter(cid:105){,(cid:104)parameter(cid:105)})

(cid:104)parameter(cid:105) ::= (cid:104)variable(cid:105) | (cid:104)constant(cid:105)
(cid:104)variable(cid:105) ::= ‘NEW’ | ‘OLD’ | (cid:104)variable-name(cid:105)
(cid:104)comp(cid:105) ::= ‘==’ | ‘>’ | ‘<’ | ‘>=’ | ‘<=’ | ‘!=’
(cid:104)op(cid:105) ::= ‘+’ | ‘-’ | ‘*’ | ‘/’ | ‘+=’
(cid:104)timer-expression(cid:105) ::= ‘EVERY’ (cid:104)time-constant(cid:105)

|

‘AT’ (cid:104)time-constant(cid:105)

<TABLE >, <ATTRIBUTE >, <FUNCTION >, <variable-name >, <constant >, <time-
constant > are strings

163
