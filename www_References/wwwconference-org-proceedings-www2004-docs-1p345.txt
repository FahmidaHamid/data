[1] Report from the w3c workshop on binary interchange of xml
information item sets. http://fr.w3.org/2003/08/
binary-interchange-workshop/Report.html,
2003.

[2] R. Agrawal, R. Bayardo, D. Gruhl, and S. Papdimitriou.

Vinci: A service-oriented architecture for rapid development
of web applications. In WWW10, Hongkong, May 2001.

[3] R. Agrawal, A. Somani, and Y. Xu. Storage and querying of

e-commerce data. In Proc. of the 27th Int’l Conference on
Very Large Databases (VLDB 2001), Roma, Italy, September
2001.

[4] B. Cooper, N. Sample, M. J. Franklin, G. R. Hjaltason, and
M. Shadmon. A fast index for semistructured data. In The
VLDB Conference, pages 341–350, 2001.

352[5] C. Cooper. Using expat. In xml.com

(http://www.xml.com/pub/a/1999/09/expat/index.html), 1999.

[6] A. M. Flavio Rizzolo. Indexing xml data with toxin. In

WebDB-2001, 2001.

[7] D. Florescu, C. Hillery, D. Kossmann, P. Lucas, F. Riccardi,
T. Westmann, M. Carey, A. Sundararajan, and G. Agrawal.
The bea/xqrl streaming xquery processor. In Proc. of the 29th
VLDB Conference, 2003.

[8] R. Goldman, J. McHugh, and J. Widom. From

semistructured data to xml: Migrating the lore data model
and query language. In Proceedings of the 2nd International
Workshop on the Web and Databases (WebDB ’99),
Philadelphia, Pennsylvania, June 1999.

[9] T. Green, M. Onizuka, and D. Suciu. Processing XML

streams with deterministic automata and stream indexes.
Technical report, University of Washington, 2001.

[10] HP Labs. The sparta project.

http://sparta-xml.sourceforge.net/.

[11] IBM. Db2 xml extender. http://www-3.ibm.com/

software/data/db2/extenders/xmlext/.
[12] V. Josifovski, F. Fontoura, and A. Barta. Querying xml

streams. In to appear in the VLDB Journal, 2004.

[13] W. Y. Lam, W. Ng, P. Wood, and M. Levene. Xcq: Xml

compression and querying system. In Proc. of the Twelfth
Int’l World Wide Web Conf., 2003.

[14] Q. Li and B. Moon. Indexing and querying xml data for

regular path expressions. In VLDB 2001, 2001.

[15] H. Liefke and D. Suciu. Xmill: an efﬁcient compressor for

xml data. In Proc. of the ACM SIGMOD Conf. on
Management of Data, 2000.

[16] B. Ludascher, P. Mukhopadhyay, and Y. Papakonstantinou. A

transducer-based xml query processor. In Proc. of the 28th
VLDB Conference, 2002.

[17] B. Martin and B. Jano. Wap binary xml content format, w3c
recommendation. http://www.w3.org/TR/wbxml/,
24 June 1999.

[18] D. Megginson and D. Brownell. Sax.

http://www.saxproject.org/.

[19] J. Myllymaki. Effective Web data extraction with standard

XML technologies. In Proceedings of the Tenth International
World Wide Web Conference, Hong Kong, May 2001.
[20] D. Olteanu, H. Meuss, T. Furche, and F. Bry. XPath:

Looking forward. In Proc. of the EDBT Workshop on XML
Data Management (XMLDM), volume 2490 of LNCS, pages
109–127. Springer, 2002.

[21] Oracle. Oracle xml db.

http://www.oracle.com/xml.

[22] S. Pal, J. Marsh, and A. Layman. A case against

standardizing binary representation of xml. In Workshop on
Binary Interchange of XML Information Item Sets, 2003.

[23] F. Peng and S. S. Chawathe. XSQ: Streaming XPath Queries.
[24] J. F. N. Raghav Kaushik, Philip Bohannon and H. F. Korth.
Covering indexes for branching path queries. In SIGMOD
2002, 2002.

[25] N. Sundaresan and R. Moussa. Algorithms and programming

models for efﬁcient representations of xml for internet
applications. In Proc. of the Tenth Int’l World Wide Web
Conf., 2001.

[26] The Apache Project. Apache xindice.

http://xml.apache.org/xindice/.
[27] The Apache Project. Xerces-c++ version 2.3.0.
http://xml.apache.org/xerces-c/.

[28] The World Wide Web Consortium. Document Object Model

(DOM). http://www.w3.org/DOM.

[29] The World Wide Web Consortium. Extensible Markup

Language (XML). http://www.w3.org/XML.

APPENDIX
A. XTALK SPECIFICATION

doc ::= ’X’ versionid int (’p’ pi)*

’E’ element (’p’ pi)*

versionid ::= byte

element ::= string int attr* int child*

child ::= (’s’ string)

| (’E’ element)
| (’p’ pi)

attr ::= string string

pi ::= string string

string ::= int utf8

utf8 ::= (byte array of valid utf8 character data)
int ::= (4 byte big-endian unsigned integer)

Constraints:
doc:
Total number of pi occurrences must equal the value of the int + 1.
element:
String must abide by the XML 1.0 restrictions on tag names. Total
number of attr occurrences must equal the value of the preceding
int. Total number of child occurrences must equal the value of the
preceding int.
attr:
First string must abide by XML1.0 restrictions on attribute names.
Second string must abide by XML1.0 restrictions on normalized
attribute values.

353Method
Xalan-J
Xalan-C
Xerces-C
Expat
XTalk
Skip
Token
Token+Skip

DBLP

DBLP
PARSE QUERY
N/A
N/A
30.574
9.203
4.376
4.887
4.115
4.667

N/A
1804.765
49.360
15.733
10.375
9.283
9.754
8.653

RE

RE

RE
QUERY1 QUERY2 QUERY3
42.701
17.024
8.182
2.153
1.182
0.360
1.112
0.370

42.972
15.993
8.272
2.714
1.372
1.442
1.302
1.402

42.731
16.994
10.114
3.695
2.353
2.363
2.263
2.263

RE
2.5
2.123
0.631
0.391
0.130
0.070
0.030
0.070
0.030

RE
5
2.854
1.241
0.721
0.230
0.111
0.040
0.110
0.040

RE
10
4.437
2.464
1.412
0.441
0.210
0.050
0.200
0.060

RE
20
8.212
5.088
2.774
0.811
0.400
0.110
0.381
0.100

RE
40
22.052
10.935
5.588
1.572
0.791
0.210
0.761
0.220

RE
60
42.701
17.024
8.182
2.153
1.182
0.360
1.112
0.370

Table 2: Numerical results of experiments. Run times are in seconds.

B. EXPERIMENT DETAILS
B.1 DTD for Real Estate Dataset

<!ELEMENT REALESTATE (CITY+)>
<!ELEMENT CITY (#PCDATA|PROPERTY)*>
<!ATTLIST CITY NAME CDATA #IMPLIED>
<!ELEMENT PROPERTY (URL,IMAGEURL,ADDRESS,TYPE,AGE,SQFT,BEDROOMS,

BATHROOMS,GARAGE,LOTSIZE,DESCRIPTION,LISTINGS)>

<!ELEMENT URL (#PCDATA)>
<!ELEMENT IMAGEURL (#PCDATA)>
<!ELEMENT ADDRESS (STREET,CITY,STATE,ZIPCODE)>
<!ELEMENT STREET (#PCDATA)>
<!ELEMENT STATE (#PCDATA)>
<!ELEMENT ZIPCODE (#PCDATA)>
<!ELEMENT TYPE (#PCDATA)>
<!ELEMENT AGE (#PCDATA)>
<!ELEMENT SQFT (#PCDATA)>
<!ELEMENT BEDROOMS (#PCDATA)>
<!ELEMENT BATHROOMS (#PCDATA)>
<!ELEMENT GARAGE (#PCDATA)>
<!ELEMENT LOTSIZE (#PCDATA)>
<!ELEMENT DESCRIPTION (#PCDATA)>
<!ELEMENT LISTINGS (LISTING+)>
<!ELEMENT LISTING (PRICE)>
<!ATTLIST LISTING DATE CDATA #IMPLIED>
<!ATTLIST LISTING ID CDATA #IMPLIED>
<!ELEMENT PRICE (#PCDATA)>
<!ATTLIST PRICE CURRENCY CDATA #IMPLIED>

B.2 XSL Query for DBLP Dataset

<xsl:template match="/dblp">

<RESULT>

<xsl:for-each select="inproceedings[author[text() = ’Peter P. Chen’]]">

<YEAR><xsl:value-of select="year"/></YEAR>
<TITLE><xsl:value-of select="title"/></TITLE>

</xsl:for-each>

</RESULT>

</xsl:template>

B.3 XSL Query for Real Estate Dataset

<xsl:template match="*|@*">

<xsl:copy>

<xsl:apply-templates select="@*"/>
<xsl:apply-templates select="*"/>
<xsl:apply-templates select="text()"/>

</xsl:copy>

</xsl:template>

<!-- RE-QUERY1 -->
<xsl:template match="/REALESTATE">

<RESULT>

<xsl:apply-templates select="CITY[@NAME = ’APTOS’]/PROPERTY"/>

</RESULT>

</xsl:template>

<!-- RE-QUERY2 -->
<xsl:template match="/REALESTATE">

<RESULT>

<xsl:for-each select="CITY/PROPERTY[SQFT > 1875 and SQFT &lt; 2000
and ADDRESS/ZIPCODE = 95032]">

<AGE><xsl:value-of select="AGE"/></AGE>
<PRICE><xsl:value-of select="LISTINGS/LISTING/PRICE"/></PRICE>

</xsl:for-each>

</RESULT>

</xsl:template>

<!-- RE-QUERY3 -->
<xsl:template match="/">

<RESULT>

<xsl:apply-templates select="//ZIPCODE[text() = 95037]"/>

</RESULT>

</xsl:template>

354
