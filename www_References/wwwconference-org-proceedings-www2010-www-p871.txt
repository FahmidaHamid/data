[1] B. Adler and L. de Alfaro. A content-driven

reputation system for the Wikipedia. In Proc. of the
16th Intl. World Wide Web Conf.(WWW 2007).

[2] D. Berry and B. Fristedt. Bandit Problems. Chapman

and Hall, 1985.

[3] R. Bhattacharjee and A. Goel. Avoiding ballot

stuﬃng in eBay-like reputation systems. In
Proceedings of the 2005 ACM SIGCOMM workshop on
Economics of peer-to-peer systems, pages 133–137.
ACM New York, NY, USA, 2005.

[4] R. Bhattacharjee and A. Goel. Algorithms and
incentives for robust ranking. In SODA, pages
425–433. Society for Industrial and Applied
Mathematics Philadelphia, PA, USA, 2007.

[5] S. Brin and L. Page. The anatomy of a large-scale

hypertextual Web search engine. Computer networks
and ISDN systems, 30(1-7):107–117, 1998.

[6] N. Cesa-Bianchi and G. Lugosi. Prediction, learning,

and games. Cambridge University Press, 2006.

[7] D. Helmbold, N. Littlestone, and P. Long. Apple

tasting. Information and Computation, 161(2):85–139,
2000.

[8] S. D. Kamvar, M. T. Schlosser, and H. Garcia-Molina.

The eigentrust algorithm for reputation management
in p2p networks. In WWW ’03: Proceedings of the
12th international conference on World Wide Web,
pages 640–651, New York, NY, USA, 2003. ACM.

[9] J. Kleinberg. Authoritative sources in a hyperlinked

environment. Journal of the ACM, 46(5):604–632,
1999.

[10] E. Zheleva, A. Kolcz, and L. Getoor. Trusting spam

reporters: A reporter-based reputation system for
email ﬁltering. ACM Trans. Inf. Syst., 27(1):1–27,
2008.

APPENDIX

A. PROOF OF 3.4

1

Proof of Theorem 3.4. We reformulate the algorithm
equivalently: at step i test with probability
1+εi , and ev-
ery time we reset the probability p. The question then be-
comes what is the expected number of tests we will per-
form? Let Xi be the random variable that is 1 if there
were no reset until step i, and ith ﬂag was tested (whether
or not the probability was reset on ﬂag i.) Further let
Pi be the probability that there was no reset until step
i (whether or not reset happened on step i). Obviously
1+εi . The number of
tests that happened before and including the ﬁrst reset is
Pi
1+εi . Let Fn de-
notes the random variable indicating how many tests were
performed during the ﬁrst n steps. Let Fn,i denote random
variables indicating how many tests were performed by the

Pi = Qi−1
the random variable: EˆPn

1+εj ) and E [Xi] = Pi

j=1(1 − p

i=1 Xi˜ =Pn

i=1

WWW 2010 • Full PaperApril 26-30 • Raleigh • NC • USA878algorithm after i-th step respectively, provided that the reset
occurred at position i, and is 0 if the reset hasn’t occurred.
Also let Gn denote the number of tests performed by the
algorithm before and including the ﬁrst reset. Note that the
1+εi Fn−i. On
algorithm has no memory and thus Fn,i = Pi
the other hand since each test causes a reset with probabil-
ity p the expected number of tests before the ﬁrst reset can
be expressed as

p

Substituting that into (4) we have:

E [Fn] ≤

=

1
p

1
p

n−1

+

1 + εi

pPiγ(n + c − i)

Xi=1
+ (1 − Pn)(γn + c) −

=

1
p

(1 − Pn+1)

≤ γn + c +

1
p − Pnc − γp

Thus we need to prove:

n−1

pPiγi
1 + εi

Xi=1
Xi=1
(1 + ε)(1 − p + εi)α+1

i(1 − p + ε)α+1

n−1

.

1
p − Pncγ − γp

n−1

Xi=1

i(1 − p + ε)α+1

(1 + ε)(1 − p + εi)α+1 ≤ 0

(6)

x

(q + εx)α+1 =

n−1

Let q = 1 − p:
i
Xi=1
(q + ε)α+1 +

(q + εi)α+1 ≥

=

1

=

=

1

(q + ε)α+1 +

1

(q + ε)α+1 +

n

1

x=2

(q + ε)α+1 +Z n
(−1 + α)αε2(q + εx)α˛˛˛˛
−(q + αεx)
(−ε + p)p(q + εx)α˛˛˛˛

(p − ε)p(q + 2ε)α −

−(q + px)

1 + p

n

x=2

x=2

q + pn

(p − ε)p(q + εn)α

E [Gn] =

Pi

1 + εi

n

Xi=1
≤ min(

1
p

) ≤
Where in the ﬁrst upper bound, we used

ε

,

ε

ln(1 + εn)

ln(1 + εn)

1

1 + εi ≤Z n

1

1

εx + 1

dx ≤

ln(1 + εn)

ε

.

Thus:

X i = 1n
E [Fn] = E" n
Xi=1
Xi=1
Now we estimate Pn
ln[Pi] = ln(1 −

have:

i=1

=

n

Fn,i + Gn#

(4)

(5)

Pi

1 + εi

pE [Fn−i] +

ln(1 + εn)

ε

Pi
1+εi [1 + pE [Fn−i]]. First of all we

p

1 + ε

) +

i−1

Xj=2

ln(1 −

p

1 + εj

)

After some algebra, where we approximate the sum and
integrating, we have

e and β = 2 ln(1 + εn) 1+ε

Case p ≤ ε. We need to show that E [Fn] ≤ βnα where
α = p
ε . The proof is by induction.
The base is obvious, to prove the induction hypothesis we
have:

n

ε

ε

ε

+

≤

≤

≤

ln(1 + εn)

Pi × p × E [Fn−i]

1 + εi

ln(1 + εn)

ln(1 + εn)

ln(1 + εn)

E [Fn] ≤

β(1 − p + ε)α+1nα
(1 + ε)(1 − p + εn)α

Xi=1
+ (1 − Pn+1)Fn−1
+ βnα −
+ βnα − β
+ βnα −
where ﬁrst we used Pn−1
1+εi = 1 − Pn, then that (1− p +
ε) ≥ 1 and (1 − p + εn)α ≤ (1 + εn)α ≤ 1 + (εn)α α < 1,
1+εαn ≥ 1/2.
and ﬁnally,
Case p ≥ ε. We have to prove E [Fn] ≤ γn + c. If p ≥ 4/3ε
the result is obvious since 4 p−ε
p ≥ 1. We consider p ≤ 4/3ε
only. After some algebra, we get the following bound:

(1 + ε)(1 + εαnα)
2(1 + ε) ≤ βnα

ln(1 + εn)

≤

nα

pPi

i=1

nα

β

ε

ε

Pi
1 + εi ≥

(1 − p + ε)

p
ε +1
(1 + ε)(1 − p + iε)

p
ε +1

Pi ≥

(1 − p + ε)

p
ε +1

(1 + ε)(1 − p + (i − 1)ε)

p
ε

≥

1

(q + ε)α+1 +

1 + p

(p − ε)p(q + 2ε)α −

substituting we have:

p

1 + ε

n

Xi=1

i(q + ε)α+1
(q + εi)α+1 ≥

p(q + ε)α+1

1 + ε

`

−

q + pn

(p − ε)p(q + εn)α´

p

+

1 + ε

(1 + p)(q + ε)α+1

(1 + ε)(p − ε)(q + 2ε)α −

(q + pN )(q + ε)α+1
≥
(1 + ε)(p − ε)(q + nε)α
Note
term asymptotically behaves as
O(n1−α) = o(1), and on the other hand we have Pn ≥
(1+ε)(q+(n−1)ε)α , thus by adjusting c independently of n we
can guarantee:

(q+ε)α+1

that

last

the

cPn −

(q + pN )(q + ε)α+1

(1 + ε)(p − ε)(q + N ε)α ≥ 1

thus we have:

cPn +

p

1 + ε

p

1 + ε

+

n

i(q + ε)α+1
(q + εi)α+1 ≥
(1 + p)(q + ε)α+1

Xi=1
(1 + ε)(p − ε)(q + 2ε)α − 1

p

(1 + p)(q + ε)
(1 + ε)(p − ε)

1 + ε − 1 +
(p − 1 − ε)(p − ε) + (1 − p2)(1 − p + ε)

(1 −

1 − p + 2ε

p

)

(1 + ε)(p − ε)

(q + ε)2(q − p2 + ε)

(1 + ε)(p − ε)

≥

1

4(p − ε)

≥

≥

≥

≥

WWW 2010 • Full PaperApril 26-30 • Raleigh • NC • USA879Using this bound and substituting γ = 4(p−ε)
ately have (6) satisﬁed, as needed.

p

we immedi-

B. CONCENTRATION BOUNDS ON NUM(cid:173)

BER OF ERRORS

In this section we show that under certain conditions the
number of missed false ﬂags is also tightly concentrated
around its expectation. In particular we introduce an extra
constraint to algorithm 1, that requires that each pi ≥q 1
i .
Curbing at this probability adds O(√N ) extra tests, the
adversarial case is not aﬀected, and the standard user ex-
pectation only adds o(N ), thus the analysis carries through.
The proof is based on application of Azuma inequality to the
sequence of Ri with a twist that since Ri are unbounded we
need to bound each Ri with high probability.

Lemma B.1. Suppose X1 . . . Xn be a submartingale such

that Pr [Xi+1 − Xi ≥ ci] ≤ δ

n , then

Pr [Xn ≥ λ] ≤ exp[

] + δ

λ

i

2P c2

Proof.
In order to prove the inequality we introduce
bounded random variables that are almost always equal to
Xi, and then use Azuma inequality combined with union
bound. Let Yi = Xi − Xi−1, and let Y ′i = min(Yi, ci),
and X′i = Pn
i=1 Y ′i , then using Azuma inequality we have
Pr [X′m ≥ λ] ≤ exp[− λ
], Consider the underlying prob-
ability space and let Ω(.) denotes the subspace where con-
dition (.) is satisﬁed.

2 P c2
i

We have Ω(X′n 6= Xn) ⊆ Ω(Y ≥ ci, for some i), thus
Pr [X′n 6= Xn] ≤ nδ
n = δ. On the other hand we have
Ω(Xn ≥ γ) ⊆ Ω(X′n 6= Xn) ∪ (Ω(X′n ≥ γ) ∩ Ω(X′n = Xn)).
Thus:

Pr [Xn ≥ λ] ≤ PrˆX′n 6= Xn˜ + PrˆX′n 6= Xn˜

≤ δ + exp[−

λ
i=1 c2
i

]

2Pn

as needed.

have

Theorem B.2

(Concentration). If all pi ≥ q 1
Pr [(e(N ) − εN ) ≥ εN ] ≤ 2 exp[−ε2/3N 1/6 + log N ]

i we

.

Note that the constraint on pi is on the algorithm execution
(e.g. we control all pi), and not on the stopping times out-
comes, thus we are not introducing any hidden conditioning
and do not change distributions. Proof. The idea of the
proof is to apply Azuma inequality and use lemma B.1 to
get the desired bound.

c

1−pgi
pgi

Fix δ = exp[−ε2/3N 1/6 + log N ] and denote c = log N/δ,
By using lemma 3.1 we
and consider Ti =
have E [Ri − Ti|Ti, R0 . . . Ri−1] ≤ 0 for any Ti, and thus
E [Ri − Ti|R0 . . . Ri−1] < 0 thereforePi
i=0(Ri−Ti) is a sub-
martingale. On the other hand, we have:
PrhRi − Ti ≥ c√Ni ≤ Pr»Ri − Ti ≥
pgi– ≤ exp[−c] ≤
δ
N
Where we have used that gi ≤ N , constraint on pgi ≥ i
√gi
and the lemma 3.1 to bound PrhRi − Ti ≥ c
pgii.
Thus we can use lemma B.1 with bound ci ≤
log(N/δ)√N . For any l′ and λ = εN we have:
Pr2
4

5 ≤ δ + exp[−

Ri − Ti ≥ εN3

2l′√N log2(N/δ)
ε2√N

Xi

ε2N 2

l′

]

.

,

≤ exp[−

(log N − log δ)2 ] + δ

Now we substitute for log δ into the exponent and we get as
needed:

Ri − Ti ≥ εN3

l′

Pr2
Xi
4

ε2√N

5 ≤ δ + exp[−

(log N − log δ)2 ]
ε2√N
(ε2/3N 1/6)2 ] + δ ≤ 2δ.

≤ exp[−

WWW 2010 • Full PaperApril 26-30 • Raleigh • NC • USA880
