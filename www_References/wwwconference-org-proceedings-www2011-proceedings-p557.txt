[1] Reka Albert, Hawoong Jeong, and Albert-Laszlo Barab´asi.
The diameter of the world wide web. Nature, 401:130–131,
1990.

[2] Michael C. Appleby. The probability of linearity in
hierarchies. Animal Behavior, 31(2):600–608, 1983.

[3] Albert-Laszlo Barab´asi. The origin of bursts and heavy

tails in humans dynamics. Nature 435, 207, 2005.

[4] Aaron Clauset, Cristopher Moore, and Mark Newman.

Structural inference of hierarchies in networks. In
International Conference on Machine Learning, Workshop
on Social Network Analysis, June 2006.

[5] Han de Vries. An improved test of linearity in dominance

hierarchies containing unknown or tied relationships.
Animal Behavior, 50:1375–1389, 1995.

[6] Han de Vries. Finding a dominance order most consistent

with a linear hierarchy: A new procedure and review.
Animal Behavior, 55(4):827–843, 1998.

[7] Paul Erd¨os and Alfr´ed R´enyi. On the evolution of random

graphs. Publication of the Mathematical Institute of the
Hungarian Academy of Sciences, 5, 1960.

[8] Guy Even, Joseph (Seﬃ) Naor, Baruch Schieber, and

Madhu Sudan. Approximating minimum feedback sets and
multi-cuts in directed graphs. Integer Programming and
Combinatorial Optimization, pages 14–28, 1995.

[9] Eugene F. Fama and Kenneth R. French. Testing trade-oﬀ

and pecking order predictions about dividends and debt.
Review of Financial Studies 15, 1-33, 2002.

[10] Murray Z. Frank and Vidhan K. Goyal. Testing the pecking

order theory of capital structure. Journal of Financial
Economics 67, 217-248, 2003.

[11] Lise Getoor and Christopher P. Diehl. Link mining: A

survey. ACM SIGKDD Explorations Newsletter, 7(2):3–12,
December 2005.

[12] Mark Granovetter. The strength of weak ties. American

Journal of Sociology, 78:1360–1380, 1973.

[13] http://www.answers.com/topic/social-stratiﬁcation-1.
[14] Vigo Kann. On the approximability of NP-complete

optimization problems. PhD thesis, Department of
Numerical Analysis and Computing Science, Royal
Institute of Technology, Stockholm, May 1992.

[15] M. G. Kendall. Rank correlation methods. Charles Griﬃn,

London, 1962.

[16] Jon Kleinberg. Authoritative sources in a hyperlinked

environment. Journal of the ACM, 46, 1999.

[17] H. G. Landau. On dominance relations and the structure of

animal societies: I. eﬀect of inherent characteristics.
Bulletin of Mathematical Biophysics, 13(1):1–19, 1951.
[18] Jure Leskovec, Daniel Huttenlocher, and Jon Kleinberg.

Predicting positive and negative links in online social
networks. In ACM International Conference on World
Wide Web (WWW), 2010.

[19] Jure Leskovec, Daniel Huttenlocher, and Jon Kleinberg.

Signed networks in social media. In ACM SIGCHI
Conference on Human factors in computing systems, 2010.
[20] David Liben-Nowell and Jon Kleinberg. The link prediction

problem for social networks. In International Conference
on Information and Knowledge Management, 2003.

[21] Arun S. Maiya and Tanya Y. Berger-Wolf. Inferring the

maximum likelihood hierarchy in social networks. In
Computational Science and Engineering, August 2009.
[22] Ryan Rowe, German Creamer, Shlomo Hershkop, and

Salvatore J. Stolfo. Automated social hierarchy detection
through email network analysis. In Joint 9th WEBKDD
and 1st SNA-KDD Workshop, 2007.

[23] Schjelderup-Ebbe T. Contributions to the social psychology

of the domestic chicken. Reprinted from Zeitschrift fuer
Psychologie, 1922, 88:225-252., 1975.

[24] Travers and Milgram. An experimental study of the small

world problem. sociometry, 32:425–443, 1969.

[25] Duncan J. Watts and Steven H. Strogatz. Collective

dynamics of ’small-world’ networks. Nature 393, 440-442,
1998.

APPENDIX
A. PROOFS

We shall now prove Theorem 1 and 2. We start with
proving that Algorithm 1 produces a feasible dual solution.

Lemma 1. Let H be the subgraph of G that contains the re-
verse of all (and only those) edges labeled +1 by Algorithm 1.
Then, for each vertex v : indegH (v) = outdegH (v)

Proof. Let H be the subgraph of G consisting of all the +1
edges.
Initially, H is the empty graph. We establish the
following loop invariants.
• All edges with label -1 belong to G. The reverse of all

edges labeled +1 belong to G.

WWW 2011 – Session: Social Network AnalysisMarch 28–April 1, 2011, Hyderabad, India565• ∀v ∈ V : indegH (v) = outdegH (v).
These are true at the start. If we prove these for each iter-
ation of the loop, they will imply the lemma.
The ﬁrst assertion is true, since we initialize the label all
edges to −1 and whenever we reverse an edge, we also change
its sign.

Now, we shall prove the second assertion. Suppose this
is true at some middle state. Algorithm 1 ﬁnds a directed
cycle C in G, removes edges with label +1 from H and
adds edges with label -1 to H. For any vertex v, the edges
e1, e2 adjoining it in C can have any of the four ±1 label
combinations. When they have labels +1,+1, the indegree
and outdegree both decrease by 1 and when they have labels
-1,-1, both the the indegree and outdegree increase by 1.
When the labels are -1,+1, we remove edge e2 from H, which
was pointing into v and add edge e1, which now points into
v. Similarly, if the labels were +1,-1 then we remove edge
e2, which was pointing out of v in H and add edge e1, which
now points out of v. So, the indegree or outdegree does not
change in these cases. This proves the lemma.

Lemma 2. H is the maximal such subgraph.

Proof. Let T be another subgraph, such that number of
edges of T is greater than number of edges of H. Let rev(H)
be the graph with edges of H reversed. Consider the graph
P obtained by taking the disjoint union of edges of rev(H)
and T and removing cycles of length two with one edge from
H and the other from T . Set the label of edges in rev(H\T )
to 1, and the label of edges in T \ H to −1. The edges in
T ∩ H become cycles of length two in rev(H)∪ T and are re-
moved from P . Observe that P occurs as a subgraph (along
with the labels) of G at the termination of Algorithm 1.

P is Eulerian since both rev(H) and T are Eulerian and
we only remove cycles from their disjoint union. Hence, we
can construct a cycle cover of the edges of P . But the total
number of negative edges of P is greater than the number
of positive edges. Hence, there exists a negative cycle in
this cover. Since P is a subgraph of G, this also implies
that there exists a negative cycle in G at the end of the
Algorithm 1, which is a contradiction.

Lemma 3. Algorithm 1 terminates in O(cid:0)m2n(cid:1) time.

Proof. In each iteration of the loop, the number of edges
with label +1 increases by at least 1. The total number of
edges is upper bounded by m. Hence, there are at most m it-
erations. Each iteration calculates a negative cycle detection
algorithm, which can be done by Bellman-Ford and takes

time O (mn). Hence, the total time is at most O(cid:0)m2n(cid:1).

Hence, we have proved Theorem 1.

Theorem 1. Let H be the subgraph of G that contains all
(and only those) edges labeled +1 by Algorithm 1. Then, for
each vertex v : indegH (v) = outdegH (v). Also, for every
subgraph T of G with the property that v : indegT (v) =
outdegT (v), number of edges in H is greater than the number
of edges in T .

Theorem 1 shows that Algorithm 1 calculates the optimal
integral dual solution. We now prove properties of Algo-
rithm 2. First we prove that Algorithm 2 terminates.

Lemma 4. If the input graph to Algorithm 2 does not con-
tain negative cycles, then Algorithm 2 terminates.

Proof. All nodes have label 0 at the start of the algorithm.
Consider the shortest paths between all pairs of vertices.
Since there are no negative cycles, these are well deﬁned. Let
m be the minimum length among all shortest paths. Note
that m will be negative, since the graph contains negative
edges. We claim that −l is an upper bound on the label
that any vertex can get. If any vertex gets a higher label,
we can trace the set of edges that were used to get to that
label, and these would give a shorter path than l, which is
a contradiction.

The next lemma helps us prove Theorem 2.

Lemma 5. For each edge (u, v) ∈ DAG, l(v) ≥ l(u)+1. For
each edge (u, v) ∈ the Eulerian subgraph H, l(u)−l(v)+1 ≥ 0
Proof. Suppose (u, v) ∈ DAG. Then, w(u, v) = −1. Hence,
at the end of Algorithm 2, the condition l(v) ≥ l(u)−(−1) is
satisﬁed. Similarly, for edge (u, v) in H, w(v, u) = 1. Hence,
at the end of Algorithm 2, the condition l(u) ≥ l(v) − 1 is
satisﬁed.

The above lemma shows that for an edge (u, v) in the
DAG, we can set the primal variables x(u, v) = 0 and for
an edge (u, v) in the Eulerian subgraph we set x(u, v) =
l(u) − l(v) + 1 ≥ 0 by Lemma 5.

Theorem 2. x, l is a feasible solution to the primal. z is a
feasible solution to the dual problem. Further,

(cid:88)

x(u, v) =

z(u, v)

(u.v)∈E

(u,v)∈E

Proof. Lemma 5 proves that x, l is a feasible primal solution.
Theorem 1 shows that z is a feasible dual solution. Now, we
show that the value of the primal solution is equal to the
value of a dual solution, which shows that both are optimal.

Value of the primal solution =

x(u,v)

(cid:88)

(cid:88)

(u,v)∈E

(u,v)∈C
(where C is some cycle cover of the Eulerian subgraph)



l(v) − l(u) + 1 = |C|

= number of edges in the Eulerian subgraph

= Value of the dual solution

This proves that x, l is an optimal primal solution.

This shows that the linear program has an integral opti-
mal solution and that Algorithms 1, 2 calculate the optimal
solution to the integer program we started out with.

(u,v)∈E

(u,v)∈DAG

max{0, l(u) − l(v) + 1}+

max{0, l(u) − l(v) + 1}

max{0, l(u) − l(v) + 1}

(u,v)∈H

(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
 For any cycle C,

l(u) − l(v) + 1

l(u) − l(v) + 1

(u,v)∈H

|C|

(cid:88)

(u,v)∈C

=

=

=

=

= 0 +

(cid:88)

C∈C

(cid:88)

C∈C

(By Lemmas 5)

WWW 2011 – Session: Social Network AnalysisMarch 28–April 1, 2011, Hyderabad, India566
