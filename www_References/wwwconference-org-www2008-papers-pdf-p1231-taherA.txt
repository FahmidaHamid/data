[1] B. Benatallah and et al. Developing adapters for web

services integration. In Proc. of the 17th CAISE Conf.,
pages 415–429. Springer Verlag, June 2005.

[2] M. Dumas, M. Spork, and K. Wang. Adapt or perish:

Algebra and visual notation for service interface
adaptation. In Proc. of the 4th BPM Conf., pages
65–80, Vienna, Austria, 09/2006. Springer Verlag.

[3] Y. Taher, D. Benslimane, M.-C. Fauvet, and

Z. Maamar. Towards an approach forweb services
substitution. ideas, 0:166–173, 2006.

Figure 1: Adaptation Example

cessing1 (CEP) is a new EDA paradigm that allows of simple
events to be aggregated into complex ones. More precisely,
CEP is a platform for building and running event-based ap-
plications that could continuously process event streams to
detected a speciﬁed conﬂuence of events, and trigger a spe-
ciﬁc action when the events occur. Most of existing CEP
platforms provide a continuous computation language for
specifying queries each of which deﬁning the schema of an
event stream to be monitored, deﬁning event patterns to
be detected, specifying processing functions and sequencing,
and ﬁnally declaring output to be generated.

As Web service interactions rely on message exchanges,
the process of adaptation consists in consuming incoming
messages, processing them, and ﬁnally producing messages.
With this setting, CEP fulﬁls Web service adaptation re-
quirements. Exchange messages are modelled as events, the
message adaptation logic is encoded in terms of continuous
computation queries (CCQ), that allow the CEP engine to
observe message events and detect the predeﬁned adaptation
situations. By doing so, a CEP engine hosting the adap-
tation CCQ, is able to intermediate messages interactions
between Web services, and acts as a Web service adapter.

3. SYSTEM OVERVIEW

As part of our contribution, we provide developers with
a framework that allows designing, building and deploying
CEP -based Web service adapters. Figure ?? depicts the
proposed framework architecture which is discussed below.

Figure 2: Framework Architecture

3.1 Design-Time environment

We have designed a set of template adaptation operat-
ors, where each of them is intended to deal with a speciﬁc

1http://www.complexevents.com/

SendOne Item Send Stop Mark001001002001Adapter001Item1Item2Item1Item2ReceiveItem ListConsumerServiceSellerServiceWeb serviceInterfacesDesign toolSOAP Integration LayerSOAP Integration Layer: Input Stream: Output StreamWeb serviceInterfacesCCQ Code Generation ToolHTTPSOAPHTTPSOAPService(A)Service(B)LoadCEP EngineOperator-based MapDesign-timeRun-timeInput WrapperInput WrapperOutput WrapperInput WrapperOutput Wrapper: Continuous queries1232WWW 2008 / Poster PaperApril 21-25, 2008 · Beijing, China
