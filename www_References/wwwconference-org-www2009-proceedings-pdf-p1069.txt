
[1] Metamorph, A Framework for Automated Ontology-driven

Metasearch Generation (2008), Technical Report
TR-DBAI-2008-3

[2] He H., Meng W., Yu C., Wu Z. (2003). WISE-Integrator: An

Automatic Integrator of Web Search Interfaces for
E-Commerce.

[3] He, B., Zhang Z., Chang K. (2005). Towards Building a

MetaQuerier: Extracting and Matching Web Query Interfaces.
In ICDE.

[4] Holzinger, W., Kr¨upl, B., Baumgartner R. (2008). Exploiting
Semantic Web Technologies to Model Web Form Interactions.
In WWW2008 .

Figure 1: ﬂight meta-search architecture

3. MODELLING THE SYSTEM

Our aim was to develop a light-weight ﬂight meta-search
system that can be bootstrapped with a minimal amount of
data. Figure 1 shows the basic building blocks of our sys-
tem. There are two components that handle the interaction
with airline websites: web form connectors and result wrap-
pers. The web form connectors fulﬁl two diﬀerent purposes:
To extract an airport connection matrix from the form itself
whenever possible; and to map and process the interactions
that are required to submit a request. The automatic, super-
vised creation of the connectors [4] is part of the Metamorph
framework. Results are piped into wrappers that were in-
teractively generated on a per-website basis using the Lixto
Visual Developer tool. All retrieved data is stored in a local
repository, which also serves as basis for route ﬁnder.

The system is bootstrapped by providing a set of airline
website URLs that contain search forms and a set of wrap-
pers that can interpret their result pages. Initially, the sys-
tem tries to collect as many ﬂight connections as possible
from the web forms themselves and stores the connections
in a local ﬂight connection graph. No additional knowledge
is provided, and all other processing takes place whenever
an end user poses a query via the system’s search interface.
These steps take place when a query containing origin,
destination airport and date of departure is submitted to
the system: The route ﬁnder uses the available data to gen-
erate a number of promising routes. E.g., when a user wants
to research ﬂights from Vienna to Singapore, in addition
to the obvious search from Vienna to Singapore, the route
ﬁnder will additionally generate search requests for ﬂights
from Vienna to promising hubs such as Paris and ﬂights
from there to Singapore. These requests are then forwarded
to an execution engine that uses the appropriate connectors
and wrappers to check the price and availability of the par-
ticular ﬂight at an airline’s website. Finally, the results are
aggregated, re-ranked, and presented to the user; the fares
are stored in a database to provide hints for future requests.

4. ROUTE AND HUB FINDER

The search for direct ﬂights from origin to destination
fulﬁls two purposes: It provides us with a gold standard fare
that the system will have to beat with creative ticketing; and
it will enable the system to grow its ﬂight connection graph
by adding direct connections as well as connections to the
transit cities that will often appear on the result pages of
larger carriers. This is how the graph is used to ﬁnd routes
which should be checked:

First, the route ﬁnder uses a Dijkstra algorithm to ﬁnd

querymultiplequeriesretrieve resultsﬂightsand faressubmit formﬂight connections from resultsﬂight connections from formsAirline websitesWeb Form ConnectorsResult WrappersInterface   Local   databaseFlight graphaggregated andranked resultsRoute FinderMetamorphLixto VDWWW 2009 MADRID!Poster Sessions: Wednesday, April 22, 20091070
