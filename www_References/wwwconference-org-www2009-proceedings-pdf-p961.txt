[1] T. Ball and J. R. Larus. Optimally proﬁling and tracing

programs. ACM Trans. Program. Lang. Syst.,
16(4):1319–1360, 1994.

[2] A. Barth, C. Jackson, and J. C. Mitchell. Robust defenses

for cross-site request forgery. In Proc. of the CCS, pages
75–88, 2008.

[3] I. D. Baxter, A. Yahin, L. Moura, M. Sant’Anna, and

L. Bier. Clone detection using abstract syntax trees. In
Proc. of the ICSM, pages 368–377, 1998.

[4] A. Bortz, D. Boneh, and P. Nandy. Exposing private

information by timing web applications. In Proc. of the
WWW, pages 621–628, 2007.

[5] S. Ceri, P. Fraternali, A. Bongio, M. Brambilla, S. Comai,

and M. Matera. Designing Data-Intensive Web
Applications. Morgan Kaufmann, ISBN 1-55860-843-5,
2002.

[6] S. Chen, J. Meseguer, R. Sasse, H. J. Wang, and Y.-M.

Wang. A systematic approach to uncover security ﬂaws in
gui logic. In Proc. of the S&P, pages 71–85, 2007.
[7] W. S. (Editor). Web Engineering: Principles And

Techniques. IGI Publishing, ISBN 1-591-40433-9, 2005.

[8] L. Falk, A. Prakash, and K. Borders. Analyzing websites

for user-visible security design ﬂaws. In Proceedings of
SOUPS, pages 117–126, 2008.

[9] D. Flanagan. JavaScript: The Deﬁnitive Guide. O’Reilly

Media, ISBN 0-596-10199-6, 2006.

[10] S. Fogie, J. Grossman, R. Hansen, A. Rager, and P. D.
Petkov. XSS Exploits: Cross Site Scripting Attacks and
Defense. Syngress, ISBN 1-597-49154-3, 2007.

[11] Y.-W. Huang, F. Yu, C. Hang, C.-H. Tsai, D.-T. Lee, and

S.-Y. Kuo. Securing web application code by static analysis
and runtime protection. In Proc. of the WWW, pages
40–52, 2004.

[12] C. Jackson, A. Bortz, D. Boneh, and J. C. Mitchell.

Protecting browser state from web privacy attacks. In Proc.
of the WWW, pages 737–744, 2006.

[13] T. Jim, N. Swamy, and M. Hicks. Defeating script injection

attacks with browser-enforced embedded policies. In Proc.
of the WWW, pages 601–610, 2007.

[14] S. Kals, E. Kirda, C. Kruegel, and N. Jovanovic. Secubat: a

web vulnerability scanner. In Proc. of the WWW, pages
247–256, 2006.

[15] G. Kappel, B. Proll, S. Reich, and W. R. (Eds.). Web

Engineering: The Discipline of Systematic Development of
Web Applications. John Wiley & Sons, ISBN
0-470-01554-3, 2006.

[22] T. Oda, G. Wurster, P. V. Oorschot, and A. Somayaji.

Soma: Mutual approval for included content in web pages.
In Proc. of the CCS, pages 89–98, 2008.

[23] T. A. Powell, D. L. Jones, and D. C. Cutts. Web Site

Engineering: Beyond Web Page Design. Prentice Hall,
ISBN: 0-13650-920-7, 1998.

[24] N. Provos, P. Mavrommatis, M. A. Rajab, and F. Monrose.

All your iframes point to us. In Proc. of the USENIX
Security Symposium, 2008.

[25] C. Reis, J. Dunagan, H. J. Wang, O. Dubrovsky, and

S. Esmeir. Browsershield: vulnerability-driven ﬁltering of
dynamic html. In Proc. of the OSDI, pages 61–74, 2006.

[26] D. C. Reis, P. B. Golgher, A. S. Silva, and A. F. Laender.

Automatic web news extraction using tree edit distance. In
Proc. of the WWW, pages 502–511, 2004.

[27] G. Rossi, O. Pastor, D. Schwabe, and L. O. (Eds.). Web

Engineering: Modelling and Implementing Web
Applications. Springer, ISBN: 1-84628-922-X, 2007.

[28] Y.-M. Wang, D. Beck, X. Jiang, R. Roussev, C. Verbowski,

S. Chen, and S. T. King. Automated web patrol with
strider honeymonkeys: Finding web sites that exploit
browser vulnerabilities. In Proc. of the NDSS, 2006.

[29] G. Wassermann and Z. Su. Static detection of cross-site

scripting vulnerabilities. In Proc. of the ICSE, pages
171–180, 2008.

[30] C. A. Welty. Augmenting abstract syntax trees for program

understanding. In Proc. of the ASE, pages 126–133, 1997.

[31] W. Yang. Identifying syntactic diﬀerences between two

programs. Softw. Pract. Exper., 21(7):739–755, 1991.

[32] D. Yu, A. Chander, N. Islam, and I. Serikov. Javascript

instrumentation for browser security. In Proc. of the POPL,
pages 237–249, 2007.

[33] C. Yue, M. Xie, and H. Wang. Automatic cookie usage

setting with cookiepicker. In Proc. of the DSN, pages
460–470, 2007.

[34] Y. Zhai and B. Liu. Web data extraction based on partial
tree alignment. In Proc. of the WWW, pages 76–85, 2005.

[35] 24 ways: Don’t be eval().

http://24ways.org/2005/dont-be-eval.

[36] Alexa Top Sites.

http://www.alexa.com/browse?CategoryID=1.

[37] CERT Advisory CA-2000-02 Malicious HTML Tags

Embedded in Client Web Requests.
http://www.cert.org/advisories/CA-2000-02.html.

[38] Cross-site scripting.

http://en.wikipedia.org/wiki/Cross-site scripting.

[39] eval - MDC. http://developer.mozilla.org/en/

Core JavaScript 1.5 Reference/Global Functions/eval.

[40] JavaScript. http://en.wikipedia.org/wiki/JavaScript.
[41] JSAPI reference - MDC.

http://developer.mozilla.org/en/JSAPI Reference.
[42] JSON in JavaScript. http://www.json.org/js.html.
[43] JSPrincipals - MDC.

[16] B. Krishnamurthy and C. E. Wills. Cat and mouse: content

http://developer.mozilla.org/en/JSPrincipals.

delivery tradeoﬀs in web access. In Proc. of the WWW,
pages 337–346, 2006.

[17] V. T. Lam, S. Antonatos, P. Akritidis, and K. G.

Anagnostakis. Puppetnets: misusing web browsers as a
distributed attack infrastructure. In Proc. of the CCS,
pages 221–234, 2006.

[18] B. Livshits and W. Cui. Spectator: detection and

containment of javascript worms. In Proc. of the USENIX
Annual Technical Conference, pages 335–348, 2008.

[19] E. Mendes and N. M. (Eds.). Web Engineering. Springer,

ISBN 3-540-28196-7, 2005.

[20] A. Moshchuk, T. Bragin, S. D. Gribble, and H. M. Levy. A
crawler-based study of spyware in the web. In Proc. of the
NDSS, 2006.

[21] S. Murugesan and Y. D. (Eds.). Web Engineering :

Managing Diversity and Complexity of Web Application
Development. Springer, ISBN 3-540-42130-0, 2001.

[44] MSDN: innerHTML property. http://msdn.microsoft .com

/en-us/library/ms533897(VS.85).aspx.

[45] Same origin policy.

http://en.wikipedia.org/wiki/Same origin policy.

[46] SANS Top-20 2007 Security Risks (2007 Annual Update).

http://www.sans.org/top20/2007/.

[47] SpiderMonkey (JavaScript-C) Engine.

http://www.mozilla.org/js/spidermonkey/.

[48] Symantec Internet security threat report volume XIII:

April, 2008. http://www.symantec.com/
business/theme.jsp?themeid=threatreport.

[49] Unobtrusive Javascript. http://www.onlinetools.org/

articles/unobtrusivejavascript/.

[50] XMLHttpRequest.

http://www.w3.org/TR/XMLHttpRequest/.

WWW 2009 MADRID!Track: Web Engineering / Session: Client Side Web Engineering970
